<?xml version="1.0" encoding="utf-8"?>
<examples xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" lang="ja_JP" xsi:noNamespaceSchemaLocation="../Manuals/xml/xsd/hdevelop_example_list.xsd">
   <example>
      <name>1394iidc.hdev</name>
      <desc>IIDC1394準拠カメラを用いた画像取り込み（性能評価） (Grab images from IIDC 1394 compliant cameras (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>1394iidc2.hdev</name>
      <desc>1394IIDC-2インターフェースを用いた画像取り込み (性能評価) (Grab images using a 1394IIDC-2 interface (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>1394iidc2_2cameras.hdev</name>
      <desc>1394IIDC-2規格のカメラ2台での画像取り込み ( Grab images using two 1394IIDC-2 interfaces )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>1394iidc2_camera_types.hdev</name>
      <desc>1394IIDC-2規格のカメラの参照および画像取り込み ( Query and use all supported camera types of a 1394IIDC-2 interface )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>1394iidc2_crop.hdev</name>
      <desc>1394IIDC-2インターフェースを用いた画像取り込み（(部分取り込み） (Grab images using a 1394IIDC-2 interface (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>1394iidc2_parameters.hdev</name>
      <desc>1394IIDC-2インターフェースを用いた画像取り込み (パラメーター設定の確認) (Grab images using a 1394IIDC-2 interface (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>1394iidc2_register_access.hdev</name>
      <desc>1394IIDC-2インターフェースを用いた画像取り込み（レジスタへの直接アクセス） (Grab images using a 1394IIDC-2 interface (use of direct register access))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>1394iidc2_simple.hdev</name>
      <desc>1394IIDC-2インターフェースの適用 ( Use a 1394IIDC-2 interface (simple) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>1394iidc_2cameras.hdev</name>
      <desc>IIDC 1394カメラ2台での画像取り込み ( Grab images from two IIDC 1394 compliant cameras )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>1394iidc_camera_types.hdev</name>
      <desc>IIDC1394対応のカメラタイプ取得と使用 (Query and use all supported camera types of a IIDC 1394 compliant camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_strstr</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>1394iidc_crop.hdev</name>
      <desc>IIDC 1394準拠カメラからの画像撮り込み (AOIを使用) (Grab images from IIDC 1394 compliant cameras (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>1394iidc_format7.hdev</name>
      <desc>IIDC1394準拠カメラ を用いた画像取り込み（画像フォーマット7でフレームレートを変更） (Grab images from IIDC 1394 compliant cameras (using image format 7 with different frame rates))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>disp_rectangle1</operator>
      <operator>draw_rectangle1</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_round</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>1394iidc_parameters.hdev</name>
      <desc>IIDC1394カメラを使用した画像の取り込み(パラメータ設定の取得) ( Grab images from IIDC 1394 compliant cameras (query parameter settings) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>1394iidc_simple.hdev</name>
      <desc>IIDC1394カメラを使用した画像取り込み ( Use a IIDC 1394 compliant camera (simple) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>1394iidc_software_trigger.hdev</name>
      <desc>IIDC 1394準拠カメラを用いた画像取り込み (ソフトウェアトリガ使用) (Grab images with software trigger from a IIDC 1394 compliant camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>25industrial.hdev</name>
      <desc>バーコード 2/5 industrialの読取 ( Read a bar code of type 2/5 industrial )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>25interleaved.hdev</name>
      <desc>バーコード 2/5 interleavedの読取 ( Read a bar code of type 2/5 interleaved )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>2d_data_codes_arbitrary_distortions.hdev</name>
      <desc>歪んだ形状のECC200の読み取りデモ ( Train a 2D data code model and write it into a file )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>dev_close_inspect_ctrl</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>read_image</operator>
      <operator>set_data_code_2d_param</operator>
      <operator>wait_seconds</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_data_access.hdev</name>
      <desc>ECC200読み取り時の中間データへのアクセス ( Access intermediate results when trying to read symbols of type ECC200 )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>dev_close_inspect_ctrl</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_first_example.hdev</name>
      <desc>ECC200の読み取り</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_global_settings.hdev</name>
      <desc>ECC200読み取りstandardモードとenhancedモードの切り替え ( Switch between standard and enhanced mode for reading symbols of type ECC200 )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_manual_settings.hdev</name>
      <desc>ECC200の読み取りパラメーターの手動設定 ( Set parameters manually for reading symbols of type ECC200 )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_contour_xld</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_minimize_module_gaps.hdev</name>
      <desc>ECC200の大きなズレを最小化 ( Minimize large gaps in a symbol of type ECC200 )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>gray_erosion_shape</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_minimize_noise.hdev</name>
      <desc>ECC200のノイズを最小化 ( Minimize noise in a symbol of type ECC200 )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>gray_opening_shape</operator>
      <operator>median_image</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_rectify_symbol.hdev</name>
      <desc>歪んだECC200を補正 ( Rectify a slanted symbol of type ECC200 )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.trafo.rectif</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>hom_vector_to_proj_hom_mat2d</operator>
      <operator>projective_trans_image</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>2d_data_codes_training.hdev</name>
      <desc>ECC200読み取り用2Dデータコードモデルをトレーニング ( Train a 2D data code model for symbols of type ECC200 )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>dev_close_inspect_ctrl</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>3d_coordinates.hdev</name>
      <desc>世界座標における対象物の傾き計測 ( Measure slanted object in world coordinates )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.calib</method>
      <method>method.visual</method>
      <method>method.blob</method>
      <method>method.functions</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.trafo.wcoord</method>
      <method>method.metrol</method>
      <method>method.tuple</method>
      <method>method.numeric</method>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>close_measure</operator>
      <operator>contour_to_world_plane_xld</operator>
      <operator>disp_circle</operator>
      <operator>disp_rectangle2</operator>
      <operator>edges_sub_pix</operator>
      <operator>erosion_circle</operator>
      <operator>fill_up</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_contour_xld</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>measure_pos</operator>
      <operator>reduce_domain</operator>
      <operator>regress_contours_xld</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>select_shape</operator>
      <operator>threshold</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>3d_information_for_selected_points.hdev</name>
      <desc>1組のステレオ画像中の世界座標を計算 ( Calculate world coordinates for a point in a stereo image pair )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.roi</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.wcoord</method>
      <method>method.stereo</method>
      <method>method.visual</method>
      <operator>affine_trans_point_3d</operator>
      <operator>binocular_disparity</operator>
      <operator>caltab_points</operator>
      <operator>disparity_to_distance</operator>
      <operator>disparity_to_point_3d</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>get_grayval</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>hom_mat3d_rotate_local</operator>
      <operator>hom_mat3d_translate_local</operator>
      <operator>intersect_lines_of_sight</operator>
      <operator>map_image</operator>
      <operator>min_max_gray</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>vector_to_pose</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>3d_matching_clamps.hdev</name>
      <desc>3次元CAD(DXF)モデルを用いた3次元対象の位置認識 ( Recognize 3D objects in images using a 3D DXF model )</desc>
      <path>hdevelop/Applications/Position-Recognition-3D/</path>
      <industry>industry.machine</industry>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object3d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.match3d.shape</method>
      <method>method.visual</method>
      <method>method.poseestim</method>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_point_3d</operator>
      <operator>axis_angle_to_quat</operator>
      <operator>break</operator>
      <operator>clear_object_model_3d</operator>
      <operator>clear_shape_model_3d</operator>
      <operator>clear_window</operator>
      <operator>close_window</operator>
      <operator>compose3</operator>
      <operator>convert_point_3d_cart_to_spher</operator>
      <operator>convert_point_3d_spher_to_cart</operator>
      <operator>copy_rectangle</operator>
      <operator>count_seconds</operator>
      <operator>create_pose</operator>
      <operator>create_shape_model_3d</operator>
      <operator>dev_set_preferences</operator>
      <operator>disp_image</operator>
      <operator>disp_rectangle1</operator>
      <operator>disp_region</operator>
      <operator>disp_xld</operator>
      <operator>find_shape_model_3d</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>gen_image_const</operator>
      <operator>gen_region_points</operator>
      <operator>get_draw</operator>
      <operator>get_line_style</operator>
      <operator>get_mposition</operator>
      <operator>get_object_model_3d_params</operator>
      <operator>get_region_contour</operator>
      <operator>get_shape_model_3d_params</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>open_window</operator>
      <operator>paint_xld</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>prepare_object_model_3d</operator>
      <operator>project_3d_point</operator>
      <operator>project_object_model_3d</operator>
      <operator>project_shape_model_3d</operator>
      <operator>quat_compose</operator>
      <operator>quat_normalize</operator>
      <operator>quat_to_hom_mat3d</operator>
      <operator>read_shape_model_3d</operator>
      <operator>set_line_style</operator>
      <operator>set_line_width</operator>
      <operator>set_part</operator>
      <operator>test_region_point</operator>
      <operator>tuple_atan2</operator>
      <operator>tuple_chr</operator>
      <operator>wait_seconds</operator>
      <operator>write_shape_model_3d</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>3d_position_of_circles.hdev</name>
      <desc>円形状の透視方向への2次元投影から3次元位置・姿勢を検出する手法 ( Determine the pose of circles in 3D from their perspective 2D projections )</desc>
      <path>hdevelop/Applications/Position-Recognition-3D/</path>
      <industry>industry.general</industry>
      <industry>industry.auto</industry>
      <industry>industry.machine</industry>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.blob</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.numeric</method>
      <method>method.tuple</method>
      <method>method.functions</method>
      <method>method.poseestim</method>
      <operator>affine_trans_point_3d</operator>
      <operator>dev_display</operator>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>disp_rectangle1</operator>
      <operator>erosion_circle</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_circle_pose</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>reduce_domain</operator>
      <operator>select_contours_xld</operator>
      <operator>select_shape</operator>
      <operator>set_tposition</operator>
      <operator>threshold</operator>
      <operator>tuple_sort_index</operator>
      <operator>union1</operator>
      <operator>write_string</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>3d_position_of_rectangle.hdev</name>
      <desc>矩形対象の3次元位置・姿勢を取得 ( Estimate 3D pose of rectangular objects )</desc>
      <path>hdevelop/Applications/Position-Recognition-3D/</path>
      <industry>industry.metal</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.poseestim</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.geom</method>
      <method>method.visual</method>
      <method>method.trafo.wcoord</method>
      <operator>affine_trans_point_3d</operator>
      <operator>area_center</operator>
      <operator>close_contours_xld</operator>
      <operator>complement</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>dilation_rectangle1</operator>
      <operator>dyn_threshold</operator>
      <operator>erosion_circle</operator>
      <operator>erosion_rectangle1</operator>
      <operator>fill_up</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>get_rectangle_pose</operator>
      <operator>get_system</operator>
      <operator>if</operator>
      <operator>intersection</operator>
      <operator>intersection_ll</operator>
      <operator>mean_image</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>reduce_domain</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>select_shape</operator>
      <operator>set_system</operator>
      <operator>tuple_find</operator>
      <operator>tuple_gen_const</operator>
      <operator>union_adjacent_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>abs.hdev</name>
      <desc>ABS USB2.0カメラを用いた画像取り込み (Grab images from ABS USB 2.0 cameras)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>sobel_amp</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>abs_crop.hdev</name>
      <desc>ABSカメラを使用した画像取り込み(画像の切り出し) ( Grab images from ABS cameras (image cropping) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>abs_do_parameter.hdev</name>
      <desc>ABSカメラを用いた画像取り込み（トリガ入力複数カメラ） (Grab images from ABS cameras (trigger multiple cameras))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>abs_image.hdev</name>
      <desc>画像の輝度値の絶対値算出 ( Calculate absolute pixel values of an image )</desc>
      <path>hdevelop/Filters/Arithmetic/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>abs_image</operator>
      <operator>convert_image_type</operator>
      <operator>sub_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>abs_parameters.hdev</name>
      <desc>ABSカメラを使用した画像取り込み(パラメータ設定の取得) ( Grab images from ABS cameras (query current parameter settings) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>abs_simple.hdev</name>
      <desc>ABSカメラからの画像撮り込み (Grab images from ABS cameras)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>adapt_pattern.hdev</name>
      <desc>画像サイズに最適化したグレイ値ベースマッチングの適用例 ( Apply online pattern matching using an adapting gray value template )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.acqu</method>
      <method>method.match.gray</method>
      <operator>adapt_template</operator>
      <operator>add_channels</operator>
      <operator>best_match</operator>
      <operator>clear_template</operator>
      <operator>close_framegrabber</operator>
      <operator>create_template</operator>
      <operator>draw_rectangle1</operator>
      <operator>fast_match_mg</operator>
      <operator>gen_rectangle1</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>adaption_ocv.hdev</name>
      <desc>文字品質指標に基づく照明変化による影響の解析 ( Analyze the impact of illumination changes on reported character quality )</desc>
      <path>hdevelop/Applications/Print-Inspection/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.ocv</method>
      <method>method.filter.general</method>
      <operator>create_ocv_proj</operator>
      <operator>do_ocv_simple</operator>
      <operator>paint_region</operator>
      <operator>scale_image</operator>
      <operator>traind_ocv_proj</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>add_image.hdev</name>
      <desc>二つの画像の加算 ( Add two images )</desc>
      <path>hdevelop/Filters/Arithmetic/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>add_image</operator>
      <operator>crop_part</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>adjust_circle_matrix.hdev</name>
      <desc>行列演算の使用方法のデモ（一定の大きさの穴領域を検出） ( Demonstrate how to use matrices )</desc>
      <path>hdevelop/Matrix/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.numeric</method>
      <method>method.tuple</method>
      <operator>add_matrix</operator>
      <operator>add_matrix_mod</operator>
      <operator>clear_matrix</operator>
      <operator>create_matrix</operator>
      <operator>get_full_matrix</operator>
      <operator>get_grayval_interpolated</operator>
      <operator>invert_matrix</operator>
      <operator>mean_matrix</operator>
      <operator>mult_element_matrix</operator>
      <operator>mult_matrix</operator>
      <operator>pow_scalar_element_matrix</operator>
      <operator>scale_matrix</operator>
      <operator>set_value_matrix</operator>
      <operator>sqrt_matrix_mod</operator>
      <operator>sub_matrix</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>adjust_mosaic_images.hdev</name>
      <desc>放射状に補正された画像群から組み合わされた球形モザイク画像の生成 ( Create blended spherical mosaic image from radiometrically adjusted images )</desc>
      <path>hdevelop/Tools/Mosaicking/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.match.point</method>
      <method>method.filter.points</method>
      <method>method.mosaic</method>
      <method>method.filter.general</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.align</method>
      <operator>adjust_mosaic_images</operator>
      <operator>cam_mat_to_cam_par</operator>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_radial_distortion_map</operator>
      <operator>gen_spherical_mosaic</operator>
      <operator>hom_mat2d_compose</operator>
      <operator>hom_mat2d_invert</operator>
      <operator>hom_mat2d_transpose</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>map_image</operator>
      <operator>points_foerstner</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>read_image</operator>
      <operator>rgb1_to_gray</operator>
      <operator>stationary_camera_self_calibration</operator>
      <operator>tile_images_offset</operator>
      <newinversion>8.0.1</newinversion>
   </example>
   <example>
      <name>adlink.hdev</name>
      <desc>ADLINKインターフェースの使用（性能評価） ( Use an ADLINK interface (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>adlink_parameters.hdev</name>
      <desc>ADLINKインターフェースからのパラメータ設定の確認 ( Query parameter settings from an ADLINK interface )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>adlink_simple.hdev</name>
      <desc>ADLINKインターフェースからの画像取得 ( Grab images from an ADLINK interface )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>affine_trans_region.hdev</name>
      <desc>領域にアフィン変換(回転・拡大)を適用 ( Apply affine transformations to regions )</desc>
      <path>hdevelop/Regions/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>affine_trans_region</operator>
      <operator>draw_region</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_scale</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>affine_transform_image.hdev</name>
      <desc>画像へのアフィン変換の適用 ( Apply affine transformations to an image )</desc>
      <path>hdevelop/Filters/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_region</operator>
      <operator>dev_update_pc</operator>
      <operator>dev_update_time</operator>
      <operator>dev_update_var</operator>
      <operator>dev_update_window</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>opening_circle</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>affine_transform_image_size.hdev</name>
      <desc>画像部へのアフィン変換の適用 ( Apply affine transformations to an image part )</desc>
      <path>hdevelop/Filters/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>affine_trans_image_size</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>align_measurements.hdev</name>
      <desc>形状ベースパターンマッチングの結果を用いて計測用のROIを設定し、工業用カミソリの刃を検査 ( Inspect individual razor blades using shape-based matching to align ROIs for the measure tool )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <method>method.metrol</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_pixel</operator>
      <operator>affine_trans_region</operator>
      <operator>clear_shape_model</operator>
      <operator>close_measure</operator>
      <operator>create_shape_model</operator>
      <operator>disp_rectangle2</operator>
      <operator>find_shape_model</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_shape_model_contours</operator>
      <operator>inspect_shape_model</operator>
      <operator>measure_pairs</operator>
      <operator>move_region</operator>
      <operator>translate_measure</operator>
      <operator>union2</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>andor.hdev</name>
      <desc>Andorカメラを使用（性能評価） (Use an Andor camera (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>andor_parameters.hdev</name>
      <desc>Andorカメラからパラメーター設定を取得 (Query parameter settings from an Andor camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>andor_simple.hdev</name>
      <desc>Andorカメラからの画像取り込み (Grab images from an Andor camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>angio.hdev</name>
      <desc>血管造影図からの血管の抽出および血管の直径計測 ( Extract blood vessels and their diameters from an angiogram )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.health</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <method>method.numeric</method>
      <method>method.functions</method>
      <method>method.tuple</method>
      <operator>assign</operator>
      <operator>concat_obj</operator>
      <operator>count_obj</operator>
      <operator>gen_empty_obj</operator>
      <operator>get_contour_attrib_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>lines_gauss</operator>
      <operator>select_contours_xld</operator>
      <operator>select_obj</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>angle_ll.hdev</name>
      <desc>二つの直線間の角度の算出 ( Calculate the angle between two lines )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>angle_ll</operator>
      <operator>disp_line</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>angle_lx.hdev</name>
      <desc>直線と垂直軸の間の角度の算出 ( Calculate the angle between a line and the vertical axis )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>angle_lx</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>anisotropic_diffusion.hdev</name>
      <desc>エッジを保持した異方性拡散を用いた画像のスムージング ( Smooth an image using edge-preserving anisotropic diffusion )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>anisotropic_diffusion</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>area_center.hdev</name>
      <desc>領域の面積と重心座標を算出 ( Calculate area and center of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>area_center</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>area_center_gray.hdev</name>
      <desc>グレイ値の面積・重心計算の精度を解析 ( Analyze the accuracy of calculating the gray area and center of gravity )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>area_center</operator>
      <operator>area_center_gray</operator>
      <operator>gen_circle</operator>
      <operator>gen_image_const</operator>
      <operator>paint_region</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>area_holes.hdev</name>
      <desc>領域の穴の面積値(area_holes)を計算 ( Calculate area of the holes of a region )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>area_holes</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>arithmetic.hdev</name>
      <desc>スカラ値、Tuple、文字列の演算の実行 ( Perform operations on scalars, tuples and strings )</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <method>method.tuple</method>
      <method>method.string</method>
      <operator>assign</operator>
   </example>
   <example>
      <name>assign.hdev</name>
      <desc>変数やtupleへの値の割り当て ( Assign values to variables and tuple elements )</desc>
      <path>hdevelop/Control/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.tuple</method>
      <method>method.functions</method>
      <method>method.controlstruct</method>
      <method>method.numeric</method>
      <operator>assign</operator>
      <operator>insert</operator>
      <operator>endfor</operator>
      <operator>for</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>assign.hdev</name>
      <desc>値の割付 ( Assign values )</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <method>method.tuple</method>
      <method>method.functions</method>
      <operator>assign</operator>
      <operator>insert</operator>
   </example>
   <example>
      <name>atoms.hdev</name>
      <desc>網目構造の欠陥箇所を検出 ( Locate irregularities in an atomic grid structure )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>crop_rectangle1</operator>
      <operator>gauss_image</operator>
      <operator>select_shape</operator>
      <operator>watersheds</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>auto_threshold.hdev</name>
      <desc>自動しきい値設定を使用した画像の分割化 （ Segment an image using an automatically determined threshold ）</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <method>method.funct1d</method>
      <operator>auto_threshold</operator>
      <operator>create_funct_1d_array</operator>
      <operator>funct_1d_to_pairs</operator>
      <operator>gen_region_histo</operator>
      <operator>gray_histo</operator>
      <operator>smooth_funct_1d_gauss</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>autobahn.hdev</name>
      <desc>高速道における白線追従 ( Detect lane markers fast )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.transp</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.filter.edge</method>
      <method>method.roi</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <operator>clip_region</operator>
      <operator>dev_display</operator>
      <operator>dilation_rectangle1</operator>
      <operator>fill_up</operator>
      <operator>gen_grid_region</operator>
      <operator>get_system</operator>
      <operator>read_image</operator>
      <operator>reduce_domain</operator>
      <operator>set_system</operator>
      <operator>sobel_amp</operator>
      <operator>threshold</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>background_seg.hdev</name>
      <desc>前景領域による背景領域のラベリング ( Calculate connected background components for given foreground regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <method>method.segm</method>
      <method>method.regionproc</method>
      <operator>background_seg</operator>
      <operator>fill_up_shape</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>ball.hdev</name>
      <desc>ボールボンディングの検査 ( Inspect ball bondings )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.functions</method>
      <method>method.filter.general</method>
      <operator>connection</operator>
      <operator>disp_circle</operator>
      <operator>fill_up_shape</operator>
      <operator>opening_circle</operator>
      <operator>reduce_domain</operator>
      <operator>set_font</operator>
      <operator>set_tposition</operator>
      <operator>smallest_circle</operator>
      <operator>sort_region</operator>
      <operator>threshold</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>ball_seq.hdev</name>
      <desc>複数枚の画像に対するボールボンディングの検査 ( Inspect ball bondings (multiple images) )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.functions</method>
      <method>method.filter.general</method>
      <operator>difference</operator>
      <operator>expand_gray</operator>
      <operator>fill_up_shape</operator>
      <operator>gen_empty_region</operator>
      <operator>min_max_gray</operator>
      <operator>opening_circle</operator>
      <operator>read_image</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape_std</operator>
      <operator>shape_trans</operator>
      <operator>smallest_circle</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>bandpass_image.hdev</name>
      <desc>バンドパスフィルタを使用したラインの抽出 ( Extract lines using bandpass filter )</desc>
      <path>hdevelop/Filters/Lines/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>bandpass_image</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>barcode_autodiscrimination.hdev</name>
      <desc>自動識別によるバーコードの読取 ( discrimination )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_result</operator>
      <operator>get_param_info</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>barcode_orientation.hdev</name>
      <desc>バーコードパラメータ 'orientation'の使用 ( Use the bar code parameter 'orientation' )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>dev_set_window_extents</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_result</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>rotate_image</operator>
      <operator>set_rgb</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>barcode_param_element_height_min.hdev</name>
      <desc>バーコードパラメータ 'element_height_min'の使用 ( Use the bar code parameter 'element_height_min' )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>copy_image</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_bar_code_object</operator>
      <operator>get_bar_code_param</operator>
      <operator>get_rgb</operator>
      <operator>overpaint_region</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>barcode_param_max_diff_orient.hdev</name>
      <desc>バーコードパラメータ 'max_diff_orient'の使用 ( Use the bar code parameter 'max_diff_orient' )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>binomial_filter</operator>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_object</operator>
      <operator>get_bar_code_param</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>8.0.1</newinversion>
   </example>
   <example>
      <name>barcode_param_meas_thresh_abs.hdev</name>
      <desc>バーコードパラメータ 'meas_thresh_abs'の使用 ( Use the bar code parameter 'meas_thresh_abs' )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>find_bar_code</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>barcode_param_num_scanlines.hdev</name>
      <desc>1Dバーコード読取のスキャンラインの数の制御 ( Control the number of scanlines for the 1D bar code reader )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>find_bar_code</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>barcode_param_orientation.hdev</name>
      <desc>バーコードパラメータ'orientation'と'orientation_tol'の使用 ( Use the bar code parameters 'orientation' and 'orientation_tol' )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_param</operator>
      <operator>get_bar_code_result</operator>
      <operator>get_rgb</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>barcode_param_scanning_control.hdev</name>
      <desc>1Dバーコード読取のスキャン方法の制御 ( Control the scanning behavior of the 1D bar code reader )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>find_bar_code</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>barcode_param_stop_after_result_num.hdev</name>
      <desc>バーコードパラメータ 'stop_after_result_num'の使用 ( Use the bar code parameter 'stop_after_result_num' )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>get_bar_code_object</operator>
      <operator>get_image_size</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_bar_code_param_specific</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>barcode_status.hdev</name>
      <desc>バーコード読取に対するステータスメッセージの参照 ( Access status messages for the bar code reader )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>get_bar_code_result</operator>
      <operator>tuple_number</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>barcode_training.hdev</name>
      <desc>バーコード読取のパラメータトレーニング ( Train the parameters of a bar code reader )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_param</operator>
      <operator>get_bar_code_param_specific</operator>
      <operator>query_bar_code_params</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>barcode_typical_cases.hdev</name>
      <desc>読み取り困難な1Dバーコードへの前処理 ( Preprocess 1D bar codes that are difficult to read )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>create_bar_code_model</operator>
      <operator>emphasize</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_object</operator>
      <operator>gray_erosion_shape</operator>
      <operator>min_max_gray</operator>
      <operator>scale_image</operator>
      <operator>set_bar_code_param</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>9.0.1</newinversion>
   </example>
   <example>
      <name>best_match.hdev</name>
      <desc>グレイ値ベーステンプレートを用いた最適マッチングによる検索 ( Find the best match of a gray value template )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <industry>industry.auto</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <operator>best_match</operator>
      <operator>create_template</operator>
      <operator>disp_rectangle1</operator>
      <operator>fill_interlace</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>best_match_mg.hdev</name>
      <desc>グレイ値ベーステンプレートを用いてピラミッドアルゴリズムを適用した最適マッチングによる検索 ( Find the best match of a gray value template in a pyramid )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.trafo.geom</method>
      <operator>adapt_template</operator>
      <operator>add_noise_white</operator>
      <operator>affine_trans_image</operator>
      <operator>best_match_mg</operator>
      <operator>create_template</operator>
      <operator>gen_rectangle1</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_translate</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>best_match_rot_mg.hdev</name>
      <desc>グレイ値ベーステンプレートを用いてピラミッドアルゴリズムを適用し回転を考慮した最適マッチングによる検索 ( Find the best match (with rotation) of a gray value template in a pyramid )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_image</operator>
      <operator>best_match_rot_mg</operator>
      <operator>clear_template</operator>
      <operator>create_template_rot</operator>
      <operator>disp_arrow</operator>
      <operator>fill_interlace</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>best_match_rot_mg_clip1.hdev</name>
      <desc>グレイ値ベーステンプレートを用いたクリップ位置・角度の取得 ( Find position and orientation of clips using a gray value template )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <operator>best_match_rot_mg</operator>
      <operator>clear_template</operator>
      <operator>create_template_rot</operator>
      <operator>difference</operator>
      <operator>disp_arrow</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_domain</operator>
      <operator>if</operator>
      <operator>union1</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>best_match_rot_mg_clip2.hdev</name>
      <desc>クリップ形状の一部に対するマッチング適用により位置・角度を取得 ( Find position and orientation of clips by matching only the tips )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <operator>best_match_rot_mg</operator>
      <operator>clear_template</operator>
      <operator>create_template_rot</operator>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>disp_arrow</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_domain</operator>
      <operator>union1</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>bin_threshold.hdev</name>
      <desc>自動しきい値による画像の分割 ( Segment an image using an automatically determined threshold )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>bin_threshold</operator>
      <operator>gen_region_histo</operator>
      <operator>gray_histo</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>bin_threshold2.hdev</name>
      <desc>自動しきい値法による白と黒の画像の分割 ( Segment a black-and-white image using an automatically determined threshold )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>bin_threshold</operator>
      <operator>gray_histo</operator>
      <operator>histo_to_thresh</operator>
      <operator>threshold</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>binocular_calibration.hdev</name>
      <desc>ステレオシステムのキャリブレーションと画像ペアの補正 ( Calibrate stereo systems and rectify image pairs )</desc>
      <path>hdevelop/Calibration/Binocular/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.stereo</method>
      <method>method.calib</method>
      <method>method.visual</method>
      <method>method.trafo.rectif</method>
      <operator>binocular_calibration</operator>
      <operator>caltab_points</operator>
      <operator>disp_caltab</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>map_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>binocular_disparity.hdev</name>
      <desc>エピポーラ画像ペアからの視差計測 ( Calculate disparities from epipolar image pairs )</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <operator>binocular_disparity</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>binocular_disparity_mg.hdev</name>
      <desc>複数の精度レベルによるエピポーラ画像ペアからの視差計測 ( Calculate disparities from epipolar image pairs with different levels of accuracy )</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <operator>binocular_disparity_mg</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>map_image</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>binocular_disparity_segmentation.hdev</name>
      <desc>人工画像ペアを用いたステレオ計測</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.stereo</method>
      <method>method.visual</method>
      <method>method.filter.general</method>
      <method>method.feat</method>
      <method>method.roi</method>
      <method>method.typeconv.ico</method>
      <method>method.trafo.geom</method>
      <operator>add_noise_white</operator>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_region</operator>
      <operator>bin_threshold</operator>
      <operator>binocular_disparity</operator>
      <operator>convert_image_type</operator>
      <operator>gen_circle</operator>
      <operator>gen_image_const</operator>
      <operator>gen_image_proto</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>min_max_gray</operator>
      <operator>paint_gray</operator>
      <operator>scale_image</operator>
      <operator>smallest_circle</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>binocular_distance_mg.hdev</name>
      <desc>PCB上の部品の高精度高さ計測 ( Calculate the depths of the components on a PCB with high accuracy )</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <operator>binocular_distance_mg</operator>
      <operator>gen_binocular_rectification_map</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>binomial_filter.hdev</name>
      <desc>binomialフィルタとGaussianフィルタの性能の比較 ( Compare the performance of binomial and Gaussian filters )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>binomial_filter</operator>
      <operator>count_seconds</operator>
      <operator>disp_rectangle1</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_system</operator>
      <operator>get_window_extents</operator>
      <operator>info_smooth</operator>
      <operator>set_font</operator>
      <operator>set_rgb</operator>
      <operator>smooth_image</operator>
      <operator>sub_image</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>bit.hdev</name>
      <desc>スカラ値に対するビット単位演算の実行 ( Perform bitwise operations on scalars )</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <method>method.functions</method>
      <operator>assign</operator>
   </example>
   <example>
      <name>bitflow.hdev</name>
      <desc>BitFlowフレームグラバーの使用 (性能評価) (Use a BitFlow frame grabber board (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>5.2.4</newinversion>
   </example>
   <example>
      <name>bitflow_2boards.hdev</name>
      <desc>BitFlowフレームグラバー2枚の使用 (Use two BitFlow frame grabber boards)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>5.2.4</newinversion>
   </example>
   <example>
      <name>bitflow_2ports.hdev</name>
      <desc>BitFlowフレームグラバーの使用 (カメラ2台、ポートスイッチングを使用) (Use a BitFlow frame grabber board with two cameras and port switching)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>set_part</operator>
      <newinversion>5.2.4</newinversion>
   </example>
   <example>
      <name>bitflow_2simultaneous.hdev</name>
      <desc>BitFlowフレームグラバーを用いた同時取り込み (Grab simultaneously with a BitFlow frame grabber board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>5.2.4</newinversion>
   </example>
   <example>
      <name>bitflow_cont.hdev</name>
      <desc>BitFlowフレームグラバーをパラメータ化 (continuous grabbing) (Parameterize a BitFlow frame grabber board (continuous grabbing))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>5.2.4</newinversion>
   </example>
   <example>
      <name>bitflow_lut.hdev</name>
      <desc>BitFlowフレームグラバー用にLUT設定 (Set a lookup table for a BitFlow frame grabber board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_lut</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_lut</operator>
      <newinversion>5.2.4</newinversion>
   </example>
   <example>
      <name>bitflow_simple.hdev</name>
      <desc>BitFlowフレームグラバーを使用 (simple) (Use a BitFlow frame grabber board (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>5.2.4</newinversion>
   </example>
   <example>
      <name>blended_mosaic.hdev</name>
      <desc>球体および立方体をブレンドしたモザイク画像の生成 ( Create blended spherical and cube map mosaic images )</desc>
      <path>hdevelop/Filters/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.match.point</method>
      <method>method.filter.points</method>
      <method>method.mosaic</method>
      <method>method.filter.general</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.align</method>
      <operator>cam_mat_to_cam_par</operator>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>gen_cube_map_mosaic</operator>
      <operator>gen_radial_distortion_map</operator>
      <operator>gen_spherical_mosaic</operator>
      <operator>hom_mat2d_compose</operator>
      <operator>points_foerstner</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>stationary_camera_self_calibration</operator>
      <operator>tile_images_offset</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>board.hdev</name>
      <desc>異なる方向から照射して撮像した画像からのはんだもれ検出 ( Detect missing solder in images taken with different illumination direction )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <method>method.functions</method>
      <operator>area_center</operator>
      <operator>channels_to_image</operator>
      <operator>complement</operator>
      <operator>dev_display</operator>
      <operator>difference</operator>
      <operator>expand_gray</operator>
      <operator>expand_region</operator>
      <operator>fill_up</operator>
      <operator>get_system</operator>
      <operator>intersection</operator>
      <operator>mean_n</operator>
      <operator>read_image</operator>
      <operator>union1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>board_components.hdev</name>
      <desc>ステレオ計測を利用した高さ情報による電子基板の部品抽出 ( Extract board components by height using binocular stereo )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.calib</method>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>binocular_distance</operator>
      <operator>calibrate_cameras</operator>
      <operator>caltab_points</operator>
      <operator>complement</operator>
      <operator>create_calib_data</operator>
      <operator>disp_caltab</operator>
      <operator>disp_cross</operator>
      <operator>disp_image</operator>
      <operator>disp_line</operator>
      <operator>emphasize</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>gen_circle</operator>
      <operator>gen_image_surface_first_order</operator>
      <operator>get_calib_data</operator>
      <operator>get_domain</operator>
      <operator>intersection</operator>
      <operator>invert_image</operator>
      <operator>map_image</operator>
      <operator>moments_gray_plane</operator>
      <operator>scale_image</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>sub_image</operator>
      <operator>union1</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>board_segmentation_uncalib.hdev</name>
      <desc>キャリブレーションなしのステレオ計測による電子基板上の部品の高さ抽出 ( Extract board components by height using uncalibrated binocular stereo )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <operator>auto_threshold</operator>
      <operator>binocular_disparity</operator>
      <operator>compose3</operator>
      <operator>gen_binocular_proj_rectification</operator>
      <operator>gen_circle</operator>
      <operator>gen_image_surface_first_order</operator>
      <operator>get_domain</operator>
      <operator>intersection</operator>
      <operator>map_image</operator>
      <operator>match_fundamental_matrix_ransac</operator>
      <operator>moments_gray_plane</operator>
      <operator>opening</operator>
      <operator>points_harris</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>projective_trans_image</operator>
      <operator>projective_trans_point_2d</operator>
      <operator>scale_image</operator>
      <operator>scale_image_max</operator>
      <operator>sub_image</operator>
      <operator>tuple_gen_const</operator>
      <operator>tuple_sort_index</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>bottle.hdev</name>
      <desc>ビール瓶ラベルの数字の読み取り ( Read numbers on a beer bottle )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.food</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <method>method.blob</method>
      <operator>area_center</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>connection</operator>
      <operator>dev_set_shape</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>fill_up</operator>
      <operator>fill_up_shape</operator>
      <operator>intersection</operator>
      <operator>opening_circle</operator>
      <operator>opening_rectangle1</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>select_shape</operator>
      <operator>sort_region</operator>
      <operator>threshold</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>bottlet.hdev</name>
      <desc>ビール瓶ラベルの数字を読み取るためのトレーニング ( Train numbers on a beer bottle )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.food</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.error</method>
      <operator>append_ocr_trainf</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>delete_file</operator>
      <operator>dev_set_check</operator>
      <operator>dev_set_shape</operator>
      <operator>fill_up</operator>
      <operator>fill_up_shape</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_class_mlp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>bundle_adjusted_mosaicking.hdev</name>
      <desc>隣接画像との特徴点位置を考慮して複数画像を貼り合わせた1枚の大きなBGAのモザイク画像を生成 ( Use bundle-adjusted mosaicking to merge partial images of a BGA into one large image )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.tuple</method>
      <method>method.filter.points</method>
      <method>method.mosaic</method>
      <method>method.match.point</method>
      <method>method.visual</method>
      <operator>bundle_adjust_mosaic</operator>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>gen_bundle_adjusted_mosaic</operator>
      <operator>gen_image_const</operator>
      <operator>paint_region</operator>
      <operator>points_harris</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>tile_images_offset</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>calibrate_cameras.hdev</name>
      <desc>マルチビューステレオセットアップのキャリブレーション ( Calibrate a multi-view stereo setup )</desc>
      <path>hdevelop/Calibration/Multi-View/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <operator>calibrate_cameras</operator>
      <operator>clear_calib_data</operator>
      <operator>clear_camera_setup_model</operator>
      <operator>create_calib_data</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>get_calib_data</operator>
      <operator>get_camera_setup_param</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>set_camera_setup_param</operator>
      <operator>set_origin_pose</operator>
      <operator>write_camera_setup_model</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>calibrate_cameras_precision.hdev</name>
      <desc>カメラモデル 「分割モデル('division')」 と 「多項式モデル('polynomial')」 の比較 ( Compare the camera models 'division' and 'polynomial' )</desc>
      <path>hdevelop/Calibration/Multi-View/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <operator>calibrate_cameras</operator>
      <operator>clear_calib_data</operator>
      <operator>create_calib_data</operator>
      <operator>disp_caltab</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>get_calib_data</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>calibrate_sheet_of_light.hdev</name>
      <desc>光切断法による計測システムのキャリブレーション ( Calibrate a sheet-of-light measurement system )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.calib</method>
      <method>method.laser</method>
      <operator>apply_sheet_of_light_calibration</operator>
      <operator>calibrate_cameras</operator>
      <operator>clear_calib_data</operator>
      <operator>clear_sheet_of_light_model</operator>
      <operator>create_calib_data</operator>
      <operator>create_matrix</operator>
      <operator>create_sheet_of_light_model</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>get_calib_data</operator>
      <operator>get_sheet_of_light_result</operator>
      <operator>get_value_matrix</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>measure_profile_sheet_of_light</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>set_origin_pose</operator>
      <operator>set_sheet_of_light_param</operator>
      <operator>svd_matrix</operator>
      <operator>transpose_matrix</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>calibration_aimdpm_1_2006.hdev</name>
      <desc>2次元データコードの印刷品質を検査する前に行なう輝度補正の適用 ( Apply a reflectance calibration before inspecting the print quality of 2D data codes )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.acqu</method>
      <method>method.metrol</method>
      <method>method.calib.radiom</method>
      <method>method.geom</method>
      <method>method.tuple</method>
      <operator>clear_bar_code_model</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>close_measure</operator>
      <operator>continue</operator>
      <operator>create_bar_code_model</operator>
      <operator>erosion_rectangle1</operator>
      <operator>find_bar_code</operator>
      <operator>fwrite_string</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_bar_code_object</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>measure_pairs</operator>
      <operator>open_file</operator>
      <operator>open_framegrabber</operator>
      <operator>overpaint_region</operator>
      <operator>projection_pl</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>camera_calibration.hdev</name>
      <desc>特別なキャリブレーションプレートを用いたカメラパラメーターの算出 ( Determine camera parameters using a special calibration plate )</desc>
      <path>hdevelop/Calibration/Monocular/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.measure.2D</applarea>
      <method>method.calib</method>
      <method>method.io</method>
      <operator>disp_caltab</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>write_cam_par</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>camera_calibration_exterior.hdev</name>
      <desc>カメラキャリブレーションの結果を適用し定規上の位置を計測 ( Measure positions on a caliper rule using camera calibration )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.calib</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.tuple</method>
      <method>method.metrol</method>
      <method>method.roi</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.wcoord</method>
      <method>method.visual</method>
      <operator>affine_trans_point_3d</operator>
      <operator>break</operator>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>close_measure</operator>
      <operator>contour_to_world_plane_xld</operator>
      <operator>create_pose</operator>
      <operator>dev_close_inspect_ctrl</operator>
      <operator>disp_polygon</operator>
      <operator>distance_pp</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_region_polygon_filled</operator>
      <operator>get_contour_xld</operator>
      <operator>get_mbutton</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_rotate_local</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>hom_mat3d_translate_local</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>image_to_world_plane</operator>
      <operator>lines_gauss</operator>
      <operator>map_image</operator>
      <operator>measure_pairs</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>read_cam_par</operator>
      <operator>set_origin_pose</operator>
      <operator>smallest_rectangle2</operator>
      <operator>tuple_mean</operator>
      <operator>write_pose</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>camera_calibration_interior.hdev</name>
      <desc>カメラキャリブレーションを行い内部カメラパラメーターを保存 ( Calibrate and save interior camera parameters )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.visual</method>
      <operator>calibrate_cameras</operator>
      <operator>clear_calib_data</operator>
      <operator>create_calib_data</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>get_calib_data</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>write_cam_par</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>camera_calibration_multi_image.hdev</name>
      <desc>カメラキャリブレーションを行い定規の目盛りを計測 ( Calibrate the camera and measures positions on a caliper rule )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.calib</method>
      <method>method.visual</method>
      <method>method.metrol</method>
      <method>method.trafo.wcoord</method>
      <method>method.tuple</method>
      <operator>calibrate_cameras</operator>
      <operator>caltab_points</operator>
      <operator>clear_calib_data</operator>
      <operator>close_measure</operator>
      <operator>create_calib_data</operator>
      <operator>distance_pp</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_calib_data</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>measure_pairs</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>set_origin_pose</operator>
      <operator>tuple_deviation</operator>
      <operator>tuple_mean</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cancel_draw_result.hdev</name>
      <desc>drawオペレータキャンセル時のユーザー定義アクションの有効化 (Enable user-defined actions when a draw operation is canceled )</desc>
      <path>hdevelop/Graphics/Parameters/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.error</method>
      <method>method.visual</method>
      <operator>catch</operator>
      <operator>dev_set_preferences</operator>
      <operator>endtry</operator>
      <operator>get_system</operator>
      <operator>set_system</operator>
      <operator>throw</operator>
      <operator>try</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>cbm_bin_switch.hdev</name>
      <desc>コンポーネントベースマッチングを用いたスイッチの位置・状態検出 ( Locate a switch and test its state using component-based matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.comp</method>
      <method>method.visual</method>
      <method>method.functions</method>
      <operator>clear_component_model</operator>
      <operator>clear_training_components</operator>
      <operator>create_trained_component_model</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>difference</operator>
      <operator>disp_polygon</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_component_model</operator>
      <operator>get_component_model_tree</operator>
      <operator>get_component_relations</operator>
      <operator>get_found_component_model</operator>
      <operator>get_mposition</operator>
      <operator>get_training_components</operator>
      <operator>if</operator>
      <operator>modify_component_relations</operator>
      <operator>train_model_components</operator>
      <operator>wait_seconds</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_caliper.hdev</name>
      <desc>コンポーネントベースマッチングを用いた透視歪を含んだ画像中のキャリパーの状態の計測 ( Measure the setting of a caliper using component-based matching in a perspectively distorted image )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.match.comp</method>
      <method>method.visual</method>
      <method>method.calib</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.wcoord</method>
      <method>method.functions</method>
      <operator>affine_trans_point_3d</operator>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>clear_component_model</operator>
      <operator>clear_training_components</operator>
      <operator>create_trained_component_model</operator>
      <operator>dev_set_window_extents</operator>
      <operator>disp_circle</operator>
      <operator>find_caltab</operator>
      <operator>find_component_model</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>get_component_model_params</operator>
      <operator>get_component_model_tree</operator>
      <operator>get_component_relations</operator>
      <operator>get_found_component_model</operator>
      <operator>get_mposition</operator>
      <operator>get_shape_model_contours</operator>
      <operator>get_training_components</operator>
      <operator>if</operator>
      <operator>insert</operator>
      <operator>map_image</operator>
      <operator>modify_component_relations</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>read_image</operator>
      <operator>set_origin_pose</operator>
      <operator>train_model_components</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_dip_switch.hdev</name>
      <desc>コンポーネントベースマッチングを用いたディップスイッチの位置および状態の検査 ( Locate dip switches and test their state using component-based matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.electr</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.comp</method>
      <method>method.error</method>
      <method>method.functions</method>
      <method>method.visual</method>
      <operator>affine_trans_point_2d</operator>
      <operator>clear_component_model</operator>
      <operator>clear_training_components</operator>
      <operator>create_trained_component_model</operator>
      <operator>find_component_model</operator>
      <operator>gen_region_points</operator>
      <operator>get_component_model_tree</operator>
      <operator>get_component_relations</operator>
      <operator>get_found_component_model</operator>
      <operator>get_mposition</operator>
      <operator>get_training_components</operator>
      <operator>insert</operator>
      <operator>modify_component_relations</operator>
      <operator>read_image</operator>
      <operator>read_training_components</operator>
      <operator>train_model_components</operator>
      <operator>wait_seconds</operator>
      <operator>write_training_components</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_label_simple.hdev</name>
      <desc>コンポーネントベースマッチング手法によるラベルの位置決め ( Locate a label using component-based matching )</desc>
      <path>hdevelop/Matching/Component-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.comp</method>
      <operator>clear_component_model</operator>
      <operator>clear_training_components</operator>
      <operator>close_framegrabber</operator>
      <operator>create_trained_component_model</operator>
      <operator>find_component_model</operator>
      <operator>gen_initial_components</operator>
      <operator>get_found_component_model</operator>
      <operator>get_system</operator>
      <operator>grab_image</operator>
      <operator>modify_component_relations</operator>
      <operator>open_framegrabber</operator>
      <operator>set_system</operator>
      <operator>train_model_components</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_modules_simple.hdev</name>
      <desc>コンポーネントベースマッチング手法を用いたボード上のモジュール位置決め ( Locate modules on a board using component-based matching )</desc>
      <path>hdevelop/Matching/Component-Based/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.match.comp</method>
      <method>method.visual</method>
      <operator>clear_component_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_component_model</operator>
      <operator>find_component_model</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_found_component_model</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_param_visual.hdev</name>
      <desc>コンポーネントベースマッチングのパラメーター解析 ( Analyze the parameters of component-based matching )</desc>
      <path>hdevelop/Matching/Component-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.comp</method>
      <method>method.visual</method>
      <method>method.error</method>
      <operator>clear_component_model</operator>
      <operator>clear_training_components</operator>
      <operator>close_framegrabber</operator>
      <operator>create_trained_component_model</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>find_component_model</operator>
      <operator>gen_initial_components</operator>
      <operator>get_component_model_tree</operator>
      <operator>get_component_relations</operator>
      <operator>get_found_component_model</operator>
      <operator>get_system</operator>
      <operator>get_training_components</operator>
      <operator>grab_image</operator>
      <operator>inspect_clustered_components</operator>
      <operator>modify_component_relations</operator>
      <operator>open_framegrabber</operator>
      <operator>read_training_components</operator>
      <operator>set_system</operator>
      <operator>train_model_components</operator>
      <operator>write_training_components</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_pipe_wrench.hdev</name>
      <desc>2つの構成要素から成るパイプレンチの位置検出 ( Locate a pipe wrench that consists of two components )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.comp</method>
      <method>method.visual</method>
      <method>method.tuple</method>
      <method>method.numeric</method>
      <method>method.functions</method>
      <operator>affine_trans_point_2d</operator>
      <operator>clear_component_model</operator>
      <operator>clear_training_components</operator>
      <operator>create_trained_component_model</operator>
      <operator>find_component_model</operator>
      <operator>gen_circle</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_component_model_tree</operator>
      <operator>get_component_relations</operator>
      <operator>get_found_component_model</operator>
      <operator>get_mbutton</operator>
      <operator>get_mposition</operator>
      <operator>get_training_components</operator>
      <operator>read_image</operator>
      <operator>train_model_components</operator>
      <operator>vector_angle_to_rigid</operator>
      <operator>wait_seconds</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_pipe_wrench_simple.hdev</name>
      <desc>コンポーネントベースマッチング手法を用いた複合物の位置決め ( Locate compound objects using component-based matching )</desc>
      <path>hdevelop/Matching/Component-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.comp</method>
      <operator>clear_component_model</operator>
      <operator>clear_training_components</operator>
      <operator>close_framegrabber</operator>
      <operator>create_trained_component_model</operator>
      <operator>find_component_model</operator>
      <operator>get_found_component_model</operator>
      <operator>get_training_components</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>train_model_components</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cbm_sbm.hdev</name>
      <desc>コンポーネントベースマッチング手法と通常の形状ベースマッチング手法の比較 ( Compare component-based matching to shape-based matching )</desc>
      <path>hdevelop/Matching/Component-Based/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.comp</method>
      <method>method.visual</method>
      <operator>affine_trans_region</operator>
      <operator>clear_component_model</operator>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_component_model</operator>
      <operator>create_shape_model</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>find_component_model</operator>
      <operator>find_shape_models</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_found_component_model</operator>
      <operator>get_mbutton</operator>
      <operator>get_mposition</operator>
      <operator>grab_image</operator>
      <operator>inspect_shape_model</operator>
      <operator>open_framegrabber</operator>
      <operator>query_all_colors</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>cfa_to_rgb.hdev</name>
      <desc>ベイヤー画像（カラーフィルタアレイ）をRGB画像に変換 ( Convert a Bayer image (color filter array) into an RGB image )</desc>
      <path>hdevelop/Filters/Color/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <method>method.color</method>
      <operator>cfa_to_rgb</operator>
      <operator>decompose3</operator>
      <operator>gen_checker_region</operator>
      <operator>gen_grid_region</operator>
      <operator>gen_image_const</operator>
      <operator>move_region</operator>
      <operator>paint_gray</operator>
      <operator>sub_image</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>change_radial_distortion_contours_xld.hdev</name>
      <desc>抽出したXLDの放射歪みを補正 ( Eliminate radial distortions from extracted contours )</desc>
      <path>hdevelop/Calibration/Rectification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.trafo.rectif</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_contours_xld</operator>
      <operator>edges_sub_pix</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>change_radial_distortion_image.hdev</name>
      <desc>画像の放射歪みを補正 ( Eliminate radial distortions from an image )</desc>
      <path>hdevelop/Calibration/Rectification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.trafo.rectif</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>change_radial_distortion_points.hdev</name>
      <desc>放射歪みを持つ画像の補正 ( Correct a radially distorted image )</desc>
      <path>hdevelop/Calibration/Rectification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.trafo.rectif</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>change_radial_distortion_points</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>char_threshold.hdev</name>
      <desc>文字領域の抽出のためのしきい値処理 ( Perform a threshold segmentation for character extraction )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.segm</method>
      <operator>char_threshold</operator>
      <operator>gen_region_histo</operator>
      <operator>gray_histo</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>check_blister.hdev</name>
      <desc>自動的につめられた錠剤の内容検査 ( Check content of automatically filled blisters )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.pharm</industry>
      <industry>industry.pack</industry>
      <applarea>applarea.alignment</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.feat</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_region</operator>
      <operator>area_center</operator>
      <operator>closing_rectangle1</operator>
      <operator>difference</operator>
      <operator>min_max_gray</operator>
      <operator>orientation_region</operator>
      <operator>select_shape</operator>
      <operator>shape_trans</operator>
      <operator>var_threshold</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>check_blister_mixed.hdev</name>
      <desc>手動でつめられた錠剤の内容検査 ( Check content of manually filled blisters )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.pharm</industry>
      <industry>industry.pack</industry>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.classif</method>
      <operator>add_samples_image_class_gmm</operator>
      <operator>classify_image_class_gmm</operator>
      <operator>clear_class_gmm</operator>
      <operator>create_class_gmm</operator>
      <operator>hysteresis_threshold</operator>
      <operator>invert_image</operator>
      <operator>train_class_gmm</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>check_bottle_crate.hdev</name>
      <desc>瓶箱につめられた瓶の本数カウント ( Count bottles contained in crates )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.food</industry>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>difference</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>check_difference.hdev</name>
      <desc>ピクセル単位での2枚の画像間の比較 ( Compare two images pixel by pixel )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.segm</method>
      <operator>add_noise_white</operator>
      <operator>affine_trans_image</operator>
      <operator>check_difference</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>scale_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>check_fish_stick_dimension.hdev</name>
      <desc>魚の切り身の計測 ( Measure the size of raw fish sticks )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.food</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.segm</method>
      <operator>select_shape</operator>
      <operator>select_shape_proto</operator>
      <operator>tuple_find</operator>
      <operator>tuple_remove</operator>
      <operator>write_string</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>check_hazelnut_wafers.hdev</name>
      <desc>ヘーゼルナッツウエハースの品質検査 ( Inspect quality of hazelnut wafers )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.food</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.feat</method>
      <operator>area_holes</operator>
      <operator>bin_threshold</operator>
      <operator>rectangularity</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>check_smd_tilt.hdev</name>
      <desc>SMD部品の傾き検査 ( Check if SMDs are tilted )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.metrol</method>
      <method>method.funct1d</method>
      <operator>create_funct_1d_pairs</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>measure_projection</operator>
      <operator>num_points_funct_1d</operator>
      <operator>var_threshold</operator>
      <operator>x_range_funct_1d</operator>
      <operator>y_range_funct_1d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>check_soft_cheese.hdev</name>
      <desc>ソフトチーズパッケージの内容検査 ( Check content of soft cheese packages )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.food</industry>
      <industry>industry.pack</industry>
      <applarea>applarea.inspect.complete</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.shape</method>
      <method>method.geom</method>
      <method>method.tuple</method>
      <operator>angle_lx</operator>
      <operator>clear_shape_model</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_models</operator>
      <operator>gen_region_polygon_filled</operator>
      <operator>get_shape_model_contours</operator>
      <operator>rgb1_to_gray</operator>
      <operator>tuple_remove</operator>
      <operator>tuple_sort_index</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>circles.hdev</name>
      <desc>曲線状のXLDセグメントへの円フィッティング ( Fit circles into curved contour segments )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.machine</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.blob</method>
      <method>method.visual</method>
      <operator>boundary</operator>
      <operator>clip_region_rel</operator>
      <operator>dilation_circle</operator>
      <operator>edges_sub_pix</operator>
      <operator>fast_threshold</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>reduce_domain</operator>
      <operator>segment_contours_xld</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>circular_barcode.hdev</name>
      <desc>CDに円弧状に印刷されているバーコードの読み取り ( Read a circular bar code printed on a CD )</desc>
      <path>hdevelop/Applications/Bar-Codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.visual</method>
      <method>method.feat</method>
      <method>method.regionproc</method>
      <method>method.trafo.geom</method>
      <method>method.barcode</method>
      <method>method.morphol</method>
      <operator>bin_threshold</operator>
      <operator>clear_bar_code_model</operator>
      <operator>complement</operator>
      <operator>connection</operator>
      <operator>create_bar_code_model</operator>
      <operator>dev_display</operator>
      <operator>dev_set_window_extents</operator>
      <operator>find_bar_code</operator>
      <operator>invert_image</operator>
      <operator>polar_trans_image_ext</operator>
      <operator>polar_trans_region_inv</operator>
      <operator>select_shape</operator>
      <operator>set_bar_code_param</operator>
      <operator>shape_trans</operator>
      <operator>smallest_circle</operator>
      <operator>zoom_image_factor</operator>
      <operator>zoom_region</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>circularity.hdev</name>
      <desc>領域の真円度にかんする形状特徴量を算出 ( Calculate the circularity of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>circularity</operator>
      <operator>select_shape</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>class_2dim_sup.hdev</name>
      <desc>2次元のピクセルクラス化手法によるカラー画像の分類 ( Segment a color image using two-dimensional pixel classification )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.blob</method>
      <operator>class_2dim_sup</operator>
      <operator>closing_circle</operator>
      <operator>decompose3</operator>
      <operator>draw_region</operator>
      <operator>histo_2dim</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>class_2dim_unsup.hdev</name>
      <desc>クラスタリングによるカラー画像の分類 ( Segment a color image by clustering )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <operator>class_2dim_unsup</operator>
      <operator>decompose3</operator>
      <operator>median_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>class_ndim_box.hdev</name>
      <desc>Hyper-Cuboidによるピクセルのクラス化 ( Classify pixels using hyper-cuboids )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.blob</method>
      <operator>class_ndim_box</operator>
      <operator>close_class_box</operator>
      <operator>create_class_box</operator>
      <operator>learn_ndim_box</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>class_ndim_norm.hdev</name>
      <desc>Hyper Sphereを用いたピクセルの分類 ( Classify pixels using hyper-spheres )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.blob</method>
      <operator>class_ndim_norm</operator>
      <operator>gen_empty_region</operator>
      <operator>learn_ndim_norm</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>class_overlap.hdev</name>
      <desc>ニューラルネット(MLP)を用いた2次元データの分類 ( Use an MLP for classifying two-dimensional data )</desc>
      <path>hdevelop/Classification/Neural-Nets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.visual</method>
      <method>method.classif</method>
      <operator>add_noise_white</operator>
      <operator>add_sample_class_mlp</operator>
      <operator>classify_class_mlp</operator>
      <operator>clear_class_mlp</operator>
      <operator>compose3</operator>
      <operator>create_class_mlp</operator>
      <operator>evaluate_class_mlp</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_image_const</operator>
      <operator>get_region_points</operator>
      <operator>get_sample_num_class_mlp</operator>
      <operator>intersection</operator>
      <operator>label_to_region</operator>
      <operator>set_grayval</operator>
      <operator>train_class_mlp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>class_overlap_gmm.hdev</name>
      <desc>ガウス混合分布(GMM)を用いた2次元データの分類 ( Use an GMM for classifying two-dimensional data )</desc>
      <path>hdevelop/Classification/Gaussian-Mixture-Models/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.visual</method>
      <method>method.classif</method>
      <operator>add_noise_white</operator>
      <operator>add_sample_class_gmm</operator>
      <operator>classify_class_gmm</operator>
      <operator>clear_class_gmm</operator>
      <operator>compose3</operator>
      <operator>create_class_gmm</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_image_const</operator>
      <operator>get_region_points</operator>
      <operator>get_sample_num_class_gmm</operator>
      <operator>intersection</operator>
      <operator>label_to_region</operator>
      <operator>set_grayval</operator>
      <operator>train_class_gmm</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>class_overlap_svm.hdev</name>
      <desc>サポートベクターマシーン(SVM)を用いた2次元データの分類 ( Use an SVM for classifying two-dimensional data )</desc>
      <path>hdevelop/Classification/Support-Vector-Machines/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.visual</method>
      <method>method.classif</method>
      <operator>add_noise_white</operator>
      <operator>add_sample_class_svm</operator>
      <operator>classify_class_svm</operator>
      <operator>clear_class_svm</operator>
      <operator>create_class_svm</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_image_const</operator>
      <operator>get_region_points</operator>
      <operator>get_sample_num_class_svm</operator>
      <operator>intersection</operator>
      <operator>label_to_region</operator>
      <operator>set_grayval</operator>
      <operator>train_class_svm</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>classify_characters_ocr.hdev</name>
      <desc>トレーニングしたフォントの文字認識 ( Read the characters of a previously trained font )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.blob</method>
      <method>method.ocr</method>
      <method>method.classif</method>
      <operator>clear_ocr_class_svm</operator>
      <operator>do_ocr_multi_class_svm</operator>
      <operator>file_exists</operator>
      <operator>read_ocr_class_svm</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>classify_citrus_fruits.hdev</name>
      <desc>ガウス混合分布モデル（GMM）分類法による色情報学習でのオレンジとレモンの分類 ( Distinguish oranges and lemons using GMM-based classification )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.classif</method>
      <method>method.feat</method>
      <method>method.blob</method>
      <method>method.visual</method>
      <operator>add_sample_class_gmm</operator>
      <operator>classify_class_gmm</operator>
      <operator>clear_class_gmm</operator>
      <operator>create_class_gmm</operator>
      <operator>train_class_gmm</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>classify_fuses_gmm_based_lut.hdev</name>
      <desc>LUTによる高速分類機能を用いたカラーフューズの分類 ( Segment color fuses using a LUT classifier )</desc>
      <path>hdevelop/Applications/Color-Inspection/</path>
      <industry>industry.electr</industry>
      <industry>industry.synth</industry>
      <applarea>applarea.inspect.color</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <operator>classify_image_class_lut</operator>
      <operator>clear_class_gmm</operator>
      <operator>clear_class_lut</operator>
      <operator>create_class_gmm</operator>
      <operator>create_class_lut_gmm</operator>
      <operator>train_class_gmm</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>classify_halogen_bulbs.hdev</name>
      <desc>サポートベクターマシン（SVM）分類法によるハロゲンバルブの検査 ( Check halogen bulbs using SVM-based classification )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.classif</method>
      <method>method.feat</method>
      <operator>add_sample_class_svm</operator>
      <operator>classify_class_svm</operator>
      <operator>clear_class_svm</operator>
      <operator>create_class_svm</operator>
      <operator>list_files</operator>
      <operator>moments_region_central_invar</operator>
      <operator>train_class_svm</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>classify_image_class_gmm.hdev</name>
      <desc>GMMクラス化手法を用いたRGB画像の分類 ( Segment an RGB image with a GMM classifier )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.blob</method>
      <operator>add_samples_image_class_gmm</operator>
      <operator>classify_image_class_gmm</operator>
      <operator>clear_class_gmm</operator>
      <operator>clear_samples_class_gmm</operator>
      <operator>create_class_gmm</operator>
      <operator>gen_rectangle1</operator>
      <operator>gen_rectangle2</operator>
      <operator>region_to_mean</operator>
      <operator>train_class_gmm</operator>
      <operator>union1</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>classify_image_class_lut.hdev</name>
      <desc>LUTクラス化手法と従来のクラス化手法との実行時間の比較 ( Compare runtime needed for LUT classifiers and conventional classifiers )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <operator>add_samples_image_class_gmm</operator>
      <operator>add_samples_image_class_mlp</operator>
      <operator>add_samples_image_class_svm</operator>
      <operator>classify_image_class_gmm</operator>
      <operator>classify_image_class_lut</operator>
      <operator>classify_image_class_mlp</operator>
      <operator>classify_image_class_svm</operator>
      <operator>clear_class_gmm</operator>
      <operator>clear_class_lut</operator>
      <operator>clear_class_mlp</operator>
      <operator>clear_class_svm</operator>
      <operator>create_class_gmm</operator>
      <operator>create_class_lut_gmm</operator>
      <operator>create_class_lut_mlp</operator>
      <operator>create_class_lut_svm</operator>
      <operator>create_class_mlp</operator>
      <operator>create_class_svm</operator>
      <operator>train_class_gmm</operator>
      <operator>train_class_mlp</operator>
      <operator>train_class_svm</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>classify_image_class_mlp.hdev</name>
      <desc>MLPクラス分け手法を用いたRGB画像の分類 ( Segment an RGB image with an MLP classifier )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.blob</method>
      <operator>add_samples_image_class_mlp</operator>
      <operator>classify_image_class_mlp</operator>
      <operator>clear_class_mlp</operator>
      <operator>copy_obj</operator>
      <operator>create_class_mlp</operator>
      <operator>gen_rectangle1</operator>
      <operator>gen_rectangle2</operator>
      <operator>region_to_mean</operator>
      <operator>train_class_mlp</operator>
      <operator>union1</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>classify_image_class_svm.hdev</name>
      <desc>SVMクラス分け手法を用いたRGB画像の分類 ( Segment an RGB image with an SVM classifier )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.blob</method>
      <operator>add_samples_image_class_svm</operator>
      <operator>classify_image_class_svm</operator>
      <operator>clear_class_svm</operator>
      <operator>clear_samples_class_svm</operator>
      <operator>create_class_svm</operator>
      <operator>gen_rectangle1</operator>
      <operator>gen_rectangle2</operator>
      <operator>region_to_mean</operator>
      <operator>train_class_svm</operator>
      <operator>union1</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>classify_metal_parts.hdev</name>
      <desc>ニューラルネットワーク（MLP）分類法による金属部品の分類 ( Distinguish metal parts using MLP-based classification )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.blob</method>
      <method>method.classif</method>
      <operator>add_sample_class_mlp</operator>
      <operator>classify_class_mlp</operator>
      <operator>clear_class_mlp</operator>
      <operator>clear_samples_class_mlp</operator>
      <operator>create_class_mlp</operator>
      <operator>moments_region_central_invar</operator>
      <operator>roundness</operator>
      <operator>train_class_mlp</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>classify_metal_parts_ocr.hdev</name>
      <desc>ニューラルネットワーク（MLP）分類法を用いたOCRオペレーターによる金属部品の分類 ( Distinguish metal parts using MLP-based OCR classification )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.ident.ocr</applarea>
      <applarea>applarea.ident.ocr</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.blob</method>
      <method>method.classif</method>
      <operator>append_ocr_trainf</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>do_ocr_single_class_mlp</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_trainf</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>classify_wood.hdev</name>
      <desc>テクスチャによる木材の分類 ( Classify different kinds of wood according to their surface texture )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.wood</industry>
      <applarea>applarea.inspect.texture</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.classif</method>
      <method>method.texture</method>
      <method>method.tuple</method>
      <operator>add_sample_class_mlp</operator>
      <operator>classify_class_mlp</operator>
      <operator>clear_class_mlp</operator>
      <operator>cooc_feature_image</operator>
      <operator>create_class_mlp</operator>
      <operator>entropy_gray</operator>
      <operator>file_exists</operator>
      <operator>gray_histo_abs</operator>
      <operator>list_files</operator>
      <operator>read_class_mlp</operator>
      <operator>sobel_amp</operator>
      <operator>train_class_mlp</operator>
      <operator>write_class_mlp</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>clip.hdev</name>
      <desc>クリップの位置および向きの測定 ( Determine the position and orientation of clips )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.blob</method>
      <method>method.visual</method>
      <operator>area_center</operator>
      <operator>bin_threshold</operator>
      <operator>dev_display</operator>
      <operator>dev_set_color</operator>
      <operator>dev_set_draw</operator>
      <operator>dev_set_line_width</operator>
      <operator>dev_update_window</operator>
      <operator>disp_arrow</operator>
      <operator>for</operator>
      <operator>orientation_region</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>clip_contours_xld.hdev</name>
      <desc>XLDの部分切り取り ( Clip an XLD contour )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>clip_contours_xld</operator>
      <operator>dev_close_window</operator>
      <operator>dev_open_window</operator>
      <operator>dev_set_part</operator>
      <operator>disp_arrow</operator>
      <operator>lines_gauss</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>clip_end_points_contours_xld.hdev</name>
      <desc>clip_end_points_contours_xldの2つのモードの使用方法 ( Demonstrate how to use the two modes of clip_end_points_contours_xld )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>clip_end_points_contours_xld</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>clip_region.hdev</name>
      <desc>領域を四角形に切り取り ( Clip regions to rectangles )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>clip_region</operator>
      <operator>get_system</operator>
      <operator>set_system</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>clip_region_rel.hdev</name>
      <desc>指定したサイズの矩形を領域から切り取り ( Clip regions to rectangles relative to their size )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>clip_region_rel</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>close_contour_gaps.hdev</name>
      <desc>輪郭線の直線成分間の隙間を埋めて結合 ( Close gaps in extracted straight contours )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.metrol</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>dev_set_color</operator>
      <operator>edges_sub_pix</operator>
      <operator>mean_image</operator>
      <operator>paint_gray</operator>
      <operator>rectangle1_domain</operator>
      <operator>region_to_bin</operator>
      <operator>regress_contours_xld</operator>
      <operator>segment_contours_xld</operator>
      <operator>sort_contours_xld</operator>
      <operator>union_collinear_contours_xld</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>close_contours_xld.hdev</name>
      <desc>XLDの閉処理 ( Close XLD contours )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>close_contours_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>select_contours_xld</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>close_edges.hdev</name>
      <desc>エッジ強度の画像を使ってエッジの隙間を埋める ( Close edge gaps using the edge amplitude image )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <method>method.regionproc</method>
      <operator>close_edges</operator>
      <operator>sobel_amp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>close_edgeslength.hdev</name>
      <desc>エッジ強度の画像を使ってエッジの隙間を埋める ( Close edge gaps using the edge amplitude image )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <method>method.regionproc</method>
      <operator>close_edges_length</operator>
      <operator>sobel_amp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>closest_point_transform.hdev</name>
      <desc>領域の最近傍点変換変換の計算 ( Compute the closest-point transform of a region. )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <method>method.regionproc</method>
      <operator>closest_point_transform</operator>
      <operator>gen_circle</operator>
      <operator>set_paint</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>codabar.hdev</name>
      <desc>バーコード Codabarの読取 ( Read a bar code of type Codabar )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_tposition</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>code128.hdev</name>
      <desc>バーコード Code128の読取 ( Read a bar code of type Code 128 )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>create_bar_code_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_result</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>6.0.1</newinversion>
   </example>
   <example>
      <name>code39.hdev</name>
      <desc>バーコード Code39の読取 ( Read a bar code of type Code 39 )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_object</operator>
      <operator>get_bar_code_result</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>coherence_enhancing_diff.hdev</name>
      <desc>指紋の強調 ( Enhance fingerprint image )</desc>
      <path>hdevelop/Filters/Enhancement/</path>
      <industry>industry.secure</industry>
      <applarea>applarea.security</applarea>
      <method>method.filter.general</method>
      <operator>coherence_enhancing_diff</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>color_fuses.hdev</name>
      <desc>フューズを色で分類 ( Sort fuses by color )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.auto</industry>
      <industry>industry.electr</industry>
      <applarea>applarea.inspect.color</applarea>
      <method>method.color</method>
      <method>method.blob</method>
      <operator>decompose3</operator>
      <operator>trans_from_rgb</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>color_fuses_lut_trans.hdev</name>
      <desc>色空間変換を用いたフューズの分類 ( Classify fuses using color-space transformation )</desc>
      <path>hdevelop/Applications/Color-Inspection/</path>
      <industry>industry.electr</industry>
      <industry>industry.synth</industry>
      <applarea>applarea.inspect.color</applarea>
      <method>method.color</method>
      <method>method.blob</method>
      <operator>apply_color_trans_lut</operator>
      <operator>create_color_trans_lut</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>color_pieces.hdev</name>
      <desc>ニューラルネットワーク（MLP）を用いて画像を色情報で分類 ( Check for completeness of colored game pieces using MLP classification )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.color</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.color</method>
      <method>method.blob</method>
      <method>method.classif</method>
      <operator>add_samples_image_class_mlp</operator>
      <operator>classify_image_class_mlp</operator>
      <operator>compose3</operator>
      <operator>copy_obj</operator>
      <operator>create_class_mlp</operator>
      <operator>draw_rectangle1</operator>
      <operator>rgb1_to_gray</operator>
      <operator>train_class_mlp</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>color_pieces_euclid.hdev</name>
      <desc>ユークリッド分類法を用いて画像を色情報で分類 ( Check for completeness of game color pieces using Euclidean classification )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.color</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.color</method>
      <method>method.blob</method>
      <method>method.classif</method>
      <operator>class_ndim_norm</operator>
      <operator>compose3</operator>
      <operator>draw_rectangle1</operator>
      <operator>gen_empty_region</operator>
      <operator>learn_ndim_norm</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>color_segmentation_pizza.hdev</name>
      <desc>カラー画像処理によるピザの上のサラミの検出 ( Find salami pieces on pizza based on color image processing )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.color</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>closing_circle</operator>
      <operator>connection</operator>
      <operator>decompose3</operator>
      <operator>opening_circle</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape</operator>
      <operator>select_shape_std</operator>
      <operator>shape_trans</operator>
      <operator>threshold</operator>
      <operator>trans_from_rgb</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>color_simple.hdev</name>
      <desc>HSVカラー空間で画像を各色の領域に分割 ( Segment color image in HSV color space )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.inspect.color</applarea>
      <method>method.color</method>
      <method>method.blob</method>
      <operator>closing_circle</operator>
      <operator>decompose3</operator>
      <operator>read_image</operator>
      <operator>select_shape_std</operator>
      <operator>trans_from_rgb</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>color_trans_lut.hdev</name>
      <desc>Compare the run time of color space transformations with or without a LUT</desc>
      <path>hdevelop/Filters/Color/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <operator>apply_color_trans_lut</operator>
      <operator>clear_color_trans_lut</operator>
      <operator>count_seconds</operator>
      <operator>create_color_trans_lut</operator>
      <operator>get_param_info</operator>
      <operator>trans_from_rgb</operator>
      <operator>trans_to_rgb</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>comment.hdev</name>
      <desc>コメントの使用方法 ( Use comments and verbatim code export )</desc>
      <path>hdevelop/Control/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <operator>comment</operator>
      <operator>stop</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>compactness.hdev</name>
      <desc>領域のコンパクト性に関する形状特徴を算出 ( Calculate the compactness of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>compactness</operator>
      <operator>regiongrowing</operator>
      <operator>select_shape</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>compare.hdev</name>
      <desc>スカラ tuple 文字列の比較の実行 ( Perform comparisons on scalars, tuples and strings)</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <method>method.functions</method>
      <method>method.tuple</method>
      <method>method.string</method>
      <operator>assign</operator>
   </example>
   <example>
      <name>compare_calibration_models.hdev</name>
      <desc>異なるカメラモデルにおけるカメラキャリブレーション結果の比較 ( Compare the results of camera calibration with different camera models )</desc>
      <path>hdevelop/Calibration/Monocular/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <operator>caltab_points</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>compare_ocr_svm_mlp.hdev</name>
      <desc>SVM MLP OCRの認識率、トレーニングと分類速度の比較 ( Compare the recognition rates and the training and classification speeds of the SVM and MLP OCR classifiers )</desc>
      <path>hdevelop/OCR/Support-Vector-Machines/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.classif</method>
      <operator>add_image</operator>
      <operator>add_noise_white</operator>
      <operator>affine_trans_image</operator>
      <operator>append_ocr_trainf</operator>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>clear_ocr_class_svm</operator>
      <operator>count_seconds</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>create_ocr_class_svm</operator>
      <operator>delete_file</operator>
      <operator>do_ocr_single_class_mlp</operator>
      <operator>do_ocr_single_class_svm</operator>
      <operator>expand_domain_gray</operator>
      <operator>file_exists</operator>
      <operator>full_domain</operator>
      <operator>gen_image_proto</operator>
      <operator>get_support_vector_num_ocr_class_svm</operator>
      <operator>gray_dilation_shape</operator>
      <operator>gray_erosion_shape</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>intersection</operator>
      <operator>read_ocr_trainf</operator>
      <operator>read_ocr_trainf_names</operator>
      <operator>reduce_ocr_class_svm</operator>
      <operator>rotate_image</operator>
      <operator>scale_image</operator>
      <operator>smooth_image</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>trainf_ocr_class_svm</operator>
      <operator>write_ocr_trainf</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>compose_funct_1d.hdev</name>
      <desc>二つの1D関数を組み合わせる ( Compose two 1D functions and compare the result with the analytical composition result )</desc>
      <path>hdevelop/Tools/Function/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.numeric</method>
      <method>method.funct1d</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>compose_funct_1d</operator>
      <operator>create_funct_1d_pairs</operator>
      <operator>funct_1d_to_pairs</operator>
      <operator>get_window_extents</operator>
      <operator>x_range_funct_1d</operator>
      <operator>y_range_funct_1d</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>composite_print_quality_isoiec15416.hdev</name>
      <desc>コンポジットバーコード (isoiec15416)の印刷品質の検査 ( Inspect the print quality of composite bar codes (isoiec15416) )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.print</applarea>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <method>method.visual</method>
      <method>method.filter.general</method>
      <operator>add_image</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_result</operator>
      <operator>gray_dilation_shape</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>compute_devices.hdev</name>
      <desc>HALCONと演算デバイスの使い方のデモ ( Demonstrate how to use compute devices with HALCON )</desc>
      <path>hdevelop/System/Compute-Devices/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.opsys</method>
      <method>method.trafo.geom</method>
      <operator>activate_compute_device</operator>
      <operator>deactivate_compute_device</operator>
      <operator>get_compute_device_info</operator>
      <operator>init_compute_device</operator>
      <operator>open_compute_device</operator>
      <operator>query_available_compute_devices</operator>
      <operator>set_compute_device_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>connect_and_holes.hdev</name>
      <desc>領域の連結成分とホールの数を算出 ( Calculate the number of connected components and holes of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>complement</operator>
      <operator>connect_and_holes</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>connection.hdev</name>
      <desc>ラベリングされた領域の計算 ( Calculate connected components of regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.feat</method>
      <operator>connection</operator>
      <operator>fill_up</operator>
      <operator>threshold</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>contlength.hdev</name>
      <desc>領域の周囲長(contlength)を計算 ( Calculate the contour length of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>contlength</operator>
      <operator>regiongrowing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>convert_map_type.hdev</name>
      <desc>マップタイプの変換 ( Convert a map type )</desc>
      <path>hdevelop/Filters/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <operator>convert_map_type</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>convexity.hdev</name>
      <desc>領域の凸面度を計算 ( Calculate the convexity of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>convexity</operator>
      <operator>regiongrowing</operator>
      <operator>shape_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>cooc_feature_image.hdev</name>
      <desc>共起行列に基づくテクスチャの特徴量を算出 ( Calculate texture features that are based on a co-occurence matrix )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.feat</method>
      <method>method.texture</method>
      <operator>cooc_feature_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>cooc_feature_matrix.hdev</name>
      <desc>共起行列を算出しテクスチャの特徴を取得 ( Calculate a co-occurence matrix and derive texture features )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.feat</method>
      <method>method.texture</method>
      <operator>cooc_feature_matrix</operator>
      <operator>dev_set_lut</operator>
      <operator>gen_cooc_matrix</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>corner_response.hdev</name>
      <desc>画像からコーナーを抽出 ( Extract corners from images )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.filter.points</method>
      <operator>corner_response</operator>
      <operator>sobel_amp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>correct_measure_direction.hdev</name>
      <desc>計測領域の傾きの自動補正 ( Automatically correct the orientation of a measure object )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.alignment</applarea>
      <method>method.metrol</method>
      <method>method.visual</method>
      <operator>close_measure</operator>
      <operator>draw_rectangle2_mod</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_contour_angle_xld</operator>
      <operator>measure_pairs</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>count_fish_sticks.hdev</name>
      <desc>箱詰めされた魚のフライの内容検査 ( Perform a completeness check for fish sticks )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.food</industry>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.funct1d</method>
      <method>method.metrol</method>
      <operator>create_funct_1d_array</operator>
      <operator>funct_1d_to_pairs</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_image_size</operator>
      <operator>local_min_max_funct_1d</operator>
      <operator>measure_projection</operator>
      <operator>num_points_funct_1d</operator>
      <operator>x_range_funct_1d</operator>
      <operator>y_range_funct_1d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>count_pellets.hdev</name>
      <desc>モフォロジ処理を用いて錠剤をカウント ( Detect pellets with morphology )</desc>
      <path>hdevelop/Morphology/Region/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.regionproc</method>
      <operator>bin_threshold</operator>
      <operator>dilation_circle</operator>
      <operator>erosion_circle</operator>
      <operator>fill_up_shape</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>create_average_shape_model.hdev</name>
      <desc>平均画像から形状ベースモデルを生成 ( Create a shape model from an average image )</desc>
      <path>hdevelop/Matching/Shape-Based/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.trafo.geom</method>
      <method>method.image</method>
      <operator>channels_to_image</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>find_scaled_shape_model</operator>
      <operator>mean_n</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>create_local_deformable_model_xld.hdev</name>
      <desc>XLDエッジ情報から局所変形モデルを生成 ( Create a local deformable model from XLD contours )</desc>
      <path>hdevelop/Matching/Deformable/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.deform</method>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.morphol</method>
      <method>method.segm</method>
      <method>method.trafo.geom</method>
      <method>method.xld</method>
      <method>method.typeconv.ico</method>
      <operator>create_local_deformable_model_xld</operator>
      <operator>find_local_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>set_local_deformable_model_metric</operator>
      <operator>unwarp_image_vector_field</operator>
      <operator>vector_field_length</operator>
      <operator>vector_field_to_real</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>create_model_green_dot.hdev</name>
      <desc>スケール変化を考慮した形状ベースマッチングのモデル生成 ( Create a model for shape-based matching with scaling )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <operator>clear_shape_model</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>inspect_shape_model</operator>
      <operator>write_shape_model</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>create_planar_calib_deformable_model_xld.hdev</name>
      <desc>CAD(DXF)ファイルから読み込んだエッジ情報から可変形状ベース透視歪モデル(キャリブレーション適用)を生成 ( Create a calibrated perspective, deformable model with contours from a DXF file )</desc>
      <path>hdevelop/Matching/Deformable/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.match.deform</method>
      <method>method.trafo.wcoord</method>
      <method>method.poseestim</method>
      <method>method.xld</method>
      <operator>clear_deformable_model</operator>
      <operator>create_planar_calib_deformable_model_xld</operator>
      <operator>find_planar_calib_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>read_contour_xld_dxf</operator>
      <operator>set_deformable_model_origin</operator>
      <operator>set_planar_calib_deformable_model_metric</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>create_planar_uncalib_deformable_model_xld.hdev</name>
      <desc>CAD(DXF)ファイルから読み込んだエッジ情報から可変形状ベース透視歪モデル(キャリブレーションなし)を生成 ( Create an uncalibrated perspective, deformable model with contours from a DXF file )</desc>
      <path>hdevelop/Matching/Deformable/</path>
      <industry>industry.auto</industry>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.deform</method>
      <operator>clear_deformable_model</operator>
      <operator>create_planar_uncalib_deformable_model_xld</operator>
      <operator>find_planar_uncalib_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>get_deformable_model_params</operator>
      <operator>projective_trans_contour_xld</operator>
      <operator>read_contour_xld_dxf</operator>
      <operator>set_planar_uncalib_deformable_model_metric</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>create_roi_via_vision.hdev</name>
      <desc>ブロブ処理で抽出したROIを用いて形状ベースマッチングのモデルを生成 ( Create a shape model ROI via blob processing )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.roi</method>
      <method>method.morphol</method>
      <method>method.match.shape</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>connection</operator>
      <operator>create_shape_model</operator>
      <operator>dilation_circle</operator>
      <operator>fill_up</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>grab_image</operator>
      <operator>inspect_shape_model</operator>
      <operator>open_framegrabber</operator>
      <operator>reduce_domain</operator>
      <operator>threshold</operator>
      <operator>union1</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>create_shape_model_3d_ignore_part_polarity.hdev</name>
      <desc>Speed-up the shape-based 3D matching on a textured background</desc>
      <path>hdevelop/3D-Matching/Shape-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object3d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.match3d.shape</method>
      <method>method.poseestim</method>
      <operator>clear_object_model_3d</operator>
      <operator>clear_shape_model_3d</operator>
      <operator>create_shape_model_3d</operator>
      <operator>find_shape_model_3d</operator>
      <operator>prepare_object_model_3d</operator>
      <operator>project_shape_model_3d</operator>
      <operator>read_object_model_3d</operator>
      <operator>read_shape_model_3d</operator>
      <operator>write_shape_model_3d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>create_shape_model_3d_lowest_model_level.hdev</name>
      <desc>3D形状モデルに必要なメモリの削減 ( Reduce the memory needed for a 3D shape model )</desc>
      <path>hdevelop/3D-Matching/Shape-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object3d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.match3d.shape</method>
      <method>method.poseestim</method>
      <method>method.trafo.geom</method>
      <operator>clear_object_model_3d</operator>
      <operator>clear_shape_model_3d</operator>
      <operator>create_shape_model_3d</operator>
      <operator>find_shape_model_3d</operator>
      <operator>get_shape_model_3d_params</operator>
      <operator>prepare_object_model_3d</operator>
      <operator>project_shape_model_3d</operator>
      <operator>read_object_model_3d</operator>
      <operator>read_shape_model_3d</operator>
      <operator>write_shape_model_3d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>create_shape_model_xld.hdev</name>
      <desc>XLDデータから形状ベースモデルを生成 ( Create shape models from XLD contours )</desc>
      <path>hdevelop/Matching/Shape-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <method>method.functions</method>
      <operator>area_center_xld</operator>
      <operator>create_shape_model_xld</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>get_shape_model_params</operator>
      <operator>line_orientation</operator>
      <operator>orientation_xld</operator>
      <operator>polar_trans_image</operator>
      <operator>set_shape_model_metric</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>create_template_rot.hdev</name>
      <desc>グレイ値ベーステンプレートを用いて回転を考慮した最適マッチングによる検索 ( Find the best match (with rotation) of a gray value template )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_image</operator>
      <operator>best_match_rot</operator>
      <operator>create_template_rot</operator>
      <operator>fill_interlace</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>set_reference_template</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>crevis.hdev</name>
      <desc>Crevis社製USBカメラを使用した画像取り込み(性能評価) ( Use a Crevis USB camera (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.1</newinversion>
   </example>
   <example>
      <name>crevis_binning.hdev</name>
      <desc>Crevis USBカメラからの画像取り込み (HRS 1/4ビニングモード) (Grab images from a Crevis USB camera (HRS 1/4 binning mode))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.1</newinversion>
   </example>
   <example>
      <name>crevis_parameters.hdev</name>
      <desc>Crevis USBカメラのパラメーター設定の確認 (Query parameter settings from a Crevis USB camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.1</newinversion>
   </example>
   <example>
      <name>crevis_simple.hdev</name>
      <desc>Crevis社製USBカメラを使用した画像取り込み ( Use a Crevis USB camera )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.1</newinversion>
   </example>
   <example>
      <name>crevis_trigger.hdev</name>
      <desc>Crevis USBカメラの使用 (ハードウェアトリガ使用) (Use a Crevis USB camera (external trigger))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.1</newinversion>
   </example>
   <example>
      <name>critical_points.hdev</name>
      <desc>画像内のマーカーを検出 ( Locate saddle point markers in an image )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.filter.general</method>
      <method>method.xld</method>
      <operator>critical_points_sub_pix</operator>
      <operator>draw_region</operator>
      <operator>gen_cross_contour_xld</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>critical_points_sub_pix.hdev</name>
      <desc>サブピクセル精度での臨界点の抽出 （ Detect critical points with subpixel accuracy ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <method>method.visual</method>
      <operator>critical_points_sub_pix</operator>
      <operator>derivate_gauss</operator>
      <operator>dev_open_window</operator>
      <operator>dev_set_part</operator>
      <operator>disp_arrow</operator>
      <operator>disp_rectangle1</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>tuple_concat</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>crop_contours_xld.hdev</name>
      <desc>XLDの切り出し ( Crop an XLD contour )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>crop_contours_xld</operator>
      <operator>disp_arrow</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>lines_gauss</operator>
      <operator>union2</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>crystal.hdev</name>
      <desc>動的しきい値法による2値化処理と領域の後処理による六角形結晶の抽出 ( Extract hexagonally shaped crystals via local thresholding and region post-processing )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <operator>connection</operator>
      <operator>dyn_threshold</operator>
      <operator>mean_image</operator>
      <operator>select_gray</operator>
      <operator>shape_trans</operator>
      <operator>stop</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>dahengcam.hdev</name>
      <desc>Daheng USBカメラの使用 (性能評価) (Use a Daheng USB camera (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>gen_struct_elements</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>dahengcam_2cameras.hdev</name>
      <desc>Daheng USBカメラ2台からの画像取り込み (Grab images from two Daheng USB cameras)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>dahengcam_parameters.hdev</name>
      <desc>Daheng USBカメラからの画像撮り込み (パラメーター設定の確認) (Grab images from Daheng USB cameras (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>dahengcam_simple.hdev</name>
      <desc>Daheng社製USBカメラを使用した画像取り込み(基本的な取込) ( Use a Daheng USB camera (simple) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>decode_bar_code_rectangle2.hdev</name>
      <desc>長方形ROI内でのバーコードのデコード ( Decode a bar code within a rectangular ROI )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>decode_bar_code_rectangle2</operator>
      <operator>get_bar_code_object</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>defect_barcode.hdev</name>
      <desc>欠陥を持つバーコードの読取能力の紹介 ( Show the bar code reader's ability to read defect bar codes )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <method>method.error</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>gen_rectangle1</operator>
      <operator>get_bar_code_object</operator>
      <operator>paint_region</operator>
      <operator>set_bar_code_param</operator>
      <operator>wait_seconds</operator>
      <newinversion>6.1.1</newinversion>
   </example>
   <example>
      <name>dem.hdev</name>
      <desc>数理標高モデルからオブジェクトの高さを抽出 ( Extract high objects from a digital elevation model )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <operator>crop_part</operator>
      <operator>dev_display</operator>
      <operator>dev_set_lut</operator>
      <operator>dev_set_paint</operator>
      <operator>dual_rank</operator>
      <operator>scale_image_max</operator>
      <operator>sub_image</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dem_trees.hdev</name>
      <desc>テクスチャと数理標高モデルを利用しての木の抽出 ( Extract trees using texture and a digital elevation model )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.texture</method>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>clip_region</operator>
      <operator>closing_circle</operator>
      <operator>dual_rank</operator>
      <operator>fill_up</operator>
      <operator>intersection</operator>
      <operator>median_separate</operator>
      <operator>move_region</operator>
      <operator>scale_image_max</operator>
      <operator>sub_image</operator>
      <operator>texture_laws</operator>
      <operator>threshold</operator>
      <operator>zoom_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>depth_from_focus.hdev</name>
      <desc>合焦点法を用いた3次元高さ計測 ( Extract depth using multiple focus levels )</desc>
      <path>hdevelop/3D-Reconstruction/Depth-From-Focus/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.dff</method>
      <method>method.image</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>access_channel</operator>
      <operator>channels_to_image</operator>
      <operator>depth_from_focus</operator>
      <operator>dev_set_paint</operator>
      <operator>mean_image</operator>
      <operator>scale_image_max</operator>
      <operator>select_grayvalues_from_channels</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>derivate_gauss.hdev</name>
      <desc>ガウス導関数を用いた画像の畳み込み ( Convolve an image with derivatives of the Gaussian (various usages) )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>convert_image_type</operator>
      <operator>derivate_gauss</operator>
      <operator>watersheds</operator>
      <operator>zero_crossing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>detect_brochure_pages.hdev</name>
      <desc>特徴点マッチングを利用したページ検索 ( Find pages of articles in a picture database )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.paper</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.descr</method>
      <method>method.geom</method>
      <operator>angle_ll</operator>
      <operator>clear_all_descriptor_models</operator>
      <operator>clear_descriptor_model</operator>
      <operator>create_uncalib_descriptor_model</operator>
      <operator>find_uncalib_descriptor_model</operator>
      <operator>get_descriptor_model_points</operator>
      <operator>projective_trans_pixel</operator>
      <operator>projective_trans_region</operator>
      <operator>set_descriptor_model_origin</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>detect_indent_fft.hdev</name>
      <desc>プラスチック表面上の欠陥抽出 ( Detect defects on the surface of plastic items )</desc>
      <path>hdevelop/Applications/Surface-Inspection/</path>
      <industry>industry.synth</industry>
      <applarea>applarea.inspect.surface</applarea>
      <method>method.morphol</method>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <operator>convol_fft</operator>
      <operator>gen_gauss_filter</operator>
      <operator>gray_range_rect</operator>
      <operator>optimize_rft_speed</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>detect_mura_defects_blur.hdev</name>
      <desc>ぼけた画像中のムラ欠陥の検出 ( Detect mura defects in blurred images )</desc>
      <path>hdevelop/Applications/Surface-Inspection/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.surface</applarea>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <method>method.trafo.geom</method>
      <operator>convol_fft</operator>
      <operator>gen_gauss_filter</operator>
      <operator>lines_gauss</operator>
      <operator>rft_generic</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>detect_mura_defects_texture.hdev</name>
      <desc>テクスチャの強い背景を持つ画像中のムラ欠陥の検出 ( Detect mura defects in highly textured images )</desc>
      <path>hdevelop/Applications/Surface-Inspection/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.surface</applarea>
      <method>method.filter.general</method>
      <method>method.fft</method>
      <method>method.texture</method>
      <method>method.tuple</method>
      <operator>convol_fft</operator>
      <operator>cooc_feature_image</operator>
      <operator>gen_gauss_filter</operator>
      <operator>rft_generic</operator>
      <operator>tuple_find</operator>
      <operator>watersheds_threshold</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>detect_road_signs.hdev</name>
      <desc>道路標識の検出 ( Detect road signs )</desc>
      <path>hdevelop/Applications/Traffic-Monitoring/</path>
      <industry>industry.transp</industry>
      <applarea>applarea.traffic</applarea>
      <method>method.match.deform</method>
      <method>method.trafo.geom</method>
      <operator>access_channel</operator>
      <operator>clear_deformable_model</operator>
      <operator>create_planar_uncalib_deformable_model</operator>
      <operator>find_planar_uncalib_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>get_deformable_model_params</operator>
      <operator>inspect_shape_model</operator>
      <operator>projective_trans_contour_xld</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>determine_die_pitch_fft_correlation.hdev</name>
      <desc>自己相関を用いたウエハーのダイのピッチ測定 ( Locate dies on a wafer using auto-correlation )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.fft</method>
      <operator>correlation_fft</operator>
      <operator>distance_pp</operator>
      <operator>local_max_sub_pix</operator>
      <operator>rft_generic</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>determine_grid_rotation_fft.hdev</name>
      <desc>グリッドパターンの回転角度を取得 ( Determine the rotation angle of a grid )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.fft</method>
      <method>method.funct1d</method>
      <method>method.visual</method>
      <operator>correlation_fft</operator>
      <operator>gen_region_polygon_filled</operator>
      <operator>get_y_value_funct_1d</operator>
      <operator>gray_histo_range</operator>
      <operator>local_min_max_funct_1d</operator>
      <operator>optimize_fft_speed</operator>
      <operator>rft_generic</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>determine_ncc_model_params.hdev</name>
      <desc>正規化相関マッチングのパラメーター設定 ( Determine parameters for a correlation-based matching )</desc>
      <path>hdevelop/Matching/Correlation-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.correl</method>
      <operator>determine_ncc_model_params</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>determine_pose_square_tube.hdev</name>
      <desc>矩形状の対象の位置・姿勢を取得 ( Estimate the pose of a rectangular shaped object )</desc>
      <path>hdevelop/Applications/Position-Recognition-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.xld</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.wcoord</method>
      <operator>affine_trans_point_3d</operator>
      <operator>area_center_points_xld</operator>
      <operator>close_contours_xld</operator>
      <operator>get_rectangle_pose</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>tuple_atan2</operator>
      <operator>union_adjacent_contours_xld</operator>
      <operator>union_collinear_contours_xld</operator>
      <operator>vector_to_pose</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>determine_sharpness.hdev</name>
      <desc>画像の鮮明度を計測する手法例 ( Demonstrate how to measure the sharpness of an image )</desc>
      <path>hdevelop/Applications/General/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <method>method.funct1d</method>
      <operator>abs_image</operator>
      <operator>convert_image_type</operator>
      <operator>correlation_fft</operator>
      <operator>create_funct_1d_array</operator>
      <operator>funct_1d_to_pairs</operator>
      <operator>power_real</operator>
      <operator>rft_generic</operator>
      <operator>tile_images_offset</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>determine_wafer_rotation_angle.hdev</name>
      <desc>関数"text_line_orientation"を用いたウエハーの回転角度の測定 ( Determine the angle of rotation of a wafer using text_line_orientation )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.general</method>
      <operator>text_line_orientation</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>dev_clear_window.hdev</name>
      <desc>グラフィックウィンドウのクリア ( Clear a graphics window in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <operator>dev_clear_window</operator>
      <operator>dev_update_window</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_close_inspect_ctrl.hdev</name>
      <desc>HDevelopにおける変数検査ダイアログのクローズ ( Close a variable inspection window in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.io</method>
      <operator>dev_close_inspect_ctrl</operator>
      <operator>dev_inspect_ctrl</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_close_window.hdev</name>
      <desc>HDevelopにおけるグラフィックウィンドウのクローズ ( Close graphics windows in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <operator>dev_close_window</operator>
      <operator>dev_open_window</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_display.hdev</name>
      <desc>HDevelopのグラフィックウィンドウにおける画像オブジェクトの表示 ( Display image objects in graphics windows in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <operator>dev_clear_window</operator>
      <operator>dev_display</operator>
      <operator>dev_set_colored</operator>
      <operator>dev_set_draw</operator>
      <operator>read_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_error_var.hdev</name>
      <desc>HDevelopにおけるエラーのキャッチ ( Catch errors in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.error</method>
      <method>method.file</method>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_inspect_ctrl.hdev</name>
      <desc>HDevelopにおける変数検査ウィンドウの活用 ( Use a variable inspection window in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.io</method>
      <operator>area_center</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>regiongrowing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_map_par.hdev</name>
      <desc>HDevelopにおける表示設定ダイアログのオープン ( Open the window for adjusting display parameters in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <operator>dev_map_par</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_open_window.hdev</name>
      <desc>HDevelopにおけるグラフィックウィンドウのオープン ( Open graphics windows in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <operator>dev_close_window</operator>
      <operator>dev_display</operator>
      <operator>dev_open_window</operator>
      <operator>dev_set_lut</operator>
      <operator>dev_set_part</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_set_check.hdev</name>
      <desc>HDevelopにおけるエラーハンドリングの有効/無効設定 ( Enable/Disable error handling in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.error</method>
      <method>method.file</method>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_set_paint.hdev</name>
      <desc>HDevelopのグラフィックウィンドウに様々な表示形式を適用してデータを描画 ( Paint data using different representations into a graphics window in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.io</method>
      <operator>dev_set_lut</operator>
      <operator>dev_set_paint</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_set_part.hdev</name>
      <desc>HDevelopのグラフィックウィンドウで（拡大）表示する画像の範囲をセット ( Set the part of an image to be displayed (zoomed) in a graphics window in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <operator>dev_display</operator>
      <operator>dev_set_part</operator>
      <operator>dev_set_window_extents</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dev_set_window_extents.hdev</name>
      <desc>HDevelopのグラフィックウィンドウのサイズと位置の設定 ( Set size and position of a graphics window in HDevelop )</desc>
      <path>hdevelop/Develop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <operator>dev_set_window_extents</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>diameter_region.hdev</name>
      <desc>領域の直径を計算 ( Calculate the diameter of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>diameter_region</operator>
      <operator>disp_line</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>diff_of_gauss.hdev</name>
      <desc>LoGオペレーター ( Approximate the LoG operator (Laplace of Gaussian) )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>derivate_gauss</operator>
      <operator>diff_of_gauss</operator>
      <operator>laplace_of_gauss</operator>
      <operator>zero_crossing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>difference_closed_contours_xld.hdev</name>
      <desc>difference_closed_contours_xldの使用方法 ( Demonstrate the use of difference_closed_contours_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>difference_closed_contours_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>difference_closed_polygons_xld.hdev</name>
      <desc>difference_closed_polygons_xldの使用方法 ( Demonstrate the use of difference_closed_polygons_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>difference_closed_polygons_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>gen_polygons_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>directfile.hdev</name>
      <desc>DirectShowファイルリーダー用HALCONインターフェースの適用 ( Use the HALCON frame grabber interface for DirectShow file reader )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>directshow.hdev</name>
      <desc>DirectShow規格の入力デバイスを用いた画像取り込み(性能評価) ( Use a DirectShow compatible capture device (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>directshow_2cameras.hdev</name>
      <desc>2つのDirectShow対応カメラデバイスを使用 (Use two DirectShow compatible capture devices)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>disp_image</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>directshow_camera_types.hdev</name>
      <desc>DirectShow準拠キャプチャーデバイスおよびカメラの使用 (Use a DirectShow compatible capture device with all available camera types)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_str_last_n</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>directshow_exposure.hdev</name>
      <desc>DirectShow準拠デバイスを用いた画像取り込み（露光時間制御） (Grab images from a DirectShow compatible capture device (using exposure))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>directshow_frame_rates.hdev</name>
      <desc>DirectShow対応キャプチャデバイスを用いた画像取り込み（フレームレート） (Grab images from a DirectShow compatible capture device (frame rate))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>directshow_parameters.hdev</name>
      <desc>DirectShow規格の入力デバイスからパラメータの値を取得 ( Query parameter values from a DirectShow compatible capture device )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>directshow_simple.hdev</name>
      <desc>DirectShow準拠キャプチャーデバイスからの画像取り込み（シンプル） (Grab images from a DirectShow compatible capture device (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>disp_xld.hdev</name>
      <desc>XLDオブジェクトの表示 ( Display an XLD object )</desc>
      <path>hdevelop/Graphics/Output/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.edgeextr</method>
      <method>method.filter.edge</method>
      <method>method.xld</method>
      <operator>disp_xld</operator>
      <operator>edges_image</operator>
      <operator>edges_sub_pix</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>disparity.hdev</name>
      <desc>対象の異なるステレオ画像ペアから生成した視差画像の表示 ( Display disparity image for different stereo image pairs )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.stereo</method>
      <operator>binocular_disparity</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>disparity_image_to_xyz.hdev</name>
      <desc>視差画像のXYZ座標画像への変換 ( Transform a disparity image into the coordinate images X, Y, and Z )</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.stereo</method>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>binocular_disparity</operator>
      <operator>continue</operator>
      <operator>disparity_image_to_xyz</operator>
      <operator>full_domain</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>harmonic_interpolation</operator>
      <operator>map_image</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>disparity_to_point_3d.hdev</name>
      <desc>視差画像からの3次元情報の構築 ( Reconstruct 3D information from disparity )</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.geom</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>affine_trans_point_3d</operator>
      <operator>caltab_points</operator>
      <operator>create_pose</operator>
      <operator>disparity_to_distance</operator>
      <operator>disparity_to_point_3d</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>map_image</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>sim_caltab</operator>
      <operator>tuple_sub</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>display_operators.hdev</name>
      <desc>様々な結果表示方法のデモ ( Visualize results )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>area_center</operator>
      <operator>dev_clear_window</operator>
      <operator>dev_close_window</operator>
      <operator>dev_display</operator>
      <operator>dev_open_window</operator>
      <operator>dev_set_color</operator>
      <operator>dev_set_colored</operator>
      <operator>dev_set_draw</operator>
      <operator>dev_set_line_width</operator>
      <operator>dev_set_lut</operator>
      <operator>dev_set_paint</operator>
      <operator>dev_set_part</operator>
      <operator>dev_set_shape</operator>
      <operator>dev_set_window</operator>
      <operator>dev_update_pc</operator>
      <operator>dev_update_var</operator>
      <operator>dev_update_window</operator>
      <operator>edges_sub_pix</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_rectangle1</operator>
      <operator>get_contour_xld</operator>
      <operator>get_image_size</operator>
      <operator>get_mbutton</operator>
      <operator>read_image</operator>
      <operator>regiongrowing</operator>
      <operator>select_region_point</operator>
      <operator>select_shape_xld</operator>
      <operator>set_font</operator>
      <operator>set_tposition</operator>
      <operator>stop</operator>
      <operator>write_string</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>distance_cc_min.hdev</name>
      <desc>二つの輪郭の間の距離の算出 ( Calculate the distance between two contours )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <method>method.xld</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>disp_arrow</operator>
      <operator>disp_cross</operator>
      <operator>disp_polygon</operator>
      <operator>distance_cc_min</operator>
      <operator>gen_contour_polygon_rounded_xld</operator>
      <operator>get_line_style</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_line_style</operator>
      <operator>set_rgb</operator>
      <operator>set_tposition</operator>
      <operator>tuple_concat</operator>
      <operator>tuple_max</operator>
      <operator>tuple_min</operator>
      <operator>tuple_select_range</operator>
      <operator>tuple_sort</operator>
      <operator>tuple_sort_index</operator>
      <operator>tuple_string</operator>
      <operator>write_string</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>distance_lr.hdev</name>
      <desc>直線と領域の間の距離の算出 ( Calculate the distance between a line and a region )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>disp_line</operator>
      <operator>distance_lr</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_pc.hdev</name>
      <desc>点と輪郭間の距離を計測することでドリルホールの最小最大半径を決定 ( Determine the minimum and maximum radius of drill holes by calculating the distance between a point and a contour )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.auto</industry>
      <industry>industry.metal</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <method>method.visual</method>
      <method>method.string</method>
      <method>method.edgeextr</method>
      <operator>disp_cross</operator>
      <operator>distance_pc</operator>
      <operator>edges_sub_pix</operator>
      <operator>get_string_extents</operator>
      <operator>select_shape_xld</operator>
      <operator>set_tposition</operator>
      <operator>smallest_circle_xld</operator>
      <operator>sort_contours_xld</operator>
      <operator>tuple_string</operator>
      <operator>write_string</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>distance_pl.hdev</name>
      <desc>点と直線の間の距離 ( Calculate the distances between points and a line )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>disp_line</operator>
      <operator>distance_pl</operator>
      <operator>get_region_contour</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_pp.hdev</name>
      <desc>二つの点間距離の算出 ( Calculate the distance between two points )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>distance_pp</operator>
      <operator>get_region_contour</operator>
      <operator>set_draw</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_pr.hdev</name>
      <desc>点と領域の間の距離の算出 ( Calculate the distance between a point and a region )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>distance_pr</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_ps.hdev</name>
      <desc>点と線分の間の距離の算出 ( Calculate the distance between a point and a line segment )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>distance_ps</operator>
      <operator>get_region_contour</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_sl.hdev</name>
      <desc>線分と直線の間の距離の算出 ( Calculate the distance between a line segment and a line )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>distance_sl</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_sr.hdev</name>
      <desc>線分と領域の間の距離の算出 ( Calculate the distance between a line segment and a region )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>distance_sr</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_ss.hdev</name>
      <desc>線分間の距離の算出 ( Calculate the distances between line segments )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>distance_ss</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>distance_transform.hdev</name>
      <desc>仮想回路基板の欠陥検出 ( Inspect a simulated circuit board for defects )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.blob</method>
      <method>method.feat</method>
      <method>method.visual</method>
      <method>method.regionproc</method>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>disp_circle</operator>
      <operator>distance_transform</operator>
      <operator>gen_circle</operator>
      <operator>gen_region_polygon</operator>
      <operator>pruning</operator>
      <operator>skeleton</operator>
      <operator>union2</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>distance_transform_interactive.hdev</name>
      <desc>領域変形の距離の計算 ( Calculate the distance transformation of a region )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.io</method>
      <method>method.filter.general</method>
      <operator>distance_transform</operator>
      <operator>draw_region</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>distance_transform_metrics.hdev</name>
      <desc>異なるmetricパラメータを用いた距離の計算 ( Calculate distances using different metrics )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.io</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>boundary</operator>
      <operator>distance_transform</operator>
      <operator>gen_circle</operator>
      <operator>gen_region_points</operator>
      <operator>intensity</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>div_image.hdev</name>
      <desc>二つの画像間の除算 ( Divide two images )</desc>
      <path>hdevelop/Filters/Arithmetic/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>div_image</operator>
      <operator>gen_image_gray_ramp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dotprt.hdev</name>
      <desc>ドット文字の読み取り ( Read a dot print )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.trafo.align</method>
      <method>method.visual</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <method>method.blob</method>
      <method>method.tuple</method>
      <operator>affine_trans_image</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>clip_region</operator>
      <operator>dev_set_shape</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>opening_rectangle1</operator>
      <operator>partition_rectangle</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>set_font</operator>
      <operator>shape_trans</operator>
      <operator>smallest_rectangle1</operator>
      <operator>sort_region</operator>
      <operator>text_line_orientation</operator>
      <operator>union1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>dots_image.hdev</name>
      <desc>dots_imageを使ったドット文字の抽出 ( Segment a dot print using dots_image )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.morphol</method>
      <method>method.segm</method>
      <method>method.ocr</method>
      <method>method.filter.points</method>
      <operator>closing</operator>
      <operator>closing_rectangle1</operator>
      <operator>crop_part</operator>
      <operator>dots_image</operator>
      <operator>gen_rectangle2</operator>
      <operator>intersection</operator>
      <operator>mult_image</operator>
      <operator>partition_dynamic</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>dual_threshold.hdev</name>
      <desc>符号付きの画像を正と負の領域に分割 ( Segment signed images into positive and negative regions )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.roi</method>
      <method>method.regionproc</method>
      <method>method.segm</method>
      <operator>bin_threshold</operator>
      <operator>convert_image_type</operator>
      <operator>dilation_circle</operator>
      <operator>dual_threshold</operator>
      <operator>select_gray</operator>
      <operator>shape_trans</operator>
      <operator>sub_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>dump_window_data.hdev</name>
      <desc>グラフィックウインドウ上の内容のイメージオブジェクトへの書き込み ( Dump the content of the graphics window to an image object )</desc>
      <path>hdevelop/Graphics/Window/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>area_center_xld</operator>
      <operator>dump_window_image</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>set_tposition</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>dxf_input_output.hdev</name>
      <desc>DXFファイルの書き込み/読み込み ( Write and read DXF files )</desc>
      <path>hdevelop/File/XLD/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.file</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>edges_sub_pix</operator>
      <operator>gen_polygons_xld</operator>
      <operator>query_contour_attribs_xld</operator>
      <operator>query_contour_global_attribs_xld</operator>
      <operator>read_contour_xld_dxf</operator>
      <operator>read_polygon_xld_dxf</operator>
      <operator>regress_contours_xld</operator>
      <operator>write_contour_xld_dxf</operator>
      <operator>write_polygon_xld_dxf</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>dyn_threshold.hdev</name>
      <desc>動的しきい値法を使用した画像の分割 ( Segment an image using a local threshold )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>dyn_threshold</operator>
      <operator>fill_interlace</operator>
      <operator>mean_image</operator>
      <operator>opening_circle</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ean13.hdev</name>
      <desc>バーコード EAN13の読取 ( Read a bar code of type EAN13 )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_rgb</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>ean13addon5.hdev</name>
      <desc>バーコード EAN Add-On5の読取 ( Read a bar code of type EAN13 Add-On 5 )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_rgb</operator>
      <newinversion>6.0.1</newinversion>
   </example>
   <example>
      <name>ean8.hdev</name>
      <desc>バーコード EAN8の読取 ( Read a bar code of type EAN 8 )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>ecc200_default_settings.hdev</name>
      <desc>2次元データコード ECC200の読取 ( Train parameters for reading a 2d data code of type ECC200 )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>get_string_extents</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ecc200_finder_pattern_tolerance.hdev</name>
      <desc>ファインダーパターンに大きな歪曲があるECC200に対する読取 ( Demonstrate how to read ECC200 symbols with disturbed finder patterns )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <method>method.tuple</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>tuple_regexp_select</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>ecc200_optimized.hdev</name>
      <desc>2次元データコード ECC200を読み取るためのパラメータ最適化 ( Optimize parameters to read 2D data codes of type ECC200 )</desc>
      <path>hdevelop/Applications/Data-Codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ecc200_optimized_settings.hdev</name>
      <desc>2次元データコード ECC200の読み取りに対するパラメータの最適化 ( Optimize parameters for reading a 2d data code of type ECC200 )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>get_string_extents</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ecc200_print_quality.hdev</name>
      <desc>ECC200データコードの印刷品質の検査 ( Inspect the print quality of an ECC200 data code )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <applarea>applarea.inspect.print</applarea>
      <method>method.datacode</method>
      <operator>affine_trans_image</operator>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>crop_rectangle1</operator>
      <operator>find_data_code_2d</operator>
      <operator>gen_region_contour_xld</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>min_max_gray</operator>
      <operator>paint_gray</operator>
      <operator>paint_region</operator>
      <operator>projective_trans_image</operator>
      <operator>scale_image</operator>
      <operator>set_data_code_2d_param</operator>
      <operator>vector_to_proj_hom_mat2d</operator>
      <operator>wait_seconds</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>ecc200_read_model.hdev</name>
      <desc>2次元データコード ECC200について前もって保存されていたパラメータの読込 ( Load previously stored parameters for 2d data codes of type ECC200 )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>read_data_code_2d_model</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ecc200_simple.hdev</name>
      <desc>2次元データコード ECC200の読取 ( Read 2D data codes of type ECC200 )</desc>
      <path>hdevelop/Applications/Data-Codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_contour_xld</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ecc200_small_modules_robustness.hdev</name>
      <desc>非常に小さなモジュールで構成されたECC200の読取 ( Demonstrate how to read ECC200 symbols with very small modules )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>set_data_code_2d_param</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>ecc200_training.hdev</name>
      <desc>2次元データコード ECC200を読み取るためのパラメータトレーニング ( Train parameters for reading a 2d data code of type ECC200 )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>query_data_code_2d_params</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ecc200_training_simple.hdev</name>
      <desc>トレーニングした2DデータコードモデルでのECC200コード読み取り ( Train a 2D data code model and then read data codes of type ECC200 )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_data_code_2d_param</operator>
      <operator>set_font</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ecc200_write_model.hdev</name>
      <desc>2次元データコード ECC200に対するパラメータの保存 ( Store parameters for 2d data codes of type ECC200 )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>write_data_code_2d_model</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>eccentricity.hdev</name>
      <desc>領域の楕円形状係数(eccentrity)を計算 ( Calculate the eccentrity of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>eccentricity</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>edge_segments.hdev</name>
      <desc>エッジ情報の抽出と分割 ( Extract connected edges segments )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <method>method.blob</method>
      <operator>edges_image</operator>
      <operator>split_skeleton_lines</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>edges_color.hdev</name>
      <desc>カラー情報を用いたエッジ抽出 ( Extract edges using color information )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <method>method.color</method>
      <operator>dev_set_part</operator>
      <operator>edges_color</operator>
      <operator>edges_image</operator>
      <operator>rgb1_to_gray</operator>
      <operator>skeleton</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>edges_color_sub_pix.hdev</name>
      <desc>色情報を用いたサブピクセル精度のエッジ抽出 ( Extract edges with sub-pixel precision using color information )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.color</method>
      <operator>dev_set_part</operator>
      <operator>edges_color_sub_pix</operator>
      <operator>edges_sub_pix</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>edges_image.hdev</name>
      <desc>Deriche, Lanser, Shen, Cannyフィルターを用いたエッジ（強度と方向）の抽出 ( Extract edges (amplitude and direction) using Deriche, Lanser, Shen, or Canny filters )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>edges_image</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>edges_sub_pix.hdev</name>
      <desc>サブピクセル精度のエッジ抽出 ( Extract edges with sub-pixel precision )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <operator>edges_sub_pix</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>eliminate_runs.hdev</name>
      <desc>与えられた長さのランを領域から除去(ランレングス符号化) ( Eliminate runs with a given length from a region (runlength encoding) )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>eliminate_runs</operator>
      <operator>gen_circle</operator>
      <operator>opening</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>elliptic_axis.hdev</name>
      <desc>楕円近似のパラメータを計算 ( Calculate the equivalent ellipse of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>disp_ellipse</operator>
      <operator>elliptic_axis</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>elliptic_axis_gray.hdev</name>
      <desc>グレイ値モーメントの算出精度を解析 ( Analyze the accuracy of calculating the gray value moments (elliptic_axis_gray) )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.measure.2D</applarea>
      <method>method.feat</method>
      <operator>affine_trans_region</operator>
      <operator>elliptic_axis</operator>
      <operator>elliptic_axis_gray</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_image_const</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>paint_region</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>emphasize.hdev</name>
      <desc>画像のコントラスト強調 ( Enhance image contrast )</desc>
      <path>hdevelop/Filters/Enhancement/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>emphasize</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>eneo.hdev</name>
      <desc>eneo SCカメラからの遠隔画像取り込み(性能評価) ( Grab remote images from a eneo SC camera (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>eneo_parameters.hdev</name>
      <desc>遠隔にあるeneo SCカメラから現在のパラメーター設定を参照 ( Query current parameter settings from a remote eneo SC camera )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>eneo_simple.hdev</name>
      <desc>remote eneo SCカメラの使用 (シンプル) (Simple usage of a remote eneo SC camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>engraved.hdev</name>
      <desc>金属表面の文字の読み取り ( Read characters on a metal surface )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.machine</industry>
      <industry>industry.metal</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <method>method.blob</method>
      <operator>clear_ocr_class_mlp</operator>
      <operator>dev_set_shape</operator>
      <operator>do_ocr_single_class_mlp</operator>
      <operator>gray_range_rect</operator>
      <operator>invert_image</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>sort_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>engravedt.hdev</name>
      <desc>金属表面の文字の読み取りのためのトレーニング ( Train characters on a metal surface )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.machine</industry>
      <industry>industry.metal</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.error</method>
      <operator>append_ocr_trainf</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>delete_file</operator>
      <operator>dev_set_shape</operator>
      <operator>gray_range_rect</operator>
      <operator>invert_image</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_class_mlp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>entropy_gray.hdev</name>
      <desc>画像のエントロピーと非等方性を算出 ( Calculate the entropy and anisotropy of images )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.feat</method>
      <method>method.texture</method>
      <operator>entropy_gray</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>entropy_image.hdev</name>
      <desc>グレイ値のエントロピに基づく画像の分割 ( Segment an image based on the entropy of gray values )</desc>
      <path>hdevelop/Filters/Texture/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.texture</method>
      <method>method.blob</method>
      <method>method.feat</method>
      <method>method.segm</method>
      <operator>entropy_image</operator>
      <operator>fill_up_shape</operator>
      <operator>opening_circle</operator>
      <operator>select_gray</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>equ_histo_image.hdev</name>
      <desc>バイト型画像に対するヒストグラム線形化 ( Linearize Histogram for byte images )</desc>
      <path>hdevelop/Filters/Enhancement/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>equ_histo_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>error_handling_timeout_falcon.hdev</name>
      <desc>画像取り込みエラー処理 ( Handle grab errors )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <method>method.error</method>
      <operator>close_framegrabber</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>get_error_text</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>error_handling_timeout_leutron.hdev</name>
      <desc>画像取り込みエラー処理 ( Handle grab errors )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <method>method.error</method>
      <operator>close_framegrabber</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>get_error_text</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>set_system</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>estimate_noise.hdev</name>
      <desc>画像中のノイズ評価 ( Estimate the noise within an image )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>add_noise_distribution</operator>
      <operator>disp_rectangle1</operator>
      <operator>estimate_noise</operator>
      <operator>gauss_distribution</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>euclid_distance.hdev</name>
      <desc>座標のTupleに対するユークリッド距離の算出 ( Calculate euclidian distances for a tuple of coordinates )</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <method>method.functions</method>
      <method>method.tuple</method>
      <operator>assign</operator>
   </example>
   <example>
      <name>euler_number.hdev</name>
      <desc>領域のオイラー数(Euler number)を計算 ( Calculate the Euler number of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>complement</operator>
      <operator>euler_number</operator>
      <operator>get_system</operator>
      <operator>set_system</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>exhaustive_match.hdev</name>
      <desc>テンプレートと画像とのマッチング(グレイ値ベースマッチング) ( Match template and image (gray-value-based matching) )</desc>
      <path>hdevelop/Filters/Match/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <operator>exhaustive_match</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>exit.hdev</name>
      <desc>タスク完了後のHDevelopの終了 ( Terminate HDevelop after the task is finished )</desc>
      <path>hdevelop/Control/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <method>method.file</method>
      <operator>close_file</operator>
      <operator>exit</operator>
      <operator>fwrite_string</operator>
      <operator>intensity</operator>
      <operator>open_file</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>expand_gray.hdev</name>
      <desc>領域間の隙間を埋める ( Fill gaps between regions (depending on gray value) )</desc>
      <path>hdevelop/Segmentation/Region-Growing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>expand_gray</operator>
      <operator>gen_empty_region</operator>
      <operator>regiongrowing</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>expand_gray_ref.hdev</name>
      <desc>領域間の隙間を埋める ( Fill gaps between regions (depending on gray value) )</desc>
      <path>hdevelop/Segmentation/Region-Growing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>expand_gray_ref</operator>
      <operator>gen_empty_region</operator>
      <operator>intensity</operator>
      <operator>regiongrowing</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>expand_line.hdev</name>
      <desc>与えられた直線から領域を拡張 ( Expand a region from a given line )</desc>
      <path>hdevelop/Segmentation/Region-Growing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>expand_line</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>expand_region.hdev</name>
      <desc>領域間の隙間の穴埋め、または重なりあう領域の分割 ( Fill gaps between regions or split overlapping regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <method>method.visual</method>
      <method>method.morphol</method>
      <operator>dilation_circle</operator>
      <operator>expand_region</operator>
      <operator>gen_empty_region</operator>
      <operator>regiongrowing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>extract_clips_xl.hdev</name>
      <desc>HALCON XL による大容量画像処理のデモ ( Demonstrate how to process a large image with HALCON XL )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.visual</method>
      <method>method.feat</method>
      <operator>get_system</operator>
      <operator>tile_images</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>fast_match_mg.hdev</name>
      <desc>グレイ値ベーステンプレートを用いてピラミッドアルゴリズムを適用したマッチングによる検索 ( Find matches of a gray value template in a pyramid )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.gray</method>
      <operator>add_channels</operator>
      <operator>best_match</operator>
      <operator>create_template</operator>
      <operator>fast_match_mg</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>fast_threshold.hdev</name>
      <desc>高速しきい値処理 ( Fast selection of grayvalues within an intervall )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>fast_threshold</operator>
      <operator>threshold</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>fast_threshold_vs_threshold.hdev</name>
      <desc>fast_threshold と threshold との比較 ( Compare fast_threshold and threshold )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>area_center</operator>
      <operator>count_seconds</operator>
      <operator>difference</operator>
      <operator>fast_threshold</operator>
      <operator>threshold</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>features_points_xld.hdev</name>
      <desc>*_xldオペレータと対応する*_points_xldオペレータとの比較 ( Compare *_xld with corresponding *_points_xld operators )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>area_center_points_xld</operator>
      <operator>area_center_xld</operator>
      <operator>close_contours_xld</operator>
      <operator>elliptic_axis_points_xld</operator>
      <operator>elliptic_axis_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>lines_gauss</operator>
      <operator>select_shape_xld</operator>
      <operator>set_color</operator>
      <operator>tuple_length</operator>
      <operator>union_adjacent_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>file.hdev</name>
      <desc>仮想フレームグラバーを使用 (画像ファイル1枚) (Use the virtual frame grabber (file, single image))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>file_directory.hdev</name>
      <desc>仮想フレームグラバーを使用 (全てのファイルをディレクトリから読み出し) (Use the virtual frame grabber (read all files from directory))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_environment</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>file_exists.hdev</name>
      <desc>ファイルが存在するかのチェック ( Check the existence of a file )</desc>
      <path>hdevelop/File/Misc/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.string</method>
      <method>method.error</method>
      <method>method.file</method>
      <method>method.opsys</method>
      <method>method.functions</method>
      <operator>close_file</operator>
      <operator>delete_file</operator>
      <operator>file_exists</operator>
      <operator>fread_string</operator>
      <operator>get_system</operator>
      <operator>open_file</operator>
      <operator>system_call</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>file_sequence.hdev</name>
      <desc>仮想画像入力を用いた画像取り込み(画像ファイルやシーケンスファイルからの取込) ( Use the virtual frame grabber (file, image sequence) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>fill_interlace.hdev</name>
      <desc>内挿によるインターレース画像の補間 ( Interpolate video half images )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <method>method.filter.general</method>
      <operator>dev_set_part</operator>
      <operator>fill_interlace</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fill_up.hdev</name>
      <desc>領域内の穴埋め ( Fill up holes in regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>difference</operator>
      <operator>fill_up</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fill_up_shape.hdev</name>
      <desc>領域内で指定した形状特徴を持つホールの穴埋め ( Fill up holes in regions that have a given shape )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.feat</method>
      <method>method.regionproc</method>
      <operator>difference</operator>
      <operator>fill_up_shape</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fin.hdev</name>
      <desc>バリ抽出のための輪郭検査 ( Inspect a contour for fins )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.synth</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <operator>area_center</operator>
      <operator>bin_threshold</operator>
      <operator>closing_circle</operator>
      <operator>difference</operator>
      <operator>opening_rectangle1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>find_aniso_shape_model.hdev</name>
      <desc>縦横別スケール・回転を考慮した形状ベースマッチングを用いてSMDコンデンサーを検索 ( Find SMD capacitors using shape-based matching (with anisotropic scaling and rotation) )</desc>
      <path>hdevelop/Matching/Shape-Based/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>count_seconds</operator>
      <operator>create_aniso_shape_model</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>find_aniso_shape_model</operator>
      <operator>gen_contour_polygon_rounded_xld</operator>
      <operator>gen_image_const</operator>
      <operator>get_mposition</operator>
      <operator>get_shape_model_contours</operator>
      <operator>get_string_extents</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>paint_xld</operator>
      <operator>set_system</operator>
      <operator>set_tposition</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>find_cocoa_packages_local_deformable.hdev</name>
      <desc>局所変形マッチングを用いたココアラベルの検出 ( Find a cocoa label using local deformable matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.ldeform</method>
      <method>method.trafo.geom</method>
      <operator>clear_deformable_model</operator>
      <operator>create_local_deformable_model</operator>
      <operator>find_local_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>vector_field_to_real</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_cocoa_packages_max_deformation.hdev</name>
      <desc>形状ベースマッチングの 'max_deformation' パラメーターを用いたココアラベルの検出 ( Find a cocoa label using shape-based matching with 'max_deformation' )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.shape</method>
      <method>method.trafo.geom</method>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_local_deformable_model.hdev</name>
      <desc>局所変形マッチング手法を用いた局所的に変形がある対象物の検索 ( Find an object despite local deformations using local deformable matching )</desc>
      <path>hdevelop/Matching/Deformable/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.deform</method>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.morphol</method>
      <method>method.segm</method>
      <method>method.trafo.geom</method>
      <method>method.xld</method>
      <method>method.typeconv.ico</method>
      <operator>clear_deformable_model</operator>
      <operator>create_local_deformable_model</operator>
      <operator>crop_domain</operator>
      <operator>find_local_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>get_grayval_interpolated</operator>
      <operator>optical_flow_mg</operator>
      <operator>real_to_vector_field</operator>
      <operator>unwarp_image_vector_field</operator>
      <operator>vector_field_length</operator>
      <operator>vector_field_to_real</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_mirror_dies.hdev</name>
      <desc>ウエハー上のミラーダイ位置検出 ( Locate mirror dies on a wafer )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.trafo.geom</method>
      <method>method.match.shape</method>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_ncc_model_defocused.hdev</name>
      <desc>正規化相関マッチング手法を用いたテクスチャとフォーカスの変動下における対象検索 ( Find an object despite changes in texture and focus using correlation-based matching )</desc>
      <path>hdevelop/Matching/Correlation-Based/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.correl</method>
      <operator>affine_trans_region</operator>
      <operator>clear_ncc_model</operator>
      <operator>create_ncc_model</operator>
      <operator>find_ncc_model</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>find_ncc_model_defocused_precision.hdev</name>
      <desc>レンズフォーカスの異なる複数枚画像に対する正規化相関マッチング適用評価 ( Examine ncc matches in images with different focuses of the lens )</desc>
      <path>hdevelop/Matching/Correlation-Based/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.match.correl</method>
      <method>method.xld</method>
      <method>method.geom</method>
      <method>method.tuple</method>
      <operator>clear_ncc_model</operator>
      <operator>create_ncc_model</operator>
      <operator>diameter_xld</operator>
      <operator>find_ncc_model</operator>
      <operator>tuple_sub</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>find_ncc_model_exposure.hdev</name>
      <desc>正規化相関マッチング手法を用いた線形な照明条件の変動下における対象検索 ( Find an object despite linear illumination changes using correlation-based matching )</desc>
      <path>hdevelop/Matching/Correlation-Based/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.correl</method>
      <operator>affine_trans_region</operator>
      <operator>clear_ncc_model</operator>
      <operator>create_ncc_model</operator>
      <operator>find_ncc_model</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>find_neighbors.hdev</name>
      <desc>近接領域を検索 ( Test neighborhood relation of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.regionproc</method>
      <operator>disp_line</operator>
      <operator>expand_region</operator>
      <operator>find_neighbors</operator>
      <operator>gen_empty_region</operator>
      <operator>regiongrowing</operator>
      <operator>shape_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>find_pads.hdev</name>
      <desc>ダイの上のパッドの検出 ( Find pads on a die. )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.blob</method>
      <method>method.roi</method>
      <operator>boundary</operator>
      <operator>connection</operator>
      <operator>dev_close_window</operator>
      <operator>dev_open_window</operator>
      <operator>dev_update_pc</operator>
      <operator>dev_update_var</operator>
      <operator>dev_update_window</operator>
      <operator>dilation_circle</operator>
      <operator>edges_sub_pix</operator>
      <operator>fast_threshold</operator>
      <operator>fill_up</operator>
      <operator>fit_rectangle2_contour_xld</operator>
      <operator>gen_rectangle2_contour_xld</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape</operator>
      <operator>select_shape_xld</operator>
      <operator>shape_trans</operator>
      <operator>union1</operator>
      <operator>union_adjacent_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>find_peanut_chocolate_candies_local_deformable.hdev</name>
      <desc>局所変形マッチングを用いたピーナッツチョコレートキャンディーラベルの検出 ( Find a peanut chocolat candy label using local deformable matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.shape</method>
      <method>method.trafo.geom</method>
      <operator>clear_deformable_model</operator>
      <operator>create_local_deformable_model</operator>
      <operator>find_local_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_scaled_shape_model.hdev</name>
      <desc>形状ベースマッチングを用いてスケール・回転変化を考慮した対象検索 ( Find objects using shape-based matching (with scaling and rotation) )</desc>
      <path>hdevelop/Matching/Shape-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>find_scaled_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>find_scratches_bandpass_fft.hdev</name>
      <desc>バンドパスフィルタを用いた欠陥検出のデモ ( Demonstrate how to detect defects using a bandpass filter )</desc>
      <path>hdevelop/Filters/FFT/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.surface</applarea>
      <method>method.fft</method>
      <method>method.morphol</method>
      <operator>gen_region_contour_xld</operator>
      <operator>gen_sin_bandpass</operator>
      <operator>optimize_rft_speed</operator>
      <operator>rft_generic</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_shape_model_max_deformation.hdev</name>
      <desc>形状ベースマッチングを用いて徐々に変形する対象を検索 ( Find slightly deformed objects with shape-based matching. )</desc>
      <path>hdevelop/Matching/Shape-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.edgeextr</method>
      <method>method.match.shape</method>
      <method>method.morphol</method>
      <method>method.regionproc</method>
      <method>method.segm</method>
      <method>method.roi</method>
      <method>method.trafo.align</method>
      <method>method.xld</method>
      <operator>clear_shape_model</operator>
      <operator>close_contours_xld</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_smd_fast.hdev</name>
      <desc>バックライト照明上のSMD部品の高速検出 ( Find SMDs on a back illuminated plate )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.regionproc</method>
      <method>method.xld</method>
      <operator>gen_rectangle2_contour_xld</operator>
      <operator>select_shape_std</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_surface_model.hdev</name>
      <desc>サーフェスマッチングを用いた3Dシーン内の物体の検出 ( Find an object in a 3D scene using surface-based matching )</desc>
      <path>hdevelop/3D-Matching/Surface-Based/</path>
      <industry>industry.auto</industry>
      <applarea>applarea.recog.object3d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.match3d.surface</method>
      <method>method.poseestim</method>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>affine_trans_object_model_3d</operator>
      <operator>axis_angle_to_quat</operator>
      <operator>clear_object_model_3d</operator>
      <operator>clear_surface_matching_result</operator>
      <operator>clear_surface_model</operator>
      <operator>convert_pose_type</operator>
      <operator>create_surface_model</operator>
      <operator>find_surface_model</operator>
      <operator>get_line_of_sight</operator>
      <operator>get_object_model_3d_params</operator>
      <operator>get_surface_matching_result</operator>
      <operator>global</operator>
      <operator>hom_mat3d_translate_local</operator>
      <operator>project_object_model_3d</operator>
      <operator>quat_to_hom_mat3d</operator>
      <operator>xyz_to_object_model_3d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_text_bottle_label.hdev</name>
      <desc>OCRのためのボトルラベル上の文字の抽出 ( Segment text on a bottle label for an OCR task )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.food</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.segm</method>
      <operator>clear_text_model</operator>
      <operator>clear_text_result</operator>
      <operator>create_text_model</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>find_text</operator>
      <operator>get_text_model_param</operator>
      <operator>get_text_object</operator>
      <operator>get_text_result</operator>
      <operator>set_text_model_param</operator>
      <operator>text_line_orientation</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>find_text_dongle.hdev</name>
      <desc>OCRのためのドングル上の文字の抽出 ( Segment text on a dongle for an OCR task )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.segm</method>
      <method>method.ocr</method>
      <operator>clear_text_model</operator>
      <operator>clear_text_result</operator>
      <operator>create_text_model</operator>
      <operator>do_ocr_word_mlp</operator>
      <operator>find_text</operator>
      <operator>set_text_model_param</operator>
      <operator>text_line_orientation</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>first_example_acquisition_falcon.hdev</name>
      <desc>画像入力デバイスの為の基本オペレーター ( Present the basic operators for image acquisition )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <method>method.segm</method>
      <method>method.visual</method>
      <operator>auto_threshold</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>get_mposition</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_system</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>first_example_shape_matching.hdev</name>
      <desc>HALCONの形状ベースパターンマッチングの基本使用方法 ( Introduce HALCON's shape-based matching )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.visual</method>
      <method>method.match.shape</method>
      <method>method.roi</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>grab_image</operator>
      <operator>inspect_shape_model</operator>
      <operator>open_framegrabber</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>fit_circle_contour_xld.hdev</name>
      <desc>円によるXLDオブジェクトの近似 ( Approximate an XLD contour with a circle )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.xld</method>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fit_ellipse_contour_xld.hdev</name>
      <desc>XLDの楕円もしくは楕円弧近似 ( Approximate XLD contours with ellipses or elliptic arcs )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.xld</method>
      <operator>complement</operator>
      <operator>edges_sub_pix</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>gen_image_const</operator>
      <operator>get_contour_xld</operator>
      <operator>paint_region</operator>
      <operator>union2</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fit_ellipse_tooth_rim_xld.hdev</name>
      <desc>XLDの楕円近似による歯車の中心位置検出 ( Approximate the contour of a tooth rim with an ellipse to find its center. )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.machine</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.funct1d</method>
      <method>method.feat</method>
      <operator>clip_contours_xld</operator>
      <operator>create_funct_1d_array</operator>
      <operator>dev_open_window</operator>
      <operator>dev_set_part</operator>
      <operator>dist_ellipse_contour_points_xld</operator>
      <operator>dist_ellipse_contour_xld</operator>
      <operator>edges_sub_pix</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>length_xld</operator>
      <operator>local_min_max_funct_1d</operator>
      <operator>set_tposition</operator>
      <operator>tuple_max</operator>
      <operator>tuple_median</operator>
      <operator>tuple_sort_index</operator>
      <operator>write_string</operator>
      <operator>zero_crossings_funct_1d</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>fit_line_contour_xld.hdev</name>
      <desc>線分によるXLDオブジェクトの近似 ( Approximate XLD contours with line segments )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.io</method>
      <method>method.visual</method>
      <method>method.xld</method>
      <operator>disp_line</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>get_mbutton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fit_primitives_object_model_3d.hdev</name>
      <desc>円柱の2.5次元データへのフィッティング ( Fit a cylinder into 2.5D data )</desc>
      <path>hdevelop/3D-Tools/3D-Segmentation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object3d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.fitting3d</method>
      <operator>clear_object_model_3d</operator>
      <operator>fit_primitives_object_model_3d</operator>
      <operator>get_object_model_3d_params</operator>
      <operator>object_model_3d_to_xyz</operator>
      <operator>xyz_to_object_model_3d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>fit_rectangle2_contour_xld.hdev</name>
      <desc>四角い穿孔の欠陥検出 ( Detect errors in punched rectangular holes. )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.functions</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.feat</method>
      <method>method.visual</method>
      <method>method.tuple</method>
      <operator>boundary</operator>
      <operator>dilation_rectangle1</operator>
      <operator>dist_rectangle2_contour_points_xld</operator>
      <operator>edges_sub_pix</operator>
      <operator>fast_threshold</operator>
      <operator>fit_rectangle2_contour_xld</operator>
      <operator>gen_rectangle2_contour_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>get_string_extents</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape_xld</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>fnew_line.hdev</name>
      <desc>テキストファイルへのラインフィード(LF)コードの追加 ( Write line feeds to a text file )</desc>
      <path>hdevelop/File/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <operator>close_file</operator>
      <operator>fnew_line</operator>
      <operator>fwrite_string</operator>
      <operator>open_file</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>font.hdev</name>
      <desc>対話形式で指定した印刷文字の読み取り ( Read printed characters with interactive selection )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.visual</method>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>dev_set_shape</operator>
      <operator>dilation_rectangle1</operator>
      <operator>do_ocr_single_class_mlp</operator>
      <operator>get_params_ocr_class_mlp</operator>
      <operator>get_region_index</operator>
      <operator>min_max_gray</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>scale_image</operator>
      <operator>set_font</operator>
      <operator>shape_trans</operator>
      <operator>sort_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fontt.hdev</name>
      <desc>印刷文字の読み取りのためのトレーニングおよび分類 ( Train printed characters and reclassify them )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.error</method>
      <operator>append_ocr_trainf</operator>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>copy_obj</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>delete_file</operator>
      <operator>dev_set_shape</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>min_max_gray</operator>
      <operator>reduce_domain</operator>
      <operator>scale_image</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_class_mlp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>for.hdev</name>
      <desc>for文を用いたブロブ処理の結果表示 ( Use a for loop to iterate over extracted blobs )</desc>
      <path>hdevelop/Control/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <operator>else</operator>
      <operator>endfor</operator>
      <operator>endif</operator>
      <operator>for</operator>
      <operator>stop</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>forest.hdev</name>
      <desc>森林から木と牧草地を抽出 ( Extract trees and meadows from forest )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.blob</method>
      <method>method.color</method>
      <method>method.visual</method>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <method>method.roi</method>
      <method>method.tuple</method>
      <operator>closing_circle</operator>
      <operator>complement</operator>
      <operator>connection</operator>
      <operator>decompose3</operator>
      <operator>difference</operator>
      <operator>invert_image</operator>
      <operator>min_max_gray</operator>
      <operator>opening_circle</operator>
      <operator>reduce_domain</operator>
      <operator>select_gray</operator>
      <operator>select_shape_std</operator>
      <operator>smooth_image</operator>
      <operator>threshold</operator>
      <operator>union1</operator>
      <operator>union2</operator>
      <operator>watersheds</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fread_char.hdev</name>
      <desc>テキストファイルからの文字の読み込み ( Read characters from a text file )</desc>
      <path>hdevelop/File/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <operator>close_file</operator>
      <operator>fnew_line</operator>
      <operator>fread_char</operator>
      <operator>fread_string</operator>
      <operator>fwrite_string</operator>
      <operator>open_file</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fread_line.hdev</name>
      <desc>テキストファイルからの行の読み込み ( Read lines from a text file )</desc>
      <path>hdevelop/File/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <operator>close_file</operator>
      <operator>fread_line</operator>
      <operator>fwrite_string</operator>
      <operator>open_file</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>fread_string.hdev</name>
      <desc>テキストファイルからの文字列の読み込み ( Read strings from a text file )</desc>
      <path>hdevelop/File/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <operator>close_file</operator>
      <operator>fread_string</operator>
      <operator>open_file</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>frei_amp.hdev</name>
      <desc>Frei-Chenオペレーターを用いたエッジ（強度）の抽出 ( Extract edges (amplitude) using the Frei-Chen operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>frei_amp</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>frei_dir.hdev</name>
      <desc>Frei-Chenオペレーターを用いたエッジ（強度と方向）の抽出 ( Extract edges (amplitude and direction) using the Frei-Chen operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>frei_dir</operator>
      <operator>nonmax_suppression_dir</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fuse.hdev</name>
      <desc>フューズのワイヤー部分の太さを計測 ( Measure the thickness of a fuse wire )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.visual</method>
      <operator>close_measure</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_rectangle2</operator>
      <operator>measure_pairs</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>fuzzy_entropy.hdev</name>
      <desc>領域内のファジーエントロピーを算出 ( Calculate the fuzzy entropy of regions )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.feat</method>
      <method>method.texture</method>
      <operator>fuzzy_entropy</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>fuzzy_measure_pin.hdev</name>
      <desc>ファジー計測を用いたICのピン計測 ( Measure pins of an IC using fuzzy measuring )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.visual</method>
      <operator>close_measure</operator>
      <operator>create_funct_1d_pairs</operator>
      <operator>disp_circle</operator>
      <operator>for</operator>
      <operator>fuzzy_measure_pairs</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>set_fuzzy_measure_norm_pair</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>fuzzy_measure_switch.hdev</name>
      <desc>ファジーメジャーを用いてスイッチのピン幅と距離を計測 ( Determine the width of and the distance between the pins of a switch with a fuzzy measure object )</desc>
      <path>solution_guide/1d_measuring/</path>
      <industry>industry.general</industry>
      <industry>industry.electr</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.funct1d</method>
      <method>method.visual</method>
      <operator>close_measure</operator>
      <operator>create_funct_1d_pairs</operator>
      <operator>fuzzy_measure_pairs</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_rectangle2</operator>
      <operator>measure_pairs</operator>
      <operator>set_fuzzy_measure</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>fuzzy_perimeter.hdev</name>
      <desc>領域のファジー周囲長を算出 ( Calculate the fuzzy perimeter of a region )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.feat</method>
      <method>method.texture</method>
      <operator>fuzzy_perimeter</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gauss_image.hdev</name>
      <desc>離散ガウス関数を用いた画像のスムージング ( Smooth an image using discrete gauss functions )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>dev_set_colored</operator>
      <operator>dev_set_draw</operator>
      <operator>gauss_image</operator>
      <operator>watersheds</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_arbitrary_distortion_map.hdev</name>
      <desc>形状既知の通常のグリッドを用いて任意に歪んだ画像を補正 ( Rectify an arbitrarily distorted image using a regular grid with known correspondences )</desc>
      <path>hdevelop/Tools/Grid-Rectification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.rectif</method>
      <method>method.visual</method>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_arbitrary_distortion_map</operator>
      <operator>map_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>gen_checker_region.hdev</name>
      <desc>格子模様領域の生成 ( Create a chessboard region )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>connection</operator>
      <operator>dev_set_colored</operator>
      <operator>gen_checker_region</operator>
      <operator>get_system</operator>
      <operator>set_system</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_circle.hdev</name>
      <desc>円形領域の生成 ( Create a circle region )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.feat</method>
      <operator>gen_circle</operator>
      <operator>inner_circle</operator>
      <operator>regiongrowing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_contour_region_xld.hdev</name>
      <desc>領域からのXLDオブジェクトの抽出 ( Extract the contours of regions as XLD objects )</desc>
      <path>hdevelop/XLD/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.xld</method>
      <operator>gen_contour_region_xld</operator>
      <operator>regiongrowing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_cooc_matrix.hdev</name>
      <desc>共起行列の算出 ( Calculate a co-occurrence matrix )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.texture</method>
      <operator>dev_set_lut</operator>
      <operator>gen_cooc_matrix</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_ellipse.hdev</name>
      <desc>楕円領域の生成します ( Create an ellipse region )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.feat</method>
      <operator>elliptic_axis</operator>
      <operator>gen_ellipse</operator>
      <operator>regiongrowing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_empty_region.hdev</name>
      <desc>空の領域を生成 ( Create an empty region )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>gen_empty_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_filter_mask.hdev</name>
      <desc>real型画像として空間領域にフィルターマスクを蓄積 ( Store a filter mask in the spatial domain as a real-image )</desc>
      <path>hdevelop/Filters/FFT/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>fft_image</operator>
      <operator>gen_filter_mask</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_gauss_pyramid.hdev</name>
      <desc>ピラミッド画像の生成 ( Create a pyramid of scaled down images )</desc>
      <path>hdevelop/Filters/Match/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>count_obj</operator>
      <operator>gen_gauss_pyramid</operator>
      <operator>select_obj</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_grid_region.hdev</name>
      <desc>グリッド領域の生成 ( Create a grid region consisting of lines or points )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.roi</method>
      <method>method.morphol</method>
      <method>method.segm</method>
      <operator>dilation_rectangle1</operator>
      <operator>gen_grid_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_image_interleaved.hdev</name>
      <desc>インターリーブされた入力行列から3チャンネルHALCON画像を生成するいくつかの手法を紹介 ( Demonstrate various ways of creating a three-channel HALCON image from an input matrix with interleaved pixels. )</desc>
      <path>hdevelop/Image/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <operator>affine_trans_image_size</operator>
      <operator>clip_region</operator>
      <operator>convert_image_type</operator>
      <operator>decompose3</operator>
      <operator>gen_grid_region</operator>
      <operator>gen_image_const</operator>
      <operator>gen_image_interleaved</operator>
      <operator>get_image_pointer3</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>move_region</operator>
      <operator>overpaint_gray</operator>
      <operator>scale_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>gen_mean_filter.hdev</name>
      <desc>円形中央値フィルタを用いた画像のフィルタリングのデモ ( Demonstrate how to filter an image using a circular mean filter )</desc>
      <path>hdevelop/Filters/FFT/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>convol_fft</operator>
      <operator>gen_mean_filter</operator>
      <operator>mean_image</operator>
      <operator>rft_generic</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>gen_measure_arc.hdev</name>
      <desc>与えられた円弧に垂直なエッジの計測 ( Measure edges perpendicular to a given arc )</desc>
      <path>hdevelop/1D-Measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <operator>close_measure</operator>
      <operator>distance_pp</operator>
      <operator>gen_measure_arc</operator>
      <operator>measure_pos</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_measure_rectangle2.hdev</name>
      <desc>与えられた直線に垂直なエッジの計測 ( Measure edges perpendicular to a given line )</desc>
      <path>hdevelop/1D-Measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <operator>close_measure</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_rectangle2</operator>
      <operator>measure_pairs</operator>
      <operator>measure_pos</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_nurbs_interp.hdev</name>
      <desc>点列補間によるNURBS曲線の生成 ( Create a NURBS curve that interpolates a list of points )</desc>
      <path>hdevelop/XLD/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>gen_contour_nurbs_xld</operator>
      <operator>gen_nurbs_interp</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>gen_parallel_contour_xld.hdev</name>
      <desc>並行するXLDオブジェクトの算出 ( Compute the parallel contour of an XLD contour )</desc>
      <path>hdevelop/XLD/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>edges_sub_pix</operator>
      <operator>gen_image_const</operator>
      <operator>gen_parallel_contour_xld</operator>
      <operator>paint_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_principal_comp_trans.hdev</name>
      <desc>主成分分析を利用したマルチチャンネル画像からの森 水 木の抽出 ( Extract forest, water, and trees from a multi-channel image using principal component analysis )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.classif</method>
      <operator>class_2dim_sup</operator>
      <operator>closing_circle</operator>
      <operator>convert_image_type</operator>
      <operator>decompose7</operator>
      <operator>dilation_circle</operator>
      <operator>disp_rectangle1</operator>
      <operator>gen_principal_comp_trans</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>histo_2dim</operator>
      <operator>linear_trans_color</operator>
      <operator>scale_image</operator>
      <operator>select_shape_std</operator>
      <operator>set_rgb</operator>
      <operator>set_tposition</operator>
      <operator>threshold</operator>
      <operator>write_string</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>gen_projective_mosaic.hdev</name>
      <desc>プリント基板の画像数枚を大きなモザイク画像に結合 ( Combine several images of a PCB into a large mosaic image )</desc>
      <path>hdevelop/Tools/Mosaicking/</path>
      <industry>industry.general</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.mosaic</method>
      <method>method.functions</method>
      <method>method.match.point</method>
      <method>method.filter.points</method>
      <method>method.visual</method>
      <operator>bundle_adjust_mosaic</operator>
      <operator>dev_set_window_extents</operator>
      <operator>gen_bundle_adjusted_mosaic</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_image_const</operator>
      <operator>gen_projective_mosaic</operator>
      <operator>paint_region</operator>
      <operator>points_foerstner</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>tile_images_offset</operator>
      <operator>wait_seconds</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>gen_random_region.hdev</name>
      <desc>ランダムな領域の生成(ノイズ) ( Create a random region (noise) )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>gen_random_region</operator>
      <operator>remove_noise_region</operator>
      <operator>runlength_features</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_random_regions.hdev</name>
      <desc>ランダムなパラメータを持つ領域の生成(円、矩形など) ( Create a region with random parameters (circle, rectangle, ...) )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>gen_random_regions</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_rectangle1.hdev</name>
      <desc>座標軸に平行な矩形の生成 ( Create a rectangle region parallel to the coordinate axes )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>closing_rectangle1</operator>
      <operator>gen_rectangle1</operator>
      <operator>smallest_rectangle1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_rectangle2.hdev</name>
      <desc>任意の方向をもつ矩形領域の生成 ( Create a rectangle region of arbitrary orientation )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>gen_rectangle2</operator>
      <operator>smallest_rectangle2</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_region_histo.hdev</name>
      <desc>ヒストグラムを表す領域の生成(0～255) ( Create a region based on a histogram (256 values) )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.visual</method>
      <method>method.funct1d</method>
      <operator>create_funct_1d_array</operator>
      <operator>funct_1d_to_pairs</operator>
      <operator>gen_region_histo</operator>
      <operator>gray_histo</operator>
      <operator>smooth_funct_1d_gauss</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_region_hline.hdev</name>
      <desc>ヘッセ標準形に基づく直線領域の生成 ( Create a line region based on Hessian normal form )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>gen_region_hline</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_region_line.hdev</name>
      <desc>始点と終点を指定して線分領域を生成 ( Create a line region based on start and end point )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>gen_region_line</operator>
      <operator>intensity</operator>
      <operator>set_check</operator>
      <operator>set_gray</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_region_points.hdev</name>
      <desc>点領域の生成 ( Create a point region )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>gen_region_points</operator>
      <operator>get_mbutton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_region_polygon.hdev</name>
      <desc>ポリゴン領域の生成 ( Create a polygon region )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>gen_region_polygon</operator>
      <operator>get_mbutton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_region_polygon_filled.hdev</name>
      <desc>満たされたポリゴン領域を生成 ( Create a filled polygon region )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>gen_region_polygon_filled</operator>
      <operator>get_mbutton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_region_runs.hdev</name>
      <desc>水平なラインからなる領域を生成(ランレングス符号化) ( Create a region based on horizontal lines (runlength coding) )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>gen_region_runs</operator>
      <operator>get_mbutton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gen_training_file.hdev</name>
      <desc>OCRの為のトレーニングファイルを生成 ( Generate a training file for the OCR )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.file</method>
      <method>method.ocr</method>
      <operator>append_ocr_trainf</operator>
      <operator>delete_file</operator>
      <operator>intersection</operator>
      <operator>smallest_rectangle1</operator>
      <operator>sort_region</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>generate_system_font.hdev</name>
      <desc>Create OCR training samples from system fonts</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.segm</method>
      <method>method.trafo.geom</method>
      <operator>clear_ocr_class_mlp</operator>
      <operator>clear_text_model</operator>
      <operator>clear_text_result</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>create_text_model</operator>
      <operator>distance_transform</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>get_text_object</operator>
      <operator>query_font</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>read_ocr_trainf</operator>
      <operator>set_text_model_param</operator>
      <operator>text_line_orientation</operator>
      <operator>tile_images_offset</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>unwarp_image_vector_field</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>generic_socket_receive_data.hdev</name>
      <desc>一般のソケット通信を用いたデータ受信 ( Use generic sockets to receive data )</desc>
      <path>hdevelop/System/Sockets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.comm</method>
      <operator>close_socket</operator>
      <operator>get_socket_param</operator>
      <operator>open_socket_accept</operator>
      <operator>receive_data</operator>
      <operator>send_data</operator>
      <operator>set_socket_param</operator>
      <operator>socket_accept_connect</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>generic_socket_send_data.hdev</name>
      <desc>一般のソケット通信を用いたデータ送信 ( Use generic sockets to send data )</desc>
      <path>hdevelop/System/Sockets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.comm</method>
      <operator>close_socket</operator>
      <operator>get_socket_param</operator>
      <operator>open_socket_connect</operator>
      <operator>receive_data</operator>
      <operator>send_data</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>genicamtl.hdev</name>
      <desc>画像取り込み： GenICamTLインターフェース (ベンチマークテスト) (Grab images from a GenICamTL interface (benchmark test))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>genicamtl_parameters.hdev</name>
      <desc>GenICamTLインターフェースを用いた画像取り込み （パラメーター設定の確認） (Grab images via the GenICamTL interface (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>genicamtl_simple.hdev</name>
      <desc>GenICamTLインターフェースを使用 (simple) (Use the GenICamTL interface (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>get_circle_pose.hdev</name>
      <desc>透視2次元投影から3次元空間における円の位置の特定 ( Determine the pose of circles in 3D from their perspective 2D projections )</desc>
      <path>hdevelop/Transformations/Poses/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.calib</method>
      <method>method.visual</method>
      <method>method.functions</method>
      <method>method.numeric</method>
      <method>method.poseestim</method>
      <method>method.tuple</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_point_3d</operator>
      <operator>assign</operator>
      <operator>binomial_filter</operator>
      <operator>concat_obj</operator>
      <operator>count_obj</operator>
      <operator>create_pose</operator>
      <operator>edges_sub_pix</operator>
      <operator>find_caltab</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>gen_empty_obj</operator>
      <operator>get_circle_pose</operator>
      <operator>get_contour_xld</operator>
      <operator>get_mbutton</operator>
      <operator>get_mposition</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>select_contours_xld</operator>
      <operator>sim_caltab</operator>
      <operator>tuple_sort_index</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>get_grayval_contour_xld.hdev</name>
      <desc>XLDで表される線上の輝度値値の取得 ( Get gray values at the positions of an XLD contour )</desc>
      <path>hdevelop/Image/Access/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.funct1d</method>
      <method>method.xld</method>
      <method>method.tuple</method>
      <operator>create_funct_1d_array</operator>
      <operator>get_grayval_contour_xld</operator>
      <operator>local_min_max_funct_1d</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>get_grayval_interpolated.hdev</name>
      <desc>特定の位置の輝度値の取得 ( Get gray values at specific row and column positions )</desc>
      <path>hdevelop/Image/Access/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.funct1d</method>
      <method>method.feat</method>
      <method>method.tuple</method>
      <operator>create_funct_1d_array</operator>
      <operator>get_grayval_interpolated</operator>
      <operator>local_min_max_funct_1d</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>get_modules.hdev</name>
      <desc>使用しているモジュールとモジュールキーの参照 ( Query the used modules and the module key )</desc>
      <path>hdevelop/System/Database/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.general</method>
      <operator>close_edges</operator>
      <operator>get_modules</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>get_mposition.hdev</name>
      <desc>マウスの座標、ボタン状態の取得 ( Query mouse position and button status )</desc>
      <path>hdevelop/Graphics/Mouse/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.io</method>
      <method>method.error</method>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>dev_set_preferences</operator>
      <operator>disp_rectangle1</operator>
      <operator>get_grayval</operator>
      <operator>get_mposition</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>get_operator_info.hdev</name>
      <desc>オペレータに関する情報を参照 ( Query information about operators )</desc>
      <path>hdevelop/System/Information/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.general</method>
      <operator>continue</operator>
      <operator>get_operator_info</operator>
      <operator>get_operator_name</operator>
      <operator>get_param_names</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>get_param_info.hdev</name>
      <desc>オペレータのパラメータに関する情報を参照 ( Query information about parameters of operators )</desc>
      <path>hdevelop/System/Information/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.general</method>
      <operator>get_operator_name</operator>
      <operator>get_param_info</operator>
      <operator>get_param_names</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>get_rectangle_pose_barcode.hdev</name>
      <desc>バーコードの3次元位置・姿勢検出 ( Estimate 3D pose of bar codes )</desc>
      <path>hdevelop/Applications/Position-Recognition-3D/</path>
      <industry>industry.metal</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.poseestim</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.geom</method>
      <method>method.visual</method>
      <method>method.trafo.wcoord</method>
      <operator>affine_trans_point_3d</operator>
      <operator>area_center</operator>
      <operator>clear_bar_code_model</operator>
      <operator>close_contours_xld</operator>
      <operator>complement</operator>
      <operator>connection</operator>
      <operator>contour_to_world_plane_xld</operator>
      <operator>create_bar_code_model</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>difference</operator>
      <operator>dilation_rectangle1</operator>
      <operator>distance_pp</operator>
      <operator>dyn_threshold</operator>
      <operator>edges_sub_pix</operator>
      <operator>erosion_rectangle1</operator>
      <operator>fill_up</operator>
      <operator>find_bar_code</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_rectangle1</operator>
      <operator>get_rectangle_pose</operator>
      <operator>get_rgb</operator>
      <operator>get_system</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>image_to_world_plane</operator>
      <operator>intersection</operator>
      <operator>mean_image</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape_xld</operator>
      <operator>set_origin_pose</operator>
      <operator>set_rgb</operator>
      <operator>set_system</operator>
      <operator>smallest_rectangle1_xld</operator>
      <operator>tuple_find</operator>
      <operator>union_adjacent_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>get_region_contour.hdev</name>
      <desc>領域輪郭の座標を取得 ( Access the contour of an object )</desc>
      <path>hdevelop/Regions/Access/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>disp_line</operator>
      <operator>get_region_contour</operator>
      <operator>select_shape_std</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>get_region_index.hdev</name>
      <desc>指定したピクセルを含む領域を取得 ( Find regions that contain a given pixel )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.io</method>
      <method>method.regionproc</method>
      <operator>get_mbutton</operator>
      <operator>get_region_index</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>get_region_thickness.hdev</name>
      <desc>領域の主軸上の厚みを計算 ( Calculate the thickness of regions (along the main axis) )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>get_region_thickness</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>get_support_vector_class_svm.hdev</name>
      <desc>サポートベクターマシーン(SVM)からのサポートベクターの読み出しおよびクラスの境界の可視化 ( Read out the support vectors from an SVM and visualize them along with the class boundaries )</desc>
      <path>hdevelop/Classification/Support-Vector-Machines/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.classif</method>
      <method>method.visual</method>
      <operator>add_sample_class_svm</operator>
      <operator>classify_class_svm</operator>
      <operator>clear_class_svm</operator>
      <operator>create_class_svm</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_image_const</operator>
      <operator>gen_region_points</operator>
      <operator>get_region_points</operator>
      <operator>get_sample_class_svm</operator>
      <operator>get_support_vector_class_svm</operator>
      <operator>get_support_vector_num_class_svm</operator>
      <operator>intersection</operator>
      <operator>label_to_region</operator>
      <operator>set_grayval</operator>
      <operator>train_class_svm</operator>
      <operator>union2</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>gigevision.hdev</name>
      <desc>画像取り込み：GigE Vision対応カメラ (ベンチマークテスト) (Grab images from a GigE Vision compliant camera (benchmark test))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>gigevision_crop.hdev</name>
      <desc>GigEVisionインターフェースを用いた画像取り込み (AOIの使用) (Grab images via the GigEVision interface (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>gigevision_forceip.hdev</name>
      <desc>誤って設定されているGigEVisionデバイスに正しいIPを強制適用する (Use ForceIP to correctly configure a misconfigured GigEVision device)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_regexp_match</operator>
      <operator>tuple_regexp_select</operator>
      <operator>tuple_str_first_n</operator>
      <operator>tuple_str_last_n</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>gigevision_frame_rate.hdev</name>
      <desc>GigE Vision準拠カメラを用いた画像取り込み（フレームレート） (Grab images from a GigE Vision compliant camera (frame rate))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>gigevision_parameters.hdev</name>
      <desc>GigEVisionインターフェースを用いた画像取り込み (パラメーター設定の確認) (Grab images via the GigEVision interface (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_file</operator>
      <operator>close_framegrabber</operator>
      <operator>fwrite_string</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>gigevision_simple.hdev</name>
      <desc>GigEVisionインターフェースの使用 (シンプル) (Use the GigEVision interface (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>ginga++.hdev</name>
      <desc>リンクス銀河++画像入力ボードを使用した画像取り込み（ベンチマークテスト） ( Use a LinX GINGA++ frame grabber board (benchmark test) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_2cameras.hdev</name>
      <desc>リンクス銀河++画像入力ボードを使用した画像取り込み（カメラ2台） ( Use a LinX GINGA++ frame grabber board (two cameras) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_capture_freq.hdev</name>
      <desc>リンクス銀河++画像入力ボードで取り込み頻度を制御 (Capture frequency control of a LinX GINGA++ frame grabber board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>ginga++_continuous.hdev</name>
      <desc>リンクス銀河++画像入力ボードを使用 (continuous grabbing)(simple) (Use a LinX GINGA++ frame grabber board (continuous grabbing) (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_crop.hdev</name>
      <desc>リンクス銀河++画像入力ボードを使用した画像取り込み(画像切り出し) ( Use a LinX GINGA++ frame grabber board (image cropping) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_external_drive.hdev</name>
      <desc>リンクス銀河++画像入力ボードを用いて2台カメラ同時取り込み ( Grab simultaneously with two cameras using a LinX GINGA++ frame grabber board )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>ginga++_frame_exposure.hdev</name>
      <desc>リンクス銀河++画像入力ボードを用いた画像取り込み（露光時間制御） ( Use a LinX GINGA++ frame grabber board (frame exposure) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>ginga++_parameters.hdev</name>
      <desc>リンクス銀河++画像入力ボードの使用 (パラメーター) (Use a LinX GINGA++ frame grabber board (parameters))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_sequence.hdev</name>
      <desc>リンクス銀河++を使用 (取り込みシーケンス） (Use a LinX GINGA++ frame grabber board (sequence grabbing))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_simple.hdev</name>
      <desc>リンクス銀河++画像入力ボードの使用 (simple)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_trigger.hdev</name>
      <desc>リンクス銀河++画像入力ボードの使用 (トリガ入力) (Use a LinX GINGA++ frame grabber board (triggering))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>ginga++_walking.hdev</name>
      <desc>リンクス銀河++画像入力ボードを使用した画像取り込み (continuous grabbingモード) ( Use a LinX GINGA++ frame grabber board (continuous grabbing) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.4</newinversion>
   </example>
   <example>
      <name>gray_closing_rect.hdev</name>
      <desc>矩形マスクでのグレイクロージング処理を実行 ( Perform a gray value closing with a rectangular mask )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_closing_rect</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>gray_closing_shape.hdev</name>
      <desc>グレイクロージング処理をマスクサイズ・形状を変更して実行 ( Perform a gray value closing within a chosen shape for each point )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_closing_shape</operator>
      <operator>sub_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>gray_dilation_rect.hdev</name>
      <desc>各画素での矩形範囲内の最大輝度値を取得 ( Determine the maximum gray value within a rectangle for each point )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_dilation_rect</operator>
      <operator>gray_erosion_rect</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gray_dilation_shape.hdev</name>
      <desc>選択したマスク形状でのグレイモフォロジー（膨張）処理を実行 ( Perform a gray value dilation within a chosen shape for each point )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_dilation_shape</operator>
      <operator>gray_erosion_shape</operator>
      <operator>sub_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>gray_erosion_rect.hdev</name>
      <desc>各画素での矩形範囲内の最小輝度値を取得 ( Determine the minimum gray value within a rectangle for each point )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_dilation_rect</operator>
      <operator>gray_erosion_rect</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gray_erosion_shape.hdev</name>
      <desc>選択したマスク形状でのグレイモフォロジー（収縮）処理を実行</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_dilation_shape</operator>
      <operator>gray_erosion_shape</operator>
      <operator>sub_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>gray_erosion_subpix.hdev</name>
      <desc>サブピクセル精度でのグレイモフォロジ(収縮)処理を実行 ( Show how to use gray_erosion_shape with subpixel-precision )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <operator>gray_erosion_shape</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>gray_features.hdev</name>
      <desc>標準的なグレイ値特徴量の算出 ( Calculate standard gray value features )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.feat</method>
      <operator>area_center</operator>
      <operator>area_center_gray</operator>
      <operator>connection</operator>
      <operator>elliptic_axis</operator>
      <operator>elliptic_axis_gray</operator>
      <operator>select_shape</operator>
      <operator>threshold</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>gray_histo.hdev</name>
      <desc>領域内のグレイ値分布を算出 ( Calculate the gray value distribution for a region )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.visual</method>
      <operator>gen_region_histo</operator>
      <operator>gray_histo</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gray_histo_range.hdev</name>
      <desc>ユーザー定義グレイ値範囲における画像のグレイヒストグラムの算出 ( Calculate the gray value histogram of an image in a user-defined gray value range )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>gray_histo_range</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>gray_moments.hdev</name>
      <desc>グレイ値モーメントを算出し平面近似 ( Calculate gray value moments and approximate by a plane )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>dev_set_lut</operator>
      <operator>gen_image_gray_ramp</operator>
      <operator>moments_gray_plane</operator>
      <operator>sub_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>gray_opening.hdev</name>
      <desc>グレイモフォロジー処理を用いてドリル穴を抽出 ( Segment drill holes using gray value morphology )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.morphol</method>
      <method>method.segm</method>
      <operator>gray_closing</operator>
      <operator>gray_opening</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>gray_opening_rect.hdev</name>
      <desc>グレイオープニング処理を矩形マスク形状で実行 ( Perform a gray value opening with a rectangular mask )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_opening_rect</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>gray_opening_shape.hdev</name>
      <desc>グレイオープニング処理をマスクサイズ・形状を変更して実行 ( Perform a gray value opening within a chosen shape for each point )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>gray_opening_shape</operator>
      <operator>sub_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>gray_projections.hdev</name>
      <desc>領域内の水平・垂直グレイ値投影グラフを算出 ( Calculate horizontal and vertical gray-value projections of a region )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>disp_line</operator>
      <operator>gray_projections</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>grid_rectification.hdev</name>
      <desc>通常のグリッドを用いて任意に歪んだ画像を補正 ( Rectify an arbitrarily distorted image using a regular grid )</desc>
      <path>hdevelop/Tools/Grid-Rectification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <applarea>applarea.general</applarea>
      <method>method.trafo.rectif</method>
      <method>method.barcode</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <method>method.error</method>
      <operator>clear_bar_code_model</operator>
      <operator>connect_grid_points</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>find_rectification_grid</operator>
      <operator>gen_grid_rectification_map</operator>
      <operator>get_bar_code_object</operator>
      <operator>map_image</operator>
      <operator>saddle_points_sub_pix</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>grid_rectification_arbitrary_distortion.hdev</name>
      <desc>垂直方向に歪みを持つ2つの印刷物間の違いを検出 ( Determine differences between two printed pages, even if there are distortions in the vertical direction )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.blob</method>
      <method>method.trafo.rectif</method>
      <method>method.funct1d</method>
      <method>method.match.comp</method>
      <method>method.visual</method>
      <operator>clear_component_model</operator>
      <operator>create_component_model</operator>
      <operator>create_funct_1d_pairs</operator>
      <operator>crop_part</operator>
      <operator>dyn_threshold</operator>
      <operator>elliptic_axis</operator>
      <operator>find_component_model</operator>
      <operator>funct_1d_to_pairs</operator>
      <operator>gen_arbitrary_distortion_map</operator>
      <operator>intersection</operator>
      <operator>map_image</operator>
      <operator>mean_image</operator>
      <operator>sample_funct_1d</operator>
      <operator>smallest_rectangle1</operator>
      <operator>sub_image</operator>
      <operator>tuple_gen_const</operator>
      <operator>tuple_sort_index</operator>
      <newinversion>7.0.1</newinversion>
   </example>
   <example>
      <name>grid_rectification_ruled_surface.hdev</name>
      <desc>グリッド画像を用いて円筒形状の表面を平面化 ( Rectify an arbitrarily distorted image using a regular grid )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <applarea>applarea.general</applarea>
      <method>method.trafo.rectif</method>
      <method>method.barcode</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <method>method.error</method>
      <operator>clear_bar_code_model</operator>
      <operator>connect_grid_points</operator>
      <operator>create_bar_code_model</operator>
      <operator>create_rectification_grid</operator>
      <operator>find_bar_code</operator>
      <operator>find_rectification_grid</operator>
      <operator>gen_grid_rectification_map</operator>
      <operator>map_image</operator>
      <operator>saddle_points_sub_pix</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>7.0.1</newinversion>
   </example>
   <example>
      <name>hamming_change_region.hdev</name>
      <desc>与えられた領域から決められたHamming距離をもつ領域を生成 ( Generate a region with a given Hamming distance to a given region )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>hamming_change_region</operator>
      <operator>hamming_distance</operator>
      <operator>union1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>hamming_distance.hdev</name>
      <desc>2つの領域間のHamming距離を算出 ( Calculate the Hamming distance between two regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>hamming_distance</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>handeye_create_robot_poses.hdev</name>
      <desc>ハンドアイキャリブレーションに必要なロボット姿勢を入力してファイルへ出力 ( Allow the user to input robot poses for hand-eye calibration and writes them into files )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.robotvis</applarea>
      <method>method.calib.handeye</method>
      <method>method.visual</method>
      <method>method.file</method>
      <method>method.trafo.geom</method>
      <operator>clear_window</operator>
      <operator>create_pose</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_rotate_local</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>read_string</operator>
      <operator>write_pose</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>handeye_movingcam_calibration.hdev</name>
      <desc>移動カメラシステムでのハンドアイキャリブレーションの実行 ( Perform hand-eye calibration for a hand-eye system with a moving camera )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.robotvis</applarea>
      <method>method.calib.handeye</method>
      <method>method.calib</method>
      <method>method.visual</method>
      <method>method.file</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_point_3d</operator>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>hand_eye_calibration</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>read_cam_par</operator>
      <operator>read_pose</operator>
      <operator>write_cam_par</operator>
      <operator>write_pose</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>handeye_stationarycam_calibration.hdev</name>
      <desc>固定カメラシステムでのハンドアイキャリブレーションの実行 ( Perform hand-eye calibration for a hand-eye system with a stationary camera )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.robotvis</applarea>
      <method>method.calib.handeye</method>
      <method>method.calib</method>
      <method>method.visual</method>
      <method>method.file</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_point_3d</operator>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>hand_eye_calibration</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>read_cam_par</operator>
      <operator>read_pose</operator>
      <operator>write_cam_par</operator>
      <operator>write_pose</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>handeye_stationarycam_grasp_nut.hdev</name>
      <desc>固定カメラシステム用ハンドアイキャリブレーションの結果を用いてナットを把持する為の姿勢を計算 ( Calculate pose for grasping a nut based on results of hand-eye calibration for a stationary camera )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.robotvis</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.calib.handeye</method>
      <method>method.visual</method>
      <method>method.file</method>
      <method>method.trafo.geom</method>
      <method>method.poseestim</method>
      <method>method.xld</method>
      <method>method.blob</method>
      <method>method.trafo.wcoord</method>
      <operator>affine_trans_point_3d</operator>
      <operator>break</operator>
      <operator>caltab_points</operator>
      <operator>convert_pose_type</operator>
      <operator>dev_close_inspect_ctrl</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_parallels_xld</operator>
      <operator>gen_polygons_xld</operator>
      <operator>get_parallels_xld</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>read_cam_par</operator>
      <operator>read_pose</operator>
      <operator>segment_contours_xld</operator>
      <operator>vector_to_pose</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>harmonic_interpolation.hdev</name>
      <desc>ステレオ再構築で生成された距離画像の隙間の穴埋め ( Fill up unreconstructed areas in a distance image created by stereo reconstruction )</desc>
      <path>hdevelop/Filters/Inpainting/</path>
      <industry>industry.semicon</industry>
      <industry>industry.electr</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.filter.general</method>
      <operator>binocular_distance</operator>
      <operator>complement</operator>
      <operator>emphasize</operator>
      <operator>full_domain</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>get_domain</operator>
      <operator>harmonic_interpolation</operator>
      <operator>map_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>height_above_reference_plane_from_stereo.hdev</name>
      <desc>ステレオビジョンによりチップの高さ情報を取得 ( Extract chips using height information from binocular stereo )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.feat</method>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>binocular_disparity</operator>
      <operator>binocular_distance</operator>
      <operator>emphasize</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>gen_image_surface_first_order</operator>
      <operator>get_domain</operator>
      <operator>intersection</operator>
      <operator>invert_image</operator>
      <operator>map_image</operator>
      <operator>moments_gray_plane</operator>
      <operator>scale_image</operator>
      <operator>sub_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>height_displacement.hdev</name>
      <desc>高さの置き換え量を計算（既知の高さ） ( Calculate height displacements (for known heights) )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.trafo.wcoord</method>
      <operator>affine_trans_point_3d</operator>
      <operator>distance_pp</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>read_cam_par</operator>
      <operator>read_pose</operator>
      <operator>set_origin_pose</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>high.hdev</name>
      <desc>オブジェクトの高さ抽出 ( Extract high objects )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <operator>clip_region</operator>
      <operator>dual_rank</operator>
      <operator>dyn_threshold</operator>
      <operator>gen_disc_se</operator>
      <operator>get_system</operator>
      <operator>gray_tophat</operator>
      <operator>mean_image</operator>
      <operator>move_region</operator>
      <operator>scale_image_max</operator>
      <operator>set_system</operator>
      <operator>sub_image</operator>
      <operator>zoom_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>highpass_image.hdev</name>
      <desc>画像から高周波成分を抽出 ( Extract high frequency components from an image )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>highpass_image</operator>
      <operator>opening_circle</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>histo_2dim.hdev</name>
      <desc>2つのグレイ値チャンネルに基づく2次元ヒストグラムの算出 ( Calculate a two-dimensional histogram (based on two gray value channels) )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.texture</method>
      <method>method.feat</method>
      <operator>dev_set_lut</operator>
      <operator>histo_2dim</operator>
      <operator>texture_laws</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>histo_to_thresh.hdev</name>
      <desc>ヒストグラムからのグレイ値しきい値処理 ( Determine gray value thresholds from a histogram )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>gray_histo</operator>
      <operator>histo_to_thresh</operator>
      <operator>threshold</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>holes.hdev</name>
      <desc>穴位置の抽出および穴半径の計測 ( Extract positions and radii of holes )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.roi</method>
      <method>method.blob</method>
      <method>method.visual</method>
      <method>method.numeric</method>
      <method>method.functions</method>
      <operator>elliptic_axis</operator>
      <operator>reduce_domain</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>hom_mat2d_rotate.hdev</name>
      <desc>2次元同次変形行列を使用した回転 ( Apply a rotation using a homogeneous 2D transformation matrix )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <operator>affine_trans_image</operator>
      <operator>gen_image_gray_ramp</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>set_grayval</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>hom_mat2d_slant.hdev</name>
      <desc>2次元同次変形行列を使用した傾斜 ( Apply a slant using a homogeneous 2D transformation matrix )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <operator>affine_trans_image</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_slant</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>hom_mat2d_to_affine_par.hdev</name>
      <desc>アフィン変形行列を幾何学的パラメータに分解 ( Decompose an affine transformation into geometric parameters )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.io</method>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>affine_trans_image</operator>
      <operator>draw_point</operator>
      <operator>hom_mat2d_to_affine_par</operator>
      <operator>vector_to_hom_mat2d</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>hom_mat2d_translate.hdev</name>
      <desc>2次元同次変形行列を使用した移動 ( Apply a translation using a homogeneous 2D transformation matrix )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <operator>affine_trans_image</operator>
      <operator>gen_image_gray_ramp</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>set_grayval</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>hom_mat_3d_from_3d_point_correspondences.hdev</name>
      <desc>3次元点の対応から3次元変換行列を計算 ( Estimate a 3D homography from given 3D point correspondences )</desc>
      <path>hdevelop/Matrix/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.linalg</method>
      <method>method.numeric</method>
      <method>method.poseestim</method>
      <method>method.trafo.wcoord</method>
      <operator>add_matrix_mod</operator>
      <operator>clear_matrix</operator>
      <operator>create_matrix</operator>
      <operator>create_pose</operator>
      <operator>determinant_matrix</operator>
      <operator>get_full_matrix</operator>
      <operator>get_size_matrix</operator>
      <operator>get_sub_matrix</operator>
      <operator>get_value_matrix</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>mean_matrix</operator>
      <operator>mult_matrix</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>scale_matrix</operator>
      <operator>set_sub_matrix</operator>
      <operator>set_value_matrix</operator>
      <operator>sub_matrix</operator>
      <operator>sum_matrix</operator>
      <operator>svd_matrix</operator>
      <operator>transpose_matrix_mod</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>hom_vector_to_proj_hom_mat2d.hdev</name>
      <desc>無限遠への座標の移動をしめすさまざまな2次元変形の表示 ( Demonstrate various 2D transformations that move points to infinity )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <operator>hom_vector_to_proj_hom_mat2d</operator>
      <operator>projective_trans_image_size</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>hough_lines.hdev</name>
      <desc>ハフ変換を用いた画像上の直線検出 ( Detect lines in an image using the Hough transform )</desc>
      <path>hdevelop/Tools/Hough/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <method>method.regionproc</method>
      <method>method.hough</method>
      <method>method.roi</method>
      <operator>gen_region_hline</operator>
      <operator>hough_lines</operator>
      <operator>rectangle1_domain</operator>
      <operator>sobel_amp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>hough_lines_dir.hdev</name>
      <desc>ハフ変換と局所勾配を用いた画像上の直線検出 ( Detect lines in an image using the Hough transform and local gradient directions )</desc>
      <path>hdevelop/Tools/Hough/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <method>method.regionproc</method>
      <method>method.hough</method>
      <method>method.roi</method>
      <operator>gen_region_hline</operator>
      <operator>hough_lines_dir</operator>
      <operator>rectangle1_domain</operator>
      <operator>sobel_dir</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>hull.hdev</name>
      <desc>注射器のモールドノズルの検査 ( Inspect an injection molded nozzle )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.synth</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>closing_circle</operator>
      <operator>difference</operator>
      <operator>opening_circle</operator>
      <operator>select_shape</operator>
      <operator>shape_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>hysteresis_threshold.hdev</name>
      <desc>エッジ画像に対するヒステリシスしきい値処理 ( Perform a hysteresis threshold operation on an edge image )</desc>
      <path>hdevelop/Segmentation/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <method>method.filter.edge</method>
      <operator>hysteresis_threshold</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ic.hdev</name>
      <desc>色情報を用いた基板上の抵抗、コンデンサ、ICの抽出 ( Extract resistors, capacitors and ICs from a board using color information )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.visual</method>
      <method>method.color</method>
      <method>method.roi</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>add_channels</operator>
      <operator>decompose3</operator>
      <operator>dilation_rectangle1</operator>
      <operator>dyn_threshold</operator>
      <operator>shape_trans</operator>
      <operator>trans_from_rgb</operator>
      <operator>union1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>illuminate.hdev</name>
      <desc>明部・暗部における詳細部分の強調 ( Enhance detail in bright and dark regions )</desc>
      <path>hdevelop/Filters/Enhancement/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>illuminate</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>image_to_world_plane.hdev</name>
      <desc>計測平面に関する画像補正 ( Rectify an image with regard to the plane of measurment )</desc>
      <path>hdevelop/Calibration/Rectification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.trafo.rectif</method>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>image_to_world_plane</operator>
      <operator>set_origin_pose</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>info_edges.hdev</name>
      <desc>edges_imageのフィルター幅の推定 ( Estimate the width of a filter in edges_image )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>edges_image</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>info_edges</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>info_framegrabber_falcon.hdev</name>
      <desc>画像入力インターフェースの情報を取得 ( Query information about a frame grabber interface )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>info_framegrabber</operator>
      <operator>set_system</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>inner_circle.hdev</name>
      <desc>領域の最大内接円を算出 ( Calculate the inner circle of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>inner_circle</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>inner_rectangle1.hdev</name>
      <desc>木板の節を避けた矩形領域を検出 ( Find knot-free rectangles in a piece of wood )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.wood</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.feat</method>
      <method>method.segm</method>
      <method>method.blob</method>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>dyn_threshold</operator>
      <operator>erosion_circle</operator>
      <operator>gen_rectangle1</operator>
      <operator>get_domain</operator>
      <operator>inner_rectangle1</operator>
      <operator>mean_image</operator>
      <operator>union1</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>inpainting_aniso.hdev</name>
      <desc>ステレオ再構築で生成された距離画像の隙間の穴埋め ( Fill up unreconstructed areas in a distance image created by stereo reconstruction )</desc>
      <path>hdevelop/Filters/Inpainting/</path>
      <industry>industry.semicon</industry>
      <industry>industry.electr</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.filter.general</method>
      <operator>binocular_distance</operator>
      <operator>clip_region</operator>
      <operator>complement</operator>
      <operator>emphasize</operator>
      <operator>full_domain</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>get_domain</operator>
      <operator>harmonic_interpolation</operator>
      <operator>inpainting_aniso</operator>
      <operator>map_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>inpainting_ced.hdev</name>
      <desc>ステレオ再構築で生成された距離画像の隙間の穴埋め ( Fill up unreconstructed areas in a distance image created by stereo reconstruction )</desc>
      <path>hdevelop/Filters/Inpainting/</path>
      <industry>industry.semicon</industry>
      <industry>industry.electr</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.filter.general</method>
      <operator>binocular_distance</operator>
      <operator>clip_region</operator>
      <operator>complement</operator>
      <operator>emphasize</operator>
      <operator>full_domain</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>get_domain</operator>
      <operator>harmonic_interpolation</operator>
      <operator>inpainting_ced</operator>
      <operator>map_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>inpainting_ct.hdev</name>
      <desc>山猫の画像からフェンス部分を除去 ( Remove the fence in an image of a lynx )</desc>
      <path>hdevelop/Filters/Inpainting/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>inpainting_ct</operator>
      <operator>read_region</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>inpainting_mcf.hdev</name>
      <desc>ステレオ再構築で生成された距離画像の隙間の穴埋め ( Fill up unreconstructed areas in a distance image created by stereo reconstruction )</desc>
      <path>hdevelop/Filters/Inpainting/</path>
      <industry>industry.semicon</industry>
      <industry>industry.electr</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.filter.general</method>
      <operator>binocular_distance</operator>
      <operator>clip_region</operator>
      <operator>complement</operator>
      <operator>emphasize</operator>
      <operator>full_domain</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>get_domain</operator>
      <operator>harmonic_interpolation</operator>
      <operator>inpainting_mcf</operator>
      <operator>map_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>inpainting_texture.hdev</name>
      <desc>テクスチャの塗りつぶしによる不要な物体の除去 ( Remove unwanted objects from an image by texture inpainting )</desc>
      <path>hdevelop/Filters/Inpainting/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>decompose3</operator>
      <operator>dilation_circle</operator>
      <operator>inpainting_texture</operator>
      <operator>opening_circle</operator>
      <operator>trans_from_rgb</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>inspect_bga.hdev</name>
      <desc>BGAのはんだボールの欠損・ズレを検査 ( Inspect BGA for missing or deviating balls )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_point_2d</operator>
      <operator>area_center_gray</operator>
      <operator>dilation_rectangle1</operator>
      <operator>disp_cross</operator>
      <operator>distance_pp</operator>
      <operator>elliptic_axis_gray</operator>
      <operator>fast_threshold</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_region_points</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>smallest_rectangle2</operator>
      <operator>vector_to_rigid</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>inspect_bottle_mouth.hdev</name>
      <desc>瓶口の欠陥検査 ( Check bottle mouths for defects )</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.food</industry>
      <industry>industry.glass</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>auto_threshold</operator>
      <operator>boundary</operator>
      <operator>dyn_threshold</operator>
      <operator>edges_sub_pix</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>length_xld</operator>
      <operator>mirror_region</operator>
      <operator>polar_trans_image</operator>
      <operator>polar_trans_region_inv</operator>
      <operator>union_cocircular_contours_xld</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>inspect_gasket_local_deformable.hdev</name>
      <desc>ガスケットの検出と検査 ( Find and inspect a gasket )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.auto</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.inspect.complete</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.ldeform</method>
      <method>method.varmodel</method>
      <operator>clear_deformable_model</operator>
      <operator>clear_variation_model</operator>
      <operator>compare_variation_model</operator>
      <operator>create_local_deformable_model</operator>
      <operator>create_variation_model</operator>
      <operator>find_local_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>prepare_direct_variation_model</operator>
      <operator>vector_field_to_real</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>inspect_harddisk_temperature.hdev</name>
      <desc>赤外線画像からのハードディスクの熱放射測定 ( Determine heat emission of a harddisc from an infrared image )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>intensity</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>inspect_scanlines.hdev</name>
      <desc>バーコードのスキャンラインの確認 ( Inspect scanlines of bar codes )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_object</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>inspect_shampoo_label.hdev</name>
      <desc>シャンプーボトル上のラベルの位置の検査 ( Check the position of a label on a shampoo bottle )</desc>
      <path>hdevelop/Applications/Alignment/</path>
      <industry>industry.pack</industry>
      <applarea>applarea.alignment</applarea>
      <applarea>applarea.inspect.print</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.regionproc</method>
      <method>method.match.shape</method>
      <operator>add_channels</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <operator>find_shape_models</operator>
      <operator>get_shape_model_contours</operator>
      <operator>inspect_shape_model</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>inspect_solar_fingers.hdev</name>
      <desc>Extract broken fingers on solar cells</desc>
      <path>hdevelop/Applications/Completeness-Check/</path>
      <industry>industry.solar</industry>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>erosion_rectangle1</operator>
      <operator>select_shape</operator>
      <operator>threshold</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>inspecta.hdev</name>
      <desc>Mikrotron INSPECTAフレームグラバーの使用 (性能評価) (Use a Mikrotron INSPECTA frame grabber board (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.1</newinversion>
   </example>
   <example>
      <name>inspecta5.hdev</name>
      <desc>Mikrotron社製画像入力ボードINSPECTA5を用いた画像取り込み(性能評価) ( Use a Mikrotron INSPECTA5 frame grabber board (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>inspecta5_parameters.hdev</name>
      <desc>Mikrotron INSPECTA5フレームグラバーの使用 (パラメーター設定の確認) (Use a Mikrotron INSPECTA5 frame grabber board (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>inspecta5_simple.hdev</name>
      <desc>Mikrotron INSPECTA5フレームグラバーの使用 (シンプル) (Use a Mikrotron INSPECTA5 frame grabber board (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>inspecta5_trigger.hdev</name>
      <desc>Mikrotron INSPECTA5フレームグラバを使用 (外部トリガ) (Use a Mikrotron INSPECTA5 frame grabber board (external trigger))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>inspecta_2parallel.hdev</name>
      <desc>Mikrotron INSPECTA フレームグラバーを2カメラで使用 (並列入力) (Use a Mikrotron INSPECTA frame grabber board with two cameras (parallel input))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>decompose2</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>set_part</operator>
      <newinversion>6.0.1</newinversion>
   </example>
   <example>
      <name>inspecta_2ports.hdev</name>
      <desc>Mikrotron INSPECTAフレームグラバーの使用 (カメラ2台、ポートスイッチング) (Use a Mikrotron INSPECTA frame grabber board with two cameras (port switching))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>set_part</operator>
      <newinversion>6.0.1</newinversion>
   </example>
   <example>
      <name>inspecta_parameters.hdev</name>
      <desc>Mikrotron INSPECTAフレームグラバーを使用 (パラメーター設定の取得) (Use a Mikrotron INSPECTA frame grabber board (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>inspecta_simple.hdev</name>
      <desc>Mikrotron INSPECTAフレームグラバーを使用 (simple) (Use a Mikrotron INSPECTA frame grabber board (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.1</newinversion>
   </example>
   <example>
      <name>intensity.hdev</name>
      <desc>領域内の平均輝度値と分散値の算出 ( Calculate the mean gray value and the deviation within a region )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>intensity</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>interest_points_comparison.hdev</name>
      <desc>異なる特徴点抽出アルゴリズムの結果比較 ( Compare the result of different point operators )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <operator>overpaint_region</operator>
      <operator>points_foerstner</operator>
      <operator>points_harris</operator>
      <operator>points_harris_binomial</operator>
      <operator>points_lepetit</operator>
      <operator>points_sojka</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>interjacent.hdev</name>
      <desc>与えられた領域で画像プレーンを分割 ( Partition the image plane using given regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <method>method.visual</method>
      <method>method.regionproc</method>
      <operator>interjacent</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>intersect_lines_of_sight.hdev</name>
      <desc>三角測量による3次元情報の構築 ( Reconstruct 3D information by intersecting lines of sight )</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.geom</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>affine_trans_point_3d</operator>
      <operator>caltab_points</operator>
      <operator>create_pose</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>intersect_lines_of_sight</operator>
      <operator>map_image</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>sim_caltab</operator>
      <operator>tuple_sub</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>intersect_lines_of_sight_targets.hdev</name>
      <desc>ステレオビジョンによるワークピースの高さ計測 ( Measure the height of a workpiece using a stereo setup )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.edgeextr</method>
      <method>method.stereo</method>
      <operator>critical_points_sub_pix</operator>
      <operator>intersect_lines_of_sight</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>intersection_closed_contours_xld.hdev</name>
      <desc>intersection_closed_contours_xldの使用方法 ( Demonstrate the use of intersection_closed_contours_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>intersection_closed_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>intersection_closed_polygons_xld.hdev</name>
      <desc>intersection_closed_polygons_xldの使用方法 ( Demonstrate the use of intersection_closed_polygons_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>gen_polygons_xld</operator>
      <operator>intersection_closed_polygons_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>intersection_ll.hdev</name>
      <desc>二つの直線の交点の算出 ( Calculate the intersection point of two lines )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>intersection_ll</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>invert_funct_1d.hdev</name>
      <desc>1D関数を反転し結果を検証 ( Invert a 1D function and compare the result with the analytical inverse )</desc>
      <path>hdevelop/Tools/Function/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.funct1d</method>
      <method>method.tuple</method>
      <operator>create_funct_1d_pairs</operator>
      <operator>funct_1d_to_pairs</operator>
      <operator>get_window_extents</operator>
      <operator>invert_funct_1d</operator>
      <operator>x_range_funct_1d</operator>
      <operator>y_range_funct_1d</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>isotropic_diffusion.hdev</name>
      <desc>等方性拡散を用いた画像のスムージング ( Smooth an image using isotropic diffusion )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>isotropic_diffusion</operator>
      <operator>reduce_domain</operator>
      <operator>smooth_image</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>junction_skeleton.hdev</name>
      <desc>スケルトンを接合点で分割 ( Split a skeleton at junction points )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.morphol</method>
      <operator>dyn_threshold</operator>
      <operator>junctions_skeleton</operator>
      <operator>mean_image</operator>
      <operator>opening_rectangle1</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>kirsch_amp.hdev</name>
      <desc>Kirschオペレーターを用いたエッジ（強度）の抽出 ( Extract edges (amplitude) using the Kirsch operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>kirsch_amp</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>kirsch_dir.hdev</name>
      <desc>Kirschオペレーターを用いたエッジ（強度と方向）の抽出 ( Extract edges (amplitude and direction) using the Kirsch operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>kirsch_dir</operator>
      <operator>nonmax_suppression_dir</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>label_to_region.hdev</name>
      <desc>等しいグレイ値をもつ領域を抽出(領域のラベルづけ) ( Extract regions with equal gray values (labelled region) )</desc>
      <path>hdevelop/Regions/Creation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.regionproc</method>
      <operator>label_to_region</operator>
      <operator>scale_image</operator>
      <operator>union1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>label_word_process_mlp.hdev</name>
      <desc>結果向上のために正規表現を利用した賞味期限ラベルの読取 ( Read a best-before label using a lexicon to improve results )</desc>
      <path>hdevelop/OCR/Neural-Nets/</path>
      <industry>industry.food</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.blob</method>
      <method>method.trafo.align</method>
      <method>method.roi</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_region</operator>
      <operator>area_center</operator>
      <operator>clear_lexicon</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>connection</operator>
      <operator>create_lexicon</operator>
      <operator>dev_set_color</operator>
      <operator>dev_set_colored</operator>
      <operator>do_ocr_word_mlp</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>move_region</operator>
      <operator>opening_circle</operator>
      <operator>partition_dynamic</operator>
      <operator>read_image</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape</operator>
      <operator>shape_trans</operator>
      <operator>smallest_rectangle1</operator>
      <operator>sort_region</operator>
      <operator>text_line_orientation</operator>
      <operator>threshold</operator>
      <operator>var_threshold</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>laplace.hdev</name>
      <desc>Laplaceオペレーターを用いたエッジ抽出 ( Extract edges using the Laplace Operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>laplace</operator>
      <operator>laplace_of_gauss</operator>
      <operator>zero_crossing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>laplace_of_gauss.hdev</name>
      <desc>LoGオペレーターを用いたエッジ抽出 ( Extract edges using the LoG operator (Laplace of Gaussian) )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>derivate_gauss</operator>
      <operator>diff_of_gauss</operator>
      <operator>laplace_of_gauss</operator>
      <operator>zero_crossing</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>lens_distortions.hdev</name>
      <desc>歪みを持つ画像から抽出されたXLDの歪み補正 ( Eliminate distortions of edges extracted from a distorted image )</desc>
      <path>hdevelop/Calibration/Rectification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.rectif</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_contours_xld</operator>
      <operator>edges_sub_pix</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>letter.hdev</name>
      <desc>対話形式で指定した印刷文字の読み取り ( Read printed characters with interactive selection )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.visual</method>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>dev_set_shape</operator>
      <operator>dilation_circle</operator>
      <operator>do_ocr_single_class_mlp</operator>
      <operator>get_mbutton</operator>
      <operator>get_region_index</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>sort_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>letters_mlp.hdev</name>
      <desc>MLP OCRのトレーニングとトレーニングサンプルの再分類 ( Train an MLP OCR classifier and reclassifiy the training samples )</desc>
      <path>hdevelop/OCR/Neural-Nets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.classif</method>
      <method>method.segm</method>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>delete_file</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>file_exists</operator>
      <operator>intersection</operator>
      <operator>read_ocr_trainf_names</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_trainf</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>letters_svm.hdev</name>
      <desc>SVM OCRのトレーニングとトレーニングデータの再分類 ( Compare the recognition rates and the training and classification speeds of the SVM and MLP OCR classifiers )</desc>
      <path>hdevelop/OCR/Support-Vector-Machines/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.classif</method>
      <method>method.blob</method>
      <operator>area_center</operator>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_svm</operator>
      <operator>connection</operator>
      <operator>create_ocr_class_svm</operator>
      <operator>delete_file</operator>
      <operator>dilation_circle</operator>
      <operator>do_ocr_multi_class_svm</operator>
      <operator>file_exists</operator>
      <operator>intersection</operator>
      <operator>read_ocr_trainf_names</operator>
      <operator>set_tposition</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_svm</operator>
      <operator>write_ocr_trainf</operator>
      <operator>write_string</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>lettert.hdev</name>
      <desc>印刷文字の読み取りのためのトレーニングおよび分類 ( Train printed characters and reclassify them )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.error</method>
      <operator>append_ocr_trainf</operator>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>copy_obj</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>delete_file</operator>
      <operator>dev_set_shape</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_class_mlp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>leutron.hdev</name>
      <desc>Leutron Picport Stereo H4Dボードの使用 (ベンチマークテスト) (Use a Leutron Picport Stereo H4D board (benchmark test))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>leutron_2cameras.hdev</name>
      <desc>Leutron Picport Stereo H4Dボードの使用 (カメラ2台使用) (Use a Leutron Picport Stereo H4D board with two cameras)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>leutron_trigger.hdev</name>
      <desc>Leutron Picport Stereo H4Sボードを外部トリガで使用 (Use a Leutron Picport Stereo H4S board with external trigger)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>lexicon.hdev</name>
      <desc>正規表現の使用方法 ( Demonstrate the use of lexica )</desc>
      <path>hdevelop/OCR/Lexica/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.lexica</method>
      <operator>clear_lexicon</operator>
      <operator>create_lexicon</operator>
      <operator>inspect_lexicon</operator>
      <operator>lookup_lexicon</operator>
      <operator>suggest_lexicon</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>line_scan.hdev</name>
      <desc>ラインセンサカメラから画像を取得し画像と抽出した領域を画像間で結合 ( Simulate grabbing from a line scan camera and merge images and extracted regions )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <method>method.blob</method>
      <method>method.feat</method>
      <method>method.regionproc</method>
      <operator>add_channels</operator>
      <operator>close_framegrabber</operator>
      <operator>copy_obj</operator>
      <operator>crop_part</operator>
      <operator>gen_empty_region</operator>
      <operator>gen_image_const</operator>
      <operator>grab_image</operator>
      <operator>merge_regions_line_scan</operator>
      <operator>move_region</operator>
      <operator>open_framegrabber</operator>
      <operator>orientation_region</operator>
      <operator>tile_images_offset</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>line_scan_calibration.hdev</name>
      <desc>ラインスキャンカメラからの画像に対するカメラキャリブレーションの使用例 ( Show the use of camera calibration with line scan images )</desc>
      <path>hdevelop/Calibration/Monocular/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.io</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>disp_caltab</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>lines_color.hdev</name>
      <desc>カラー情報を使用したラインの抽出 ( Extract lines using color information )</desc>
      <path>hdevelop/Filters/Lines/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.color</method>
      <method>method.visual</method>
      <operator>assign</operator>
      <operator>concat_obj</operator>
      <operator>count_obj</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_empty_obj</operator>
      <operator>get_contour_attrib_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>lines_color</operator>
      <operator>lines_gauss</operator>
      <operator>rgb1_to_gray</operator>
      <operator>select_contours_xld</operator>
      <operator>select_obj</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>lines_facet.hdev</name>
      <desc>ファセットモデルを用いたラインの抽出 ( Extract lines using the facet model )</desc>
      <path>hdevelop/Filters/Lines/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <operator>lines_facet</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>lines_gauss.hdev</name>
      <desc>ラインとその幅の抽出 ( Extract lines and their widths )</desc>
      <path>hdevelop/Filters/Lines/</path>
      <industry>industry.general</industry>
      <industry>industry.health</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>assign</operator>
      <operator>count_obj</operator>
      <operator>disp_polygon</operator>
      <operator>get_contour_attrib_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>lines_gauss</operator>
      <operator>select_obj</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>linx.hdev</name>
      <desc>リンクス画像入力ボードを使用した画像取り込み(性能評価) ( Grab images from a LinX frame grabber board (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>linx_2boards.hdev</name>
      <desc>リンクス画像入力ボード2枚からの画像取り込み (Grab images from two LinX frame grabber boards)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>linx_2ports.hdev</name>
      <desc>リンクス画像入力ボードの使用 (カメラ2台、ポート切り替え) (Use a LinX frame grabber board with two cameras (port switching))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>linx_2simultaneous.hdev</name>
      <desc>リンクス画像入力ボードを用いた同時画像取り込み ( Grab images simultaneously from a LinX frame grabber board )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>linx_cont.hdev</name>
      <desc>リンクス画像入力ボードを用いた画像入力(continious grabbingモード) ( Parameterize a LinX frame grabber board (continuous grabbing) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>linx_simple.hdev</name>
      <desc>リンクス銀河画像入力ボードからの画像取り込み (シンプル) (Grab images from a LinX frame grabber board (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>list_files.hdev</name>
      <desc>ディレクトリ内のすべてのファイルを一覧表示する ( List all files within a directory )</desc>
      <path>hdevelop/File/Misc/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <method>method.opsys</method>
      <operator>get_system</operator>
      <operator>list_files</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>local_max.hdev</name>
      <desc>画像内の極大を持つ領域を抽出 ( Detect local maxima in an image )</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>get_system</operator>
      <operator>local_max</operator>
      <operator>set_system</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>local_max_sub_pix.hdev</name>
      <desc>サブピクセル精度での極大点の抽出 （ Detect local maxima with subpixel accuracy ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <method>method.visual</method>
      <operator>corner_response</operator>
      <operator>local_max_sub_pix</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>local_min.hdev</name>
      <desc>画像内の極小と極大を持つ領域を抽出 （ Detect local minima and maxima in an image ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>get_system</operator>
      <operator>invert_image</operator>
      <operator>local_max</operator>
      <operator>local_min</operator>
      <operator>set_system</operator>
      <operator>symm_difference</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>locate_car_door.hdev</name>
      <desc>可変形状ベース透視歪マッチングによる自動車のドア位置検出 ( Locate a car door using perspective, deformable matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-3D/</path>
      <industry>industry.auto</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.calib</method>
      <method>method.match.deform</method>
      <method>method.trafo.geom</method>
      <method>method.poseestim</method>
      <method>method.tuple</method>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>clear_deformable_model</operator>
      <operator>contour_to_world_plane_xld</operator>
      <operator>create_planar_calib_deformable_model</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>find_planar_calib_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>get_deformable_model_params</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>locate_cookie_box.hdev</name>
      <desc>特徴点マッチングを利用してのクッキーボックスの位置検出 ( Locate a cookie box using descriptor-based matching )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.food</industry>
      <industry>industry.pack</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.descr</method>
      <method>method.poseestim</method>
      <method>method.trafo.geom</method>
      <operator>clear_descriptor_model</operator>
      <operator>close_contours_xld</operator>
      <operator>create_calib_descriptor_model</operator>
      <operator>find_calib_descriptor_model</operator>
      <operator>get_descriptor_model_points</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>read_descriptor_model</operator>
      <operator>vector_to_pose</operator>
      <operator>write_descriptor_model</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>locate_cookie_box_multiple_models.hdev</name>
      <desc>特徴点マッチングを利用しての複数個のクッキーボックスの位置検出 ( Locate cookie boxes using descriptor-based matching )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.descr</method>
      <method>method.poseestim</method>
      <operator>clear_descriptor_model</operator>
      <operator>create_calib_descriptor_model</operator>
      <operator>find_calib_descriptor_model</operator>
      <operator>get_descriptor_model_points</operator>
      <operator>image_points_to_world_plane</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>locate_cylinder_3d.hdev</name>
      <desc>ステレオビジョンと3Dマッチングの組み合わせによるバラ積みされた中から一番高い位置にあるシリンダーを検出 ( Find the highest cylinder in a heap by combining stereo and 3D matching )</desc>
      <path>hdevelop/Applications/Object-Recognition-3D/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object3d</applarea>
      <method>method.stereo</method>
      <method>method.match3d.shape</method>
      <method>method.tuple</method>
      <operator>binocular_disparity</operator>
      <operator>clear_object_model_3d</operator>
      <operator>clear_shape_model_3d</operator>
      <operator>create_shape_model_3d</operator>
      <operator>find_shape_model_3d</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>get_shape_model_3d_params</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>prepare_object_model_3d</operator>
      <operator>project_3d_point</operator>
      <operator>project_shape_model_3d</operator>
      <operator>read_object_model_3d</operator>
      <operator>read_shape_model_3d</operator>
      <operator>regiongrowing_n</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>locate_engine_parts.hdev</name>
      <desc>可変形状ベース透視歪マッチングによるエンジン部品の位置検出 ( Locate an engine part using perspective, deformable matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-3D/</path>
      <industry>industry.auto</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.blob</method>
      <method>method.match.deform</method>
      <method>method.poseestim</method>
      <method>method.trafo.geom</method>
      <method>method.tuple</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>clear_deformable_model</operator>
      <operator>contour_to_world_plane_xld</operator>
      <operator>create_planar_calib_deformable_model</operator>
      <operator>find_planar_calib_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>get_deformable_model_params</operator>
      <operator>vector_to_pose</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>locate_pipe_joints_stereo.hdev</name>
      <desc>マルチビューステレオとサーフェスマッチングを用いて継ぎ手パイプの位置を検出 ( Locate pipe joints using multi-view stereo and surface-based 3D matching )</desc>
      <path>hdevelop/Applications/Robot-Vision/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object3d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <applarea>applarea.robotvis</applarea>
      <method>method.match3d.surface</method>
      <method>method.poseestim</method>
      <method>method.stereo.multi</method>
      <operator>affine_trans_object_model_3d</operator>
      <operator>clear_camera_setup_model</operator>
      <operator>clear_object_model_3d</operator>
      <operator>clear_stereo_model</operator>
      <operator>clear_surface_model</operator>
      <operator>convert_pose_type</operator>
      <operator>create_camera_setup_model</operator>
      <operator>create_stereo_model</operator>
      <operator>create_surface_model</operator>
      <operator>find_surface_model</operator>
      <operator>get_camera_setup_param</operator>
      <operator>get_object_model_3d_params</operator>
      <operator>global</operator>
      <operator>prepare_object_model_3d</operator>
      <operator>project_object_model_3d</operator>
      <operator>read_camera_setup_model</operator>
      <operator>read_object_model_3d</operator>
      <operator>reconstruct_surface_stereo</operator>
      <operator>set_camera_setup_cam_param</operator>
      <operator>set_stereo_model_image_pairs</operator>
      <operator>set_stereo_model_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>lowlands.hdev</name>
      <desc>グレイ値の高地領域と低地領域を抽出 （ Detect gray value plateus and lowlands ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>invert_image</operator>
      <operator>lowlands</operator>
      <operator>plateaus</operator>
      <operator>smooth_image</operator>
      <operator>symm_difference</operator>
      <operator>union1</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>lowlands_center.hdev</name>
      <desc>グレイ値の高地領域と低地領域の中心を抽出（ Detect centers of gray value plateaus and lowlands ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>invert_image</operator>
      <operator>lowlands_center</operator>
      <operator>plateaus_center</operator>
      <operator>smooth_image</operator>
      <operator>symm_difference</operator>
      <operator>union1</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>lps36_parameters.hdev</name>
      <desc>Query parameter settings from an LPS36 interface</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>lps36_simple.hdev</name>
      <desc>Grab images from an LPS36 interface</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_data</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>lucam_2cameras.hdev</name>
      <desc>2台のLumenera USBカメラから画像取り込み ( Grab images from two Lumenera USB cameras )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>lucam_crop.hdev</name>
      <desc>Lumenera社製USBカメラを用いた画像取り込み(画像の切り出し) ( Grab images from Lumenera USB cameras (image cropping) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>lucam_parameters.hdev</name>
      <desc>Lumenera USBカメラからの画像取り込み (パラメーター設定の確認) (Grab images from Lumenera USB cameras (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>lucam_simple.hdev</name>
      <desc>Lumenera USBカメラの適用 ( Use a Lumenera USB camera (simple) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>lut_trans.hdev</name>
      <desc>ルックアップテーブルを用いたグレイ値変換 ( Transform gray values using a lookup table )</desc>
      <path>hdevelop/Filters/Misc/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>lut_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>map_image.hdev</name>
      <desc>画像に対する一般的な変換の適用 ( Apply a general transformation to an image )</desc>
      <path>hdevelop/Filters/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.error</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.rectif</method>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>get_mposition</operator>
      <operator>map_image</operator>
      <operator>set_origin_pose</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>match_function_trans.hdev</name>
      <desc>二つの関数間の変換パラメータの算出 ( Calculate transformation parameters between two functions )</desc>
      <path>hdevelop/Tools/Function/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.funct1d</method>
      <method>method.numeric</method>
      <method>method.tuple</method>
      <operator>create_funct_1d_array</operator>
      <operator>create_funct_1d_pairs</operator>
      <operator>for</operator>
      <operator>match_funct_1d_trans</operator>
      <operator>sample_funct_1d</operator>
      <operator>transform_funct_1d</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>match_function_trans_plot.hdev</name>
      <desc>二つの関数間のパラメータ変換を計算し結果をプロット ( Calculate transformation parameters between two functions and plot results (gnuplot) )</desc>
      <path>hdevelop/Tools/Function/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.funct1d</method>
      <method>method.tuple</method>
      <method>method.numeric</method>
      <method>method.visual</method>
      <operator>create_funct_1d_array</operator>
      <operator>create_funct_1d_pairs</operator>
      <operator>gnuplot_close</operator>
      <operator>gnuplot_open_file</operator>
      <operator>gnuplot_plot_funct_1d</operator>
      <operator>match_funct_1d_trans</operator>
      <operator>sample_funct_1d</operator>
      <operator>transform_funct_1d</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>match_function_trans_time.hdev</name>
      <desc>二つの関数間の変換パラメータ算出時間の計測 ( Measure time to calculate transformation parameters between two functions )</desc>
      <path>hdevelop/Tools/Function/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.funct1d</method>
      <method>method.numeric</method>
      <method>method.tuple</method>
      <operator>count_seconds</operator>
      <operator>create_funct_1d_array</operator>
      <operator>create_funct_1d_pairs</operator>
      <operator>match_funct_1d_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>matching_coins.hdev</name>
      <desc>形状ベースパターンマッチングによりコインを識別 ( Distinguish coins using shape-based matching )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_models</operator>
      <operator>get_shape_model_contours</operator>
      <operator>select_shape_std</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>matching_defocused_pcb.hdev</name>
      <desc>焦点が合っていない画像におけるPCB位置検出 ( Determine the position of a PCB in defocused images )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <operator>clear_shape_model</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>matching_deformed_bulb.hdev</name>
      <desc>対象の変形にロバストなトレランスモードを使用したハロゲンバルブのリード位置検出 ( Locate leads of halogen bulbs with increased tolerance regarding deformations )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.tuple</method>
      <method>method.regexp</method>
      <operator>continue</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <operator>tuple_regexp_select</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>matching_green_dot.hdev</name>
      <desc>スケール変化と回転を考慮した形状ベースパターンマッチング ( Find scaled and rotated shape models )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>find_scaled_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>read_shape_model</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>matching_image_border.hdev</name>
      <desc>画像の境界を越えたものも含む複数のダイの位置決め ( Locate multiple dies even if they extend beyond the image border )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>create_shape_model</operator>
      <operator>dev_update_pc</operator>
      <operator>dev_update_var</operator>
      <operator>dev_update_window</operator>
      <operator>find_shape_models</operator>
      <operator>gen_rectangle1</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>read_image</operator>
      <operator>set_system</operator>
      <operator>tuple_gen_const</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>matching_multi_channel_clamp.hdev</name>
      <desc>複数チャンネル形状ベースマッチングを用いて山積みされたクランプから最上部の対象位置を検出 ( Locate upper clamp from a pile using color shape-based matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.synth</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.color</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_all_shape_models</operator>
      <operator>copy_obj</operator>
      <operator>create_aniso_shape_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_aniso_shape_models</operator>
      <operator>get_draw</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>matching_multi_channel_yogurt.hdev</name>
      <desc>カラーマッチングを用いた味の異なるヨーグルトの検出 ( Find yogurts of different flavors using color shape-based matching )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.color</method>
      <method>method.blob</method>
      <method>method.xld</method>
      <method>method.roi</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>create_shape_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>fast_threshold</operator>
      <operator>fill_up</operator>
      <operator>find_shape_models</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_circle</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>get_draw</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>opening_circle</operator>
      <operator>read_image</operator>
      <operator>tuple_find</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>matrixvisionacquire.hdev</name>
      <desc>MatrixAcquireインターフェースを使用した画像取り込み(性能評価) ( Grab images with the MatrixVisionAcquire interface (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>gen_struct_elements</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>matrixvisionacquire_crop.hdev</name>
      <desc>MatrixVisionAcquireインターフェースを用いた画像撮り込み (AOIを設定) (Grab images with the MatrixVisionAcquire interface (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>matrixvisionacquire_multiple_instances.hdev</name>
      <desc>MatrixVisionAcquireインターフェースを用いた画像撮り込み (異なるパラメーター設定の2つのハンドルから1台のカメラへアクセス) (Grab images with the MatrixVisionAcquire interface (two handles to one camera with different parameter sets))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>matrixvisionacquire_parameters.hdev</name>
      <desc>MatrixVisionAcquireインターフェースによる画像取り込みとパラメーター設定参照 ( Grab images with the MatrixVisionAcquire interface (query parameter settings) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>matrixvisionacquire_properties.hdev</name>
      <desc>MatrixVisionAcquireインターフェースを用いた画像取り込み（パラメーター取得と露光時間変更） (Set parameters and grab images with the MatrixVisionAcquire interface (using different parameters and varying exposure time))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>matrixvisionacquire_simple.hdev</name>
      <desc>MatrixVisionAcquireインターフェースの使用 (シンプル) (Use the MatrixVisionAcquire interface (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>max_connection.hdev</name>
      <desc>connectionオペレータによって返される領域数の制限 ( Limit the number of regions returned by the connection operator )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.blob</method>
      <operator>connection</operator>
      <operator>get_system</operator>
      <operator>set_system</operator>
      <newinversion>6.0.1</newinversion>
   </example>
   <example>
      <name>max_image.hdev</name>
      <desc>二つの画像のピクセル同士の最大値の算出 ( Calculate the maximum of two images pixel by pixel )</desc>
      <path>hdevelop/Filters/Arithmetic/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>crop_part</operator>
      <operator>max_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>mean_curvature_flow.hdev</name>
      <desc>mean curvature flowを用いた血管造影画像の強調 ( Enhance an angiographic image using the mean curvature flow )</desc>
      <path>hdevelop/Filters/Enhancement/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>mean_curvature_flow</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>measure_arc.hdev</name>
      <desc>円弧に沿った金属部品の幅計測 ( Measure the width of a metal part along a circular arc )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.metal</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.visual</method>
      <operator>close_measure</operator>
      <operator>disp_arc</operator>
      <operator>disp_line</operator>
      <operator>distance_pp</operator>
      <operator>gen_measure_arc</operator>
      <operator>get_points_ellipse</operator>
      <operator>measure_pos</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>measure_ball_bond.hdev</name>
      <desc>パッド上のボールボンド位置の検査 ( Inspect the position of ball bonds on a pad )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.segm</method>
      <method>method.xld</method>
      <operator>area_center_xld</operator>
      <operator>boundary</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>union_adjacent_contours_xld</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>measure_bga_dff.hdev</name>
      <desc>BGA上のはんだボールの高さ形状復元 ( Reconstruct the height of a solder ball on a BGA )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.dff</method>
      <method>method.image</method>
      <operator>channels_to_image</operator>
      <operator>depth_from_focus</operator>
      <operator>select_grayvalues_from_channels</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>measure_caliper.hdev</name>
      <desc>カリパス(caliper)の線のピッチを計測 ( Measure the distance between the pitch lines of a caliper )</desc>
      <path>solution_guide/1d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.trafo.wcoord</method>
      <method>method.metrol</method>
      <method>method.funct1d</method>
      <operator>close_measure</operator>
      <operator>create_funct_1d_array</operator>
      <operator>derivate_funct_1d</operator>
      <operator>distance_pp</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>get_y_value_funct_1d</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>measure_projection</operator>
      <operator>rotate_image</operator>
      <operator>set_tposition</operator>
      <operator>smooth_funct_1d_gauss</operator>
      <operator>write_string</operator>
      <operator>zero_crossings_funct_1d</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>measure_chip.hdev</name>
      <desc>矩形チップの大きさと位置の計測 ( Get extents and positions of rectangular chip components )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>boundary</operator>
      <operator>dilation_rectangle1</operator>
      <operator>distance_pp</operator>
      <operator>edges_sub_pix</operator>
      <operator>fast_threshold</operator>
      <operator>fit_rectangle2_contour_xld</operator>
      <operator>gen_rectangle2</operator>
      <operator>gen_rectangle2_contour_xld</operator>
      <operator>opening_rectangle1</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>select_shape</operator>
      <operator>smallest_rectangle2</operator>
      <operator>threshold_sub_pix</operator>
      <operator>union_adjacent_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_circles.hdev</name>
      <desc>円形状エッジの半径と位置を計測 ( Get radii and positions of circular shapes )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <method>method.geom</method>
      <operator>boundary</operator>
      <operator>dilation_circle</operator>
      <operator>disp_arrow</operator>
      <operator>distance_pp</operator>
      <operator>edges_sub_pix</operator>
      <operator>fast_threshold</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>union1</operator>
      <operator>union_cocircular_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_circuit_width_lines_gauss.hdev</name>
      <desc>PCBパターンの幅計測 ( Measure the width of pcb tracks )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.segm</method>
      <method>method.xld</method>
      <method>method.morphol</method>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>gen_region_points</operator>
      <operator>get_contour_attrib_xld</operator>
      <operator>lines_gauss</operator>
      <operator>select_shape_xld</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>measure_diamond.hdev</name>
      <desc>ダイヤモンドの検査 ( Inspect a diamond )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.glass</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.segm</method>
      <method>method.regionproc</method>
      <method>method.xld</method>
      <method>method.morphol</method>
      <operator>clip_region_rel</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>intersection_ll</operator>
      <operator>select_contours_xld</operator>
      <operator>shape_trans</operator>
      <operator>union_collinear_contours_xld</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>measure_fill_level.hdev</name>
      <desc>アンプルの充填度の検査 ( Inspect the fill level of ampoules )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.pharm</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.alignment</applarea>
      <method>method.match.shape</method>
      <method>method.metrol</method>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>measure_pos</operator>
      <operator>translate_measure</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>measure_grid.hdev</name>
      <desc>キーボード上のグリッド交差ポイントの検出 ( Get junctions of a grid that separates keys )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.geom</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <method>method.geom</method>
      <operator>assign</operator>
      <operator>closing_circle</operator>
      <operator>concat_obj</operator>
      <operator>count_obj</operator>
      <operator>distance_ps</operator>
      <operator>dyn_threshold</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>gen_empty_obj</operator>
      <operator>get_contour_xld</operator>
      <operator>get_region_points</operator>
      <operator>intersection_ll</operator>
      <operator>junctions_skeleton</operator>
      <operator>mean_image</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>select_obj</operator>
      <operator>select_shape</operator>
      <operator>skeleton</operator>
      <operator>union_collinear_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_ic_leads.hdev</name>
      <desc>ICのリード計測 ( Measure leads of an IC )</desc>
      <path>solution_guide/1d_measuring/</path>
      <industry>industry.general</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.visual</method>
      <method>method.metrol</method>
      <operator>close_measure</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_rectangle2</operator>
      <operator>measure_pairs</operator>
      <operator>measure_pos</operator>
      <operator>translate_measure</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>measure_lcd_cells.hdev</name>
      <desc>液晶ディスプレイのセルを分割するフレームの寸法計測 ( Measure the dimensions of frames that separate the cells of an LCD display )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.blob</method>
      <method>method.segm</method>
      <method>method.geom</method>
      <operator>close_measure</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>intersection_ll</operator>
      <operator>measure_pairs</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>measure_metal_part.hdev</name>
      <desc>直線・円近似による金属部品検査 ( Inspect metal part by fitting lines and circles )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>distance_pp</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>segment_contours_xld</operator>
      <operator>set_font</operator>
      <operator>sort_contours_xld</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>measure_metal_part_extended.hdev</name>
      <desc>ネジの様々な形状特徴計測 ( Measure several features of a screw )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.geom</method>
      <method>method.filter.points</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <method>method.geom</method>
      <operator>angle_ll</operator>
      <operator>area_center</operator>
      <operator>area_center_xld</operator>
      <operator>assign</operator>
      <operator>boundary</operator>
      <operator>concat_obj</operator>
      <operator>count_obj</operator>
      <operator>disp_cross</operator>
      <operator>disp_line</operator>
      <operator>dist_ellipse_contour_xld</operator>
      <operator>distance_pp</operator>
      <operator>edges_sub_pix</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_empty_obj</operator>
      <operator>gen_parallels_xld</operator>
      <operator>gen_polygons_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>get_parallels_xld</operator>
      <operator>intersection_ll</operator>
      <operator>orientation_region</operator>
      <operator>orientation_xld</operator>
      <operator>points_foerstner</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_obj</operator>
      <operator>smallest_rectangle2</operator>
      <operator>smallest_rectangle2_xld</operator>
      <operator>sort_contours_xld</operator>
      <operator>threshold</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_metal_part_first_example.hdev</name>
      <desc>ネジの様々な形状特徴計測 ( Measure several features of a screw )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <method>method.geom</method>
      <operator>distance_pp</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>orientation_region</operator>
      <operator>segment_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_metal_part_id.hdev</name>
      <desc>金属部品の円形状の欠損・ズレを検査 ( Inspect metal part for missing or deviating circular shapes )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.trafo.align</method>
      <method>method.geom</method>
      <method>method.xld</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_pixel</operator>
      <operator>dilation_rectangle1</operator>
      <operator>distance_pp</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_circle</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_invert</operator>
      <operator>hom_mat2d_slant</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>intersection_ll</operator>
      <operator>orientation_region</operator>
      <operator>read_image</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>sort_contours_xld</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_online.hdev</name>
      <desc>オンラインで取得中の画像中にある対象オブジェクトの計測 ( Measure your object in a live image )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.acqu</method>
      <method>method.visual</method>
      <method>method.metrol</method>
      <operator>close_framegrabber</operator>
      <operator>close_measure</operator>
      <operator>draw_rectangle2</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>grab_image</operator>
      <operator>measure_pos</operator>
      <operator>open_framegrabber</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>measure_pads_subpix.hdev</name>
      <desc>ダイにあるパッドの寸法計測 ( Measure the dimensions of pads on a die )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.regionproc</method>
      <method>method.trafo.geom</method>
      <method>method.segm</method>
      <method>method.xld</method>
      <operator>fit_rectangle2_contour_xld</operator>
      <operator>gen_rectangle2_contour_xld</operator>
      <operator>union_adjacent_contours_xld</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>measure_perspective_scratch.hdev</name>
      <desc>世界座標系（mm単位）でのキズ長さ計測 ( Measure the length of a scratch in world coordinates )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.wcoord</method>
      <method>method.calib</method>
      <method>method.xld</method>
      <operator>area_center_points_xld</operator>
      <operator>calibrate_cameras</operator>
      <operator>create_calib_data</operator>
      <operator>fast_threshold</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>get_calib_data</operator>
      <operator>length_xld</operator>
      <operator>map_image</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>set_origin_pose</operator>
      <operator>skeleton</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_pin.hdev</name>
      <desc>ICのピン計測 ( Measure pins of an IC )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.visual</method>
      <method>method.numeric</method>
      <operator>close_measure</operator>
      <operator>disp_line</operator>
      <operator>disp_rectangle1</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_rectangle2</operator>
      <operator>measure_pairs</operator>
      <operator>measure_pos</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>measure_pump.hdev</name>
      <desc>円の位置と半径の計測 ( Measure positions and radii of circular shapes )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>dilation_circle</operator>
      <operator>dist_ellipse_contour_xld</operator>
      <operator>fast_threshold</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_circle_contour_xld</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_shape</operator>
      <operator>select_shape_xld</operator>
      <operator>shape_trans</operator>
      <operator>sort_contours_xld</operator>
      <operator>threshold_sub_pix</operator>
      <operator>union1</operator>
      <operator>union_cocircular_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_ring.hdev</name>
      <desc>円弧上のエッジ計測オペレーターにより歯車の歯の幅を計測 ( Determine the width of cogs with a circular measure object )</desc>
      <path>solution_guide/1d_measuring/</path>
      <industry>industry.machine</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.blob</method>
      <method>method.geom</method>
      <method>method.visual</method>
      <operator>bin_threshold</operator>
      <operator>close_measure</operator>
      <operator>compactness</operator>
      <operator>distance_pp</operator>
      <operator>gen_measure_arc</operator>
      <operator>get_region_polygon</operator>
      <operator>inner_circle</operator>
      <operator>line_orientation</operator>
      <operator>measure_pairs</operator>
      <operator>smallest_circle</operator>
      <operator>tuple_sort_index</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>measure_screw.hdev</name>
      <desc>ネジの様々な形状特徴計測 ( Measure several features of a screw )</desc>
      <path>solution_guide/2d_measuring/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <method>method.edgeextr</method>
      <method>method.roi</method>
      <method>method.geom</method>
      <method>method.trafo.align</method>
      <method>method.xld</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <method>method.geom</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_region</operator>
      <operator>boundary</operator>
      <operator>clip_contours_xld</operator>
      <operator>closing_circle</operator>
      <operator>derivate_gauss</operator>
      <operator>dev_close_window</operator>
      <operator>dev_open_window</operator>
      <operator>dev_set_part</operator>
      <operator>dev_set_window</operator>
      <operator>disp_cross</operator>
      <operator>distance_pc</operator>
      <operator>distance_pp</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_rectangle1</operator>
      <operator>gen_region_line</operator>
      <operator>get_contour_xld</operator>
      <operator>get_region_runs</operator>
      <operator>orientation_region</operator>
      <operator>projection_pl</operator>
      <operator>reduce_domain</operator>
      <operator>select_contours_xld</operator>
      <operator>set_font</operator>
      <operator>smallest_rectangle1_xld</operator>
      <operator>vector_angle_to_rigid</operator>
      <operator>zero_crossing_sub_pix</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>measure_solder_paste_dff.hdev</name>
      <desc>合焦点法を用いたBGAパッド上のはんだペーストの三次元形状復元 ( Reconstruct the solder paste on a BGA pad )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.dff</method>
      <method>method.image</method>
      <operator>channels_to_image</operator>
      <operator>depth_from_focus</operator>
      <operator>median_rect</operator>
      <operator>select_grayvalues_from_channels</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>measure_switch.hdev</name>
      <desc>スイッチのピン幅と距離を計測 ( Determine the width of and the distance between the pins of a switch )</desc>
      <path>solution_guide/1d_measuring/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.visual</method>
      <operator>close_measure</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>measure_pairs</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>measure_tft_cells.hdev</name>
      <desc>TFT液晶ディスプレイのRGBセルの寸法計測 ( Measure the dimensions of the RGB cells of a TFT LCD display )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.electr</industry>
      <applarea>applarea.alignment</applarea>
      <applarea>applarea.measure.2D</applarea>
      <method>method.metrol</method>
      <method>method.funct1d</method>
      <method>method.blob</method>
      <method>method.segm</method>
      <method>method.tuple</method>
      <method>method.trafo.geom</method>
      <operator>close_measure</operator>
      <operator>create_funct_1d_array</operator>
      <operator>derivate_funct_1d</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>get_y_value_funct_1d</operator>
      <operator>gray_histo</operator>
      <operator>local_min_max_funct_1d</operator>
      <operator>measure_pairs</operator>
      <operator>smooth_funct_1d_gauss</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>median_image.hdev</name>
      <desc>様々なマスク領域を用いたメディアンフィルタの適用 ( Apply a median filter with different mask regions )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <operator>median_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>median_interactive.hdev</name>
      <desc>マウス操作で画像を平滑化 ( Interactively smooth an image )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.roi</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>boundary</operator>
      <operator>dev_set_preferences</operator>
      <operator>gen_circle</operator>
      <operator>get_mposition</operator>
      <operator>median_image</operator>
      <operator>overpaint_gray</operator>
      <operator>set_mshape</operator>
      <operator>set_system</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>median_rect.hdev</name>
      <desc>各種用途に対する長方形マスクを用いたメディアンフィルタの活用 ( Use a median filter with rectangular masks for different purposes )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <method>method.segm</method>
      <operator>dyn_threshold</operator>
      <operator>median_rect</operator>
      <operator>min_max_gray</operator>
      <operator>sub_image</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>millite.hdev</name>
      <desc>Matrox Meteor-II, Helios, Solios, または Odysseyフレームグラバーの使用 (ベンチマークテスト) (Use a Matrox Meteor-II, Helios, Solios, or Odyssey framegrabber (benchmark test))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>millite_1394_parameters.hdev</name>
      <desc>Matrox Meteor-II/1394フレームグラバーを使用 (パラメーター) (Use a Matrox Meteor-II/1394 frame grabber board (parameters))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>millite_2ports.hdev</name>
      <desc>Matrox Meteor-II, Helios, Solios, または Odysseyフレームグラバーの使用 (ポートスイッチング) (Use a Matrox Meteor-II, Helios, Solios, or Odyssey frame grabber board (port switching))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>set_part</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>millite_parameters.hdev</name>
      <desc>MIL-LiteによるMatroxフレームグラバーからのパラメーター設定取得 (Query parameter settings from a Matrox frame grabber board based on MIL-Lite)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>millite_simple.hdev</name>
      <desc>Matrox Meteor-II, Helios, Solios, Odysseyフレームグラバーを使用 (Use a Matrox Meteor-II, Helios, Solios, or Odyssey frame grabber board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>millite_trigger.hdev</name>
      <desc>Matrox Meteor-II, Helios, Solios, Odysseyボードを使用 (外部トリガ) (Use a Matrox Meteor-II, Helios, Solios, or Odyssey board (external trigger))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>wait_seconds</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>min_image.hdev</name>
      <desc>二つの画像のピクセル同士の最小値の算出 ( Calculate the minimum of two images pixel by pixel )</desc>
      <path>hdevelop/Filters/Arithmetic/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>crop_part</operator>
      <operator>min_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>min_max_gray.hdev</name>
      <desc>領域内の最小・最大グレイ値を算出 ( Calculate the minimum and maximum gray values within a region )</desc>
      <path>hdevelop/Image/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>min_max_gray</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>mirror_region.hdev</name>
      <desc>x軸・y軸に対称な領域を生成 ( Reflect regions about the x- or y-axis )</desc>
      <path>hdevelop/Regions/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>draw_region</operator>
      <operator>mirror_region</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>moments_region_2nd.hdev</name>
      <desc>領域の幾何学モーメント(geometric moments)を計算 ( Calculate geometric moments of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>moments_region_2nd</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>moments_region_2nd_invar.hdev</name>
      <desc>領域の幾何学モーメントを計算 ( Calculate geometric moments of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>disp_line</operator>
      <operator>gen_ellipse</operator>
      <operator>moments_region_2nd_invar</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>mosaicking.hdev</name>
      <desc>複数画像を貼り合わせた1枚の大きなBGAのモザイク画像を生成 ( Use mosaicking to merge partial images of a BGA into one large image )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.tuple</method>
      <method>method.mosaic</method>
      <method>method.filter.points</method>
      <method>method.match.point</method>
      <method>method.visual</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>gen_image_const</operator>
      <operator>gen_projective_mosaic</operator>
      <operator>paint_region</operator>
      <operator>points_harris</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>tile_images_offset</operator>
      <operator>vector_to_rigid</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>mosaicking_pyramid.hdev</name>
      <desc>画像群をモザイク画像に結合</desc>
      <path>hdevelop/Tools/Mosaicking/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.mosaic</method>
      <method>method.filter.points</method>
      <method>method.match.point</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>gen_gauss_pyramid</operator>
      <operator>gen_projective_mosaic</operator>
      <operator>points_harris</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>proj_match_points_ransac_guided</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>move_region.hdev</name>
      <desc>領域を平行移動 ( Translate regions )</desc>
      <path>hdevelop/Regions/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>draw_region</operator>
      <operator>get_mbutton</operator>
      <operator>move_region</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>movement.hdev</name>
      <desc>差分画像を利用してのオンライン移動体検出 ( Detect movements online using image differences )</desc>
      <path>hdevelop/Applications/Security-Systems/</path>
      <industry>industry.secure</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.security</applarea>
      <method>method.acqu</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.motion</method>
      <operator>close_framegrabber</operator>
      <operator>copy_obj</operator>
      <operator>dyn_threshold</operator>
      <operator>fill_up</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>mean_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>movement_bg.hdev</name>
      <desc>背景推定を利用してのオンライン移動体検出 ( Detect movements online using background estimator )</desc>
      <path>hdevelop/Applications/Security-Systems/</path>
      <industry>industry.secure</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.security</applarea>
      <method>method.acqu</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.motion</method>
      <method>method.filter.general</method>
      <operator>close_framegrabber</operator>
      <operator>create_bg_esti</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>mean_image</operator>
      <operator>open_framegrabber</operator>
      <operator>run_bg_esti</operator>
      <operator>sort_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>movement_col.hdev</name>
      <desc>移動体を検出し特定の色の領域を抽出 ( Extract moving objects and scan them for specific color )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <industry>industry.secure</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.inspect.color</applarea>
      <method>method.acqu</method>
      <method>method.motion</method>
      <method>method.visual</method>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <operator>add_channels</operator>
      <operator>class_2dim_sup</operator>
      <operator>close_framegrabber</operator>
      <operator>closing_rectangle1</operator>
      <operator>copy_obj</operator>
      <operator>decompose3</operator>
      <operator>dilation_circle</operator>
      <operator>draw_region</operator>
      <operator>dyn_threshold</operator>
      <operator>erosion_circle</operator>
      <operator>fill_up</operator>
      <operator>grab_image</operator>
      <operator>histo_2dim</operator>
      <operator>open_framegrabber</operator>
      <operator>select_shape_std</operator>
      <operator>shape_trans</operator>
      <operator>trans_from_rgb</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>msi.hdev</name>
      <desc>バーコードMSIの読取 ( Read a bar code of type MSI )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>mult_image.hdev</name>
      <desc>二つの画像の掛け合わせ ( Multiply two images )</desc>
      <path>hdevelop/Filters/Arithmetic/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>gen_image_gray_ramp</operator>
      <operator>mult_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>multicam.hdev</name>
      <desc>Euresys MultiCamボードからの画像取り込み (性能評価) (Grab images from a Euresys MultiCam board (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.2</newinversion>
   </example>
   <example>
      <name>multicam_2cameras.hdev</name>
      <desc>Euresys社製MultiCamボードでの2カメラ画像取り込み ( Grab images from two cameras connected to a Euresys MultiCam board )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_part</operator>
      <newinversion>6.0.2</newinversion>
   </example>
   <example>
      <name>multicam_parameters.hdev</name>
      <desc>Euresys MultiCamボードを使用 (現在のパラメーター設定を取得) (Use a Euresys MultiCam board (query current parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_sort</operator>
      <newinversion>6.0.2</newinversion>
   </example>
   <example>
      <name>multicam_picolo.hdev</name>
      <desc>Euresys PICOLOボードの使用 (Use a Euresys PICOLO board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>get_image_time</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>multicam_quickpack.hdev</name>
      <desc>Euresys QUICKPACKボードの使用 (Use a Euresys QUICKPACK board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>get_image_pointer3</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_lut</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>multicam_simple.hdev</name>
      <desc>Euresys MultiCamボード使用 (simple) (Use a Euresys MultiCam board (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0.2</newinversion>
   </example>
   <example>
      <name>multicam_split_cable.hdev</name>
      <desc>Euresys社製画像入力ボードDOMINOを使用したカメラ3台の画像取り込み ( Use a split cable for a Euresys DOMINO board with three cameras )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>multicam_stereo.hdev</name>
      <desc>Euresys DOMINO Alphaボードにステレオ2カメラ接続 (Use StereoVision for a Euresys DOMINO Alpha board with two identical cameras)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>decompose2</operator>
      <operator>disp_image</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_part</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>multiple_boards_px.hdev</name>
      <desc>複数画像入力ボードから画像を取得 ( Grab images from multiple boards )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_part</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>multiple_models.hdev</name>
      <desc>2種類のモデルを用いた形状ベースパターンマッチングにより2種類の対象物を検出 ( Search for two types of objects simultaneously )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.metal</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <method>method.tuple</method>
      <operator>add_channels</operator>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>copy_obj</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>find_scaled_shape_models</operator>
      <operator>gen_circle</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>inspect_shape_model</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>multiple_objects.hdev</name>
      <desc>複数のリング形状を形状ベースパターンマッチングで検出 ( Search for multiple instances of a security ring )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.metal</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_pixel</operator>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_model</operator>
      <operator>gen_circle</operator>
      <operator>get_shape_model_contours</operator>
      <operator>grab_image</operator>
      <operator>inspect_shape_model</operator>
      <operator>open_framegrabber</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>multiple_ports_px.hdev</name>
      <desc>複数ポートから画像を取得 ( Grab images from multiple ports )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_part</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>multiple_scales.hdev</name>
      <desc>スケール変化を考慮した形状ベースパターンマッチングにより大きさの異なるナットを検出 ( Search for nuts of different sizes )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.metal</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_pixel</operator>
      <operator>clear_shape_model</operator>
      <operator>copy_image</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>difference</operator>
      <operator>disp_arrow</operator>
      <operator>find_scaled_shape_model</operator>
      <operator>gen_circle</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>inspect_shape_model</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>nonmax_suppression_amp.hdev</name>
      <desc>局所的に最大ではない点を抑え込む ( Suppress non-maximum points )</desc>
      <path>hdevelop/Segmentation/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <method>method.filter.edge</method>
      <operator>nonmax_suppression_amp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>nonmax_suppression_dir.hdev</name>
      <desc>エッジ上の局所的に最大ではない点を抑え込む ( Suppress non-maximum points on edges )</desc>
      <path>hdevelop/Segmentation/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <method>method.filter.edge</method>
      <operator>frei_dir</operator>
      <operator>nonmax_suppression_dir</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>novelty_detection.hdev</name>
      <desc>ノベルティディテクションモードでのSVM分類器の使用方法 ( Show how to use an SVM classifier in the novelty-detection mode )</desc>
      <path>hdevelop/Classification/Support-Vector-Machines/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.classif</method>
      <method>method.visual</method>
      <operator>add_sample_class_svm</operator>
      <operator>classify_class_svm</operator>
      <operator>clear_class_svm</operator>
      <operator>create_class_svm</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_image_const</operator>
      <operator>gen_region_points</operator>
      <operator>get_region_points</operator>
      <operator>intersection</operator>
      <operator>label_to_region</operator>
      <operator>set_grayval</operator>
      <operator>train_class_svm</operator>
      <operator>union2</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>novelty_detection_dyn_threshold.hdev</name>
      <desc>動的しきい値法を用いた2値化処理による網検査 ( Inspect a web using dyn_threshold )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.synth</industry>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.texture</method>
      <method>method.blob</method>
      <operator>dyn_threshold</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>novelty_detection_gmm.hdev</name>
      <desc>ガウス混合モデルを用いたテクスチャのウェブ検査 ( Inspect a web using texture classification with gaussian mixture models )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.synth</industry>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.classif</method>
      <method>method.texture</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.blob</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>add_samples_image_class_gmm</operator>
      <operator>classify_image_class_gmm</operator>
      <operator>clear_class_gmm</operator>
      <operator>compose5</operator>
      <operator>create_class_gmm</operator>
      <operator>difference</operator>
      <operator>read_class_gmm</operator>
      <operator>smooth_image</operator>
      <operator>texture_laws</operator>
      <operator>train_class_gmm</operator>
      <operator>write_class_gmm</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>novelty_detection_svm.hdev</name>
      <desc>サポートベクターマシンを使用したテクスチャのウェブ検査 ( Inspect a web using texture classification with support vector machine classifiers )</desc>
      <path>hdevelop/Segmentation/Classification/</path>
      <industry>industry.synth</industry>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.classif</method>
      <method>method.texture</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.blob</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>add_samples_image_class_svm</operator>
      <operator>classify_image_class_svm</operator>
      <operator>clear_class_svm</operator>
      <operator>compose5</operator>
      <operator>create_class_svm</operator>
      <operator>reduce_class_svm</operator>
      <operator>smooth_image</operator>
      <operator>texture_laws</operator>
      <operator>train_class_svm</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>obj_diff.hdev</name>
      <desc>obj_diffオペレータの使い方のデモンストレーション ( Demonstrate how to use obj_diff )</desc>
      <path>hdevelop/Object/Manipulation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.regionproc</method>
      <method>method.xld</method>
      <operator>obj_diff</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>ocr_cd_print_polar_trans.hdev</name>
      <desc>CDに円弧状に並んだ文字の読み取り ( Read characters on a non-linear pattern )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.print</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.segm</method>
      <method>method.trafo.geom</method>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>polar_trans_image_ext</operator>
      <operator>read_ocr_class_mlp</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>ocr_dongle.hdev</name>
      <desc>OCRおよび正規表現を用いたドングルIDの読み取り ( Read dongle ID using OCR and regular expressions )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <applarea>applarea.inspect.print</applarea>
      <method>method.visual</method>
      <method>method.morphol</method>
      <method>method.ocr</method>
      <method>method.blob</method>
      <method>method.string</method>
      <method>method.tuple</method>
      <operator>clear_ocr_class_mlp</operator>
      <operator>dilation1</operator>
      <operator>dilation_rectangle1</operator>
      <operator>disp_rectangle1</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>dyn_threshold</operator>
      <operator>erosion_circle</operator>
      <operator>erosion_rectangle1</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>mean_image</operator>
      <operator>median_image</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>set_rgb</operator>
      <operator>shape_trans</operator>
      <operator>sort_region</operator>
      <operator>tuple_regexp_match</operator>
      <operator>tuple_strlen</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>ocr_gradient_feature.hdev</name>
      <desc>OCR特徴の性能比較 ( Compare OCR features )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.blob</method>
      <method>method.tuple</method>
      <method>method.visual</method>
      <method>method.morphol</method>
      <method>method.ocr</method>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>clear_ocr_class_svm</operator>
      <operator>clear_window</operator>
      <operator>copy_rectangle</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>create_ocr_class_svm</operator>
      <operator>disp_image</operator>
      <operator>disp_polygon</operator>
      <operator>disp_rectangle1</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>do_ocr_multi_class_svm</operator>
      <operator>emphasize</operator>
      <operator>get_line_style</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>gray_dilation_shape</operator>
      <operator>open_window</operator>
      <operator>read_ocr_trainf_names</operator>
      <operator>set_color</operator>
      <operator>set_insert</operator>
      <operator>set_line_style</operator>
      <operator>set_part</operator>
      <operator>set_rgb</operator>
      <operator>sort_region</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>trainf_ocr_class_svm</operator>
      <operator>tuple_concat</operator>
      <operator>tuple_length</operator>
      <operator>tuple_max</operator>
      <operator>tuple_min</operator>
      <operator>tuple_select_range</operator>
      <operator>tuple_sort</operator>
      <operator>tuple_sort_index</operator>
      <operator>tuple_string</operator>
      <operator>write_ocr_trainf</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>ocr_lot_number.hdev</name>
      <desc>正規表現を用いたOCR結果の修正 ( Correct OCR result using regular expressions )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.visual</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.ocr</method>
      <operator>clear_ocr_class_mlp</operator>
      <operator>clear_text_model</operator>
      <operator>clear_text_result</operator>
      <operator>create_text_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>do_ocr_word_mlp</operator>
      <operator>find_text</operator>
      <operator>get_draw</operator>
      <operator>get_rgb</operator>
      <operator>get_text_object</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>set_rgb</operator>
      <operator>set_text_model_param</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>ocr_wafer_semi_font.hdev</name>
      <desc>ウエハー上のID番号（セミフォント）の読み取り ( Read the ID numbers of wafers )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.segm</method>
      <method>method.morphol</method>
      <operator>clear_ocr_class_mlp</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>read_ocr_class_mlp</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>ocr_yogurt.hdev</name>
      <desc>文字認識のためのヨーグルトカップに印刷された賞味期限のセグメント ( Segment the expiration date of a yoghurt cap for reading )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.food</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.segm</method>
      <operator>read_ocr_class_mlp</operator>
      <operator>segment_characters</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>ocrcolor.hdev</name>
      <desc>色情報を用いた数字の読み取り ( Read numbers using color information )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.filter.general</method>
      <method>method.color</method>
      <method>method.roi</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>clip_region</operator>
      <operator>decompose3</operator>
      <operator>do_ocr_multi_class_mlp</operator>
      <operator>expand_gray_ref</operator>
      <operator>fill_up_shape</operator>
      <operator>get_image_pointer3</operator>
      <operator>mean_image</operator>
      <operator>paint_region</operator>
      <operator>read_image</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>smallest_rectangle1</operator>
      <operator>sub_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>ocrcolort.hdev</name>
      <desc>色情報を用いた数字のセグメントおよびOCRトレーニング ( Segment numbers using color information and train the OCR )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.filter.general</method>
      <method>method.color</method>
      <method>method.roi</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.error</method>
      <operator>append_ocr_trainf</operator>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>clip_region</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>decompose3</operator>
      <operator>delete_file</operator>
      <operator>expand_gray_ref</operator>
      <operator>fill_up_shape</operator>
      <operator>get_image_pointer3</operator>
      <operator>mean_image</operator>
      <operator>rgb1_to_gray</operator>
      <operator>smallest_rectangle1</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_class_mlp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>open_file.hdev</name>
      <desc>ファイルへの任意のテキストの書き込み ( Write arbitrary text to a file )</desc>
      <path>hdevelop/File/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <operator>close_file</operator>
      <operator>fwrite_string</operator>
      <operator>open_file</operator>
      <operator>count_obj</operator>
      <operator>select_obj</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>opening.hdev</name>
      <desc>オープニング処理を用いて文字形状を認識 ( Recognize letters by applying an opening operation )</desc>
      <path>hdevelop/Morphology/Region/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.morphol</method>
      <operator>erosion_circle</operator>
      <operator>opening</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>opteon.hdev</name>
      <desc>Opteon画像処理システムを使用（性能評価） (Use an Opteon imaging system (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>opteon_crop.hdev</name>
      <desc>Opteon画像処理システムを使用 (256x256pxの画像を取り込み） (Use an Opteon imaging system (grabbing image parts of size 256x256))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>opteon_parameters.hdev</name>
      <desc>Opteonイメージングシステムの使用 (パラメーター設定) (Use an Opteon imaging system (parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_sort</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>opteon_queued.hdev</name>
      <desc>Opteon画像処理システムの使用 (queued grabbing) (Use an Opteon imaging system (queued grabbing))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>opteon_simple.hdev</name>
      <desc>Opteonイメージングシステムの使用 (シンプル) (Use an Opteon imaging system (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>opteon_trigger.hdev</name>
      <desc>Opteon画像処理システムを使用 (外部トリガ) (Use an Opteon imaging system (external trigger))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.0.3</newinversion>
   </example>
   <example>
      <name>optical_flow.hdev</name>
      <desc>オプティカルフローを利用しての交通監視 ( Monitor traffic using optical flow )</desc>
      <path>hdevelop/Applications/Security-Systems/</path>
      <industry>industry.secure</industry>
      <industry>industry.transp</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.security</applarea>
      <method>method.visual</method>
      <method>method.motion</method>
      <method>method.blob</method>
      <operator>copy_obj</operator>
      <operator>optical_flow_mg</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>optical_flow_bicycle.hdev</name>
      <desc>オプティカルフローを利用しての自転車の移動を監視 ( Monitor moving bicycle using optical flow )</desc>
      <path>hdevelop/Applications/Security-Systems/</path>
      <industry>industry.secure</industry>
      <industry>industry.transp</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.security</applarea>
      <method>method.visual</method>
      <method>method.motion</method>
      <method>method.blob</method>
      <method>method.functions</method>
      <operator>copy_obj</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_region_contour_xld</operator>
      <operator>intensity</operator>
      <operator>intersection</operator>
      <operator>min_max_gray</operator>
      <operator>optical_flow_mg</operator>
      <operator>select_shape_std</operator>
      <operator>shape_trans</operator>
      <operator>vector_field_length</operator>
      <operator>vector_field_to_real</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>optical_flow_hydraulic_engineering.hdev</name>
      <desc>オプティカルフローを利用して粒子の位置 スピード 移動方向の取得 ( Get position, speed, and movement direction of particles using optical flow )</desc>
      <path>hdevelop/Applications/Security-Systems/</path>
      <industry>industry.secure</industry>
      <industry>industry.chem</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.security</applarea>
      <method>method.acqu</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <method>method.morphol</method>
      <method>method.motion</method>
      <operator>copy_obj</operator>
      <operator>dilation_circle</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_region_points</operator>
      <operator>intensity</operator>
      <operator>local_max_sub_pix</operator>
      <operator>min_max_gray</operator>
      <operator>optical_flow_mg</operator>
      <operator>reduce_domain</operator>
      <operator>vector_field_length</operator>
      <operator>vector_field_to_real</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>optimize_aop.hdev</name>
      <desc>自動オペレーター並列化(AOP)の最適化 ( Optimize the automatic operator parallelization (aop) )</desc>
      <path>hdevelop/System/Parallelization/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.general</method>
      <operator>get_aop_info</operator>
      <operator>optimize_aop</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>optimize_fft_speed.hdev</name>
      <desc>FFTオペレータの実行時間の最適化 ( Optimize the runtime of the FFT operators )</desc>
      <path>hdevelop/Filters/FFT/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <operator>convert_image_type</operator>
      <operator>count_seconds</operator>
      <operator>fft_generic</operator>
      <operator>optimize_fft_speed</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>orientation_region.hdev</name>
      <desc>領域の方向を算出 ( Calculate the orientation of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.blob</method>
      <operator>disp_arrow</operator>
      <operator>orientation_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>p3i2.hdev</name>
      <desc>Eltec p3i2フレームグラバーの使用 (性能評価) (Use an Eltec p3i2 frame grabber board (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>p3i2_crop.hdev</name>
      <desc>Eltec社製画像入力ボードp3i2シリーズを使用した画像取り込み(256x256の部分画像取り込み) ( Use an Eltec p3i2 frame grabber board (grabbing image parts of size 256x256) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>p3i2_parameters.hdev</name>
      <desc>Eltec p3i2フレームグラバーの使用 (パラメーター) (Use an Eltec p3i2 frame grabber board (parameters))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_sort</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>p3i2_simple.hdev</name>
      <desc>Eltec p3i2フレームグラバーを使用 (simple) (Use an Eltec p3i2 frame grabber board (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.1.3</newinversion>
   </example>
   <example>
      <name>paint_xld.hdev</name>
      <desc>画像に対してXLDオブジェクトを塗りつぶす例 ( Paint an XLD object into an image )</desc>
      <path>hdevelop/Image/Manipulation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <operator>compose3</operator>
      <operator>copy_image</operator>
      <operator>paint_xld</operator>
      <operator>select_shape_xld</operator>
      <operator>threshold_sub_pix</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>particle.hdev</name>
      <desc>サイズの異なる小片の抽出 ( Extract particles of varying sizes )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.health</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.blob</method>
      <operator>area_center</operator>
      <operator>complement</operator>
      <operator>connection</operator>
      <operator>dilation_circle</operator>
      <operator>dyn_threshold</operator>
      <operator>get_mbutton</operator>
      <operator>intensity</operator>
      <operator>mean_image</operator>
      <operator>opening_circle</operator>
      <operator>select_region_point</operator>
      <operator>set_tposition</operator>
      <operator>threshold</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>partition_dynamic.hdev</name>
      <desc>異なる幅を持つ矩形への水平方向の分割 ( Partition a region horizontally at "thin" locations into rectangles of different widths )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.regionproc</method>
      <operator>partition_dynamic</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>partition_rectangle.hdev</name>
      <desc>領域を等しい大きさの矩形領域に分割 ( Partition a region into rectangles of equal size )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.regionproc</method>
      <operator>partition_rectangle</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>pattern.hdev</name>
      <desc>グレイ値ベースパターンマッチング適用例 ( Apply online pattern matching using a gray value template )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.acqu</method>
      <method>method.match.gray</method>
      <operator>add_channels</operator>
      <operator>best_match</operator>
      <operator>clear_template</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>create_template</operator>
      <operator>dev_update_pc</operator>
      <operator>dev_update_time</operator>
      <operator>dev_update_var</operator>
      <operator>dev_update_window</operator>
      <operator>dilation_circle</operator>
      <operator>disp_rectangle1</operator>
      <operator>draw_rectangle1</operator>
      <operator>fast_match_mg</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>pcb_inspection.hdev</name>
      <desc>グレイモフォロジー処理でPCB上の欠陥を検出 ( Find defects on a PCB using gray value morphology )</desc>
      <path>hdevelop/Morphology/Gray-Values/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.blob</method>
      <operator>dyn_threshold</operator>
      <operator>gray_closing_shape</operator>
      <operator>gray_opening_shape</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>pceyecl.hdev</name>
      <desc>Use an ELTEC PC_EYE/CL frame grabber board (performance evaluation)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>pceyecl_crop.hdev</name>
      <desc>Use an ELTEC PC_EYE/CL frame grabber board (grabbing image parts of size 256x256)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>pceyecl_parameters.hdev</name>
      <desc>Use an ELTEC PC_EYE/CL frame grabber board (query parameter settings)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_sort</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>pceyecl_simple.hdev</name>
      <desc>Use an ELTEC PC_EYE/CL frame grabber board (simple)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>pdf417_bottle.hdev</name>
      <desc>2次元データコード PDF417の読取 ( Read 2d data codes of type PDF 417 )</desc>
      <path>hdevelop/Applications/Data-Codes/</path>
      <industry>industry.food</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>pdf417_default_settings.hdev</name>
      <desc>さまざまな種類の2次元データコード PDF417の読取 ( Read various 2d data codes of type PDF417 )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>pdf417_optimized.hdev</name>
      <desc>2次元データコード PDF417を読み取るためのパラメータ最適化 ( Optimize parameters to read 2D data codes of type PDF417 )</desc>
      <path>hdevelop/Applications/Data-Codes/</path>
      <industry>industry.general</industry>
      <industry>industry.electr</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>pdf417_optimized_settings.hdev</name>
      <desc>2次元データコード PDF417を読み取るためのパラメータ最適化 ( Optimize parameters for reading various 2d data codes of type PDF417 )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>pdf417_simple.hdev</name>
      <desc>2次元データコード PDF417の読取 ( Read 2D data codes of type PDF417 )</desc>
      <path>hdevelop/Applications/Data-Codes/</path>
      <industry>industry.general</industry>
      <industry>industry.electr</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_contour_xld</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>phot_stereo.hdev</name>
      <desc>3方向からの照明を用いた立体形状の構築(フォトメトリックステレオ) ( Reconstruct a surface by illuminating it from three different directions )</desc>
      <path>hdevelop/3D-Reconstruction/Photometric-Stereo/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <applarea>applarea.general</applarea>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <method>method.stereo.phot</method>
      <operator>compose3</operator>
      <operator>dev_set_paint</operator>
      <operator>optimize_fft_speed</operator>
      <operator>phot_stereo</operator>
      <operator>shade_height_field</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>phot_stereo_board.hdev</name>
      <desc>フォトメトリックステレオを用いたSMD部品の三次元形状復元 ( Reconstruct 3D SMD components using photometric stereo )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <method>method.fft</method>
      <operator>access_channel</operator>
      <operator>channels_to_image</operator>
      <operator>count_channels</operator>
      <operator>dev_set_paint</operator>
      <operator>mean_image</operator>
      <operator>optimize_fft_speed</operator>
      <operator>phot_stereo</operator>
      <operator>shade_height_field</operator>
      <operator>sub_image</operator>
      <operator>wait_seconds</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>phot_stereo_braille.hdev</name>
      <desc>フォトメトリックステレオを用いた点字の三次元形状取得 ( Get 3D model of braille using photometric stereo )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.paper</industry>
      <industry>industry.print</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>access_channel</operator>
      <operator>channels_to_image</operator>
      <operator>closing_rectangle1</operator>
      <operator>connection</operator>
      <operator>count_channels</operator>
      <operator>dev_display</operator>
      <operator>intensity</operator>
      <operator>intersection</operator>
      <operator>mean_image</operator>
      <operator>optimize_fft_speed</operator>
      <operator>partition_dynamic</operator>
      <operator>phot_stereo</operator>
      <operator>shade_height_field</operator>
      <operator>sub_image</operator>
      <operator>threshold</operator>
      <operator>wait_seconds</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>pixelink.hdev</name>
      <desc>PixeLinkカメラでの画像取り込み(性能評価) ( Grab images from a PixeLink camera (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>pixelink_2cameras.hdev</name>
      <desc>PixeLinkカメラ2台を使用した画像取り込み ( Grab images from two PixeLink cameras )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>pixelink_parameters.hdev</name>
      <desc>PixeLinkカメラから現在のパラメーター設定を取得 ( Query current parameter settings from a PixeLink camera )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>pixelink_simple.hdev</name>
      <desc>PixeLinkカメラの簡単な使い方 (Simple usage of a PixeLink camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>plateaus.hdev</name>
      <desc>グレイ値の高地領域を抽出 （ Detect gray value plateaus ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>plateaus</operator>
      <operator>smooth_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>plateaus_center.hdev</name>
      <desc>グレイ値の高地領域の中心を抽出 ( Detect the centers of gray value plateaus )</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>plateaus_center</operator>
      <operator>smooth_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>pm_illu.hdev</name>
      <desc>照明変動に対応したグレイ値ベースパターンマッチング適用例 ( Apply online pattern matching using a gray value template that adapts to illumination changes )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.acqu</method>
      <method>method.match.gray</method>
      <method>method.visual</method>
      <operator>clear_template</operator>
      <operator>count_seconds</operator>
      <operator>create_template</operator>
      <operator>dev_close_window</operator>
      <operator>dev_display</operator>
      <operator>dev_set_color</operator>
      <operator>dev_set_draw</operator>
      <operator>dev_set_line_width</operator>
      <operator>dev_set_window</operator>
      <operator>dev_update_pc</operator>
      <operator>dev_update_var</operator>
      <operator>dev_update_window</operator>
      <operator>else</operator>
      <operator>endif</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_image_pointer1</operator>
      <operator>if</operator>
      <operator>intensity</operator>
      <operator>reduce_domain</operator>
      <operator>set_color</operator>
      <operator>set_font</operator>
      <operator>set_offset_template</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>pm_illu_rectify.hdev</name>
      <desc>グレイ値テンプレートを用いた傾いたパターンの検出およびそのパターンに対する画像のアライメント ( Find a rotated pattern using a gray value template and align the image to the pattern )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.acqu</method>
      <method>method.match.gray</method>
      <method>method.visual</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <method>method.error</method>
      <operator>affine_trans_image</operator>
      <operator>best_match_rot_mg</operator>
      <operator>clear_template</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>copy_obj</operator>
      <operator>count_seconds</operator>
      <operator>create_template_rot</operator>
      <operator>dev_open_window</operator>
      <operator>full_domain</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_mbutton</operator>
      <operator>get_mposition</operator>
      <operator>grab_image</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>intensity</operator>
      <operator>open_framegrabber</operator>
      <operator>set_offset_template</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>pm_illu_rot.hdev</name>
      <desc>グレイ値テンプレートを用いた回転したパターンの検出 ( Find a rotated pattern using a gray value template )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.acqu</method>
      <method>method.match.gray</method>
      <method>method.visual</method>
      <operator>best_match_rot_mg</operator>
      <operator>clear_template</operator>
      <operator>close_framegrabber</operator>
      <operator>create_template_rot</operator>
      <operator>dev_open_window</operator>
      <operator>gen_rectangle2</operator>
      <operator>grab_image</operator>
      <operator>intensity</operator>
      <operator>open_framegrabber</operator>
      <operator>set_color</operator>
      <operator>set_offset_template</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>pm_measure_board.hdev</name>
      <desc>基板上のICの位置決めおよびICピン幅計測 ( Locate IC on a board and measure pin distances )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.inspect.complete</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.metrol</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <method>method.error</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_pixel</operator>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>close_measure</operator>
      <operator>create_shape_model</operator>
      <operator>dev_set_part</operator>
      <operator>dev_set_window</operator>
      <operator>disp_line</operator>
      <operator>find_shape_model</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_rectangle1</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_mposition</operator>
      <operator>get_shape_model_contours</operator>
      <operator>grab_image</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>measure_pairs</operator>
      <operator>open_framegrabber</operator>
      <operator>wait_seconds</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>pm_multiple_dxf_models.hdev</name>
      <desc>DXFファイルより生成した形状ベースマッチングモデルにより複数の異なるモデルを1度の実行で検出 ( Find multiple different models in a single pass using shape-based matching with contours from DXF files )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.file</method>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.tuple</method>
      <method>method.error</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>area_center_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>copy_obj</operator>
      <operator>count_seconds</operator>
      <operator>create_shape_model</operator>
      <operator>difference_closed_contours_xld</operator>
      <operator>find_shape_models</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>gen_image_const</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>get_domain</operator>
      <operator>get_mbutton</operator>
      <operator>get_mposition</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>inspect_shape_model</operator>
      <operator>paint_xld</operator>
      <operator>read_contour_xld_dxf</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape_xld</operator>
      <operator>union1</operator>
      <operator>union_adjacent_contours_xld</operator>
      <operator>vector_angle_to_rigid</operator>
      <operator>wait_seconds</operator>
      <operator>write_string</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>pm_multiple_models.hdev</name>
      <desc>形状ベースマッチングを利用した複数の異なるモデルを1度の呼び出しで検出( Find multiple different models in a single pass using shape-based matching )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.error</method>
      <method>method.tuple</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>copy_obj</operator>
      <operator>create_shape_model</operator>
      <operator>find_shape_models</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>get_mbutton</operator>
      <operator>get_mposition</operator>
      <operator>get_shape_model_contours</operator>
      <operator>inspect_shape_model</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape_xld</operator>
      <operator>union1</operator>
      <operator>vector_angle_to_rigid</operator>
      <operator>wait_seconds</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>pm_world_plane.hdev</name>
      <desc>形状ベースマッチングを用いた透視方向に歪んだ画像中からの平らな対象物の認識 ( Recognize planar objects using shape-based matching in perspectively distorted images )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.metal</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.trafo.rectif</method>
      <method>method.calib</method>
      <method>method.visual</method>
      <method>method.match.shape</method>
      <method>method.trafo.wcoord</method>
      <method>method.trafo.geom</method>
      <method>method.xld</method>
      <method>method.error</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_point_3d</operator>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>clear_shape_model</operator>
      <operator>count_seconds</operator>
      <operator>create_shape_model</operator>
      <operator>disp_arrow</operator>
      <operator>disp_circle</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>find_shape_model</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>get_contour_xld</operator>
      <operator>get_mposition</operator>
      <operator>get_shape_model_contours</operator>
      <operator>map_image</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>select_shape_xld</operator>
      <operator>set_origin_pose</operator>
      <operator>set_tposition</operator>
      <operator>vector_angle_to_rigid</operator>
      <operator>wait_seconds</operator>
      <operator>write_string</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>points_foerstner.hdev</name>
      <desc>Foerstner点検出器を使った特徴点の抽出 ( Extract interesting points using the Foerstner point detector )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <operator>gen_cross_contour_xld</operator>
      <operator>points_foerstner</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>points_foerstner_ellipses.hdev</name>
      <desc>共分散行列を使って抽出した点の精度解析 ( Analyze the precision of extracted points using the covariance matrixes )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <operator>add_noise_white</operator>
      <operator>gen_image_const</operator>
      <operator>gen_image_proto</operator>
      <operator>intensity</operator>
      <operator>paint_xld</operator>
      <operator>points_foerstner</operator>
      <operator>tuple_concat</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>points_foerstner_rotation.hdev</name>
      <desc>Foerstner点検出器のロバスト性と回転不変性のデモ ( Demonstrate robustness of the Foerstner point detector and its invariance against rotation )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_image</operator>
      <operator>gen_circle</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_invert</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>points_foerstner</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>points_harris.hdev</name>
      <desc>Harris点検出器を使った特徴点の抽出 ( Extract interesting points using the Harris point detector )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <operator>points_harris</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>points_harris_binomial.hdev</name>
      <desc>Harris Binominal点検出器を使用した特徴点の抽出( Extract interesting points using the Harris Binomial point detector )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <operator>points_harris_binomial</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>points_harris_rotation.hdev</name>
      <desc>Harris点検出器のロバスト性と回転不変性のデモ ( Demonstrate robustness of the Harris point detector and its invariance against rotation )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_image</operator>
      <operator>gen_circle</operator>
      <operator>get_system</operator>
      <operator>hom_mat2d_invert</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>points_harris</operator>
      <operator>set_system</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>points_lepetit.hdev</name>
      <desc>Lepetit点検出器を使った特徴点の抽出 ( Extract interesting points using the Lepetit point detector )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <operator>points_lepetit</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>points_sojka.hdev</name>
      <desc>Sojkaコーナー点検出器を使った特徴点の抽出 ( Extract interesting points using the Sojka corner detector )</desc>
      <path>hdevelop/Filters/Points/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.points</method>
      <operator>points_sojka</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>port_switching_inspecta.hdev</name>
      <desc>動的なポート切り替え ( Dynamically switch between ports )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>disp_image</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>set_part</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>pose_from_point_correspondences.hdev</name>
      <desc>特徴点の対応から対象の姿勢を算出する3つの手法の比較 ( Compare three methods to estimate a pose from point correspondences )</desc>
      <path>hdevelop/Matching/Descriptor-Based/</path>
      <industry>industry.pack</industry>
      <industry>industry.food</industry>
      <applarea>applarea.recog.pos3d</applarea>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.match.descr</method>
      <method>method.poseestim</method>
      <operator>cam_par_to_cam_mat</operator>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>clear_descriptor_model</operator>
      <operator>create_calib_descriptor_model</operator>
      <operator>find_calib_descriptor_model</operator>
      <operator>get_descriptor_model_points</operator>
      <operator>hom_vector_to_proj_hom_mat2d</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>proj_hom_mat2d_to_pose</operator>
      <operator>project_3d_point</operator>
      <operator>vector_to_pose</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>pose_of_known_3d_object.hdev</name>
      <desc>3点以上の参照点を抽出し、対象物の姿勢を計測 ( Determine pose of object by extracting three or more reference points )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.tuple</method>
      <method>method.calib</method>
      <method>method.geom</method>
      <method>method.poseestim</method>
      <method>method.trafo.wcoord</method>
      <method>method.visual</method>
      <operator>affine_trans_point_3d</operator>
      <operator>area_center_xld</operator>
      <operator>difference</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_rotate_local</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>intersection_ll</operator>
      <operator>length_xld</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>select_shape_std</operator>
      <operator>set_origin_pose</operator>
      <operator>vector_to_pose</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>pouring.hdev</name>
      <desc>pouring water (「水を注ぐ」) を用いた画像の分割化 ( Segment an image by "pouring water" over it )</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.classif</method>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>class_2dim_sup</operator>
      <operator>decompose3</operator>
      <operator>histo_2dim</operator>
      <operator>pouring</operator>
      <operator>scale_image_max</operator>
      <operator>smooth_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>prewitt_amp.hdev</name>
      <desc>Prewittオペレーターを用いたエッジ（強度）の抽出 ( Extract edges (amplitude) using the Prewitt operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>prewitt_amp</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>prewitt_dir.hdev</name>
      <desc>Prewittオペレーターを用いたエッジ（強度と方向）の抽出 ( Extract edges (amplitude and direction) using the Prewitt operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>nonmax_suppression_dir</operator>
      <operator>prewitt_dir</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>print_check.hdev</name>
      <desc>バリエーションモデルを用いた印刷品質検査 ( Perform a typical print quality inspection using a variation model )</desc>
      <path>hdevelop/Applications/Print-Inspection/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.varmodel</method>
      <method>method.ocv</method>
      <method>method.visual</method>
      <method>method.match.shape</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <method>method.blob</method>
      <operator>affine_trans_image</operator>
      <operator>clear_shape_model</operator>
      <operator>clear_train_data_variation_model</operator>
      <operator>clear_variation_model</operator>
      <operator>compare_variation_model</operator>
      <operator>create_shape_model</operator>
      <operator>create_variation_model</operator>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>erosion_rectangle1</operator>
      <operator>fill_up</operator>
      <operator>find_shape_model</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>get_variation_model</operator>
      <operator>if</operator>
      <operator>inspect_shape_model</operator>
      <operator>prepare_variation_model</operator>
      <operator>set_font</operator>
      <operator>shape_trans</operator>
      <operator>train_variation_model</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>print_check_single_chars.hdev</name>
      <desc>各文字に対してバリエーションモデルを用いた印刷品質検査 ( Perform a typical print quality inspection using variation models for each character )</desc>
      <path>hdevelop/Applications/Print-Inspection/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.varmodel</method>
      <method>method.ocv</method>
      <method>method.visual</method>
      <method>method.match.shape</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <method>method.blob</method>
      <method>method.tuple</method>
      <operator>affine_trans_image_size</operator>
      <operator>affine_trans_region</operator>
      <operator>clear_shape_model</operator>
      <operator>clear_train_data_variation_model</operator>
      <operator>clear_variation_model</operator>
      <operator>compare_variation_model</operator>
      <operator>create_shape_model</operator>
      <operator>create_variation_model</operator>
      <operator>crop_part</operator>
      <operator>find_shape_models</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>get_domain</operator>
      <operator>get_variation_model</operator>
      <operator>inspect_shape_model</operator>
      <operator>move_region</operator>
      <operator>prepare_variation_model</operator>
      <operator>shape_trans</operator>
      <operator>smallest_rectangle1</operator>
      <operator>tile_images_offset</operator>
      <operator>train_variation_model</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>print_quality.hdev</name>
      <desc>複数枚の画像における文字"A"の品質検査 ( Inspect the quality of the letter A in different images )</desc>
      <path>hdevelop/Applications/Print-Inspection/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.roi</method>
      <method>method.ocv</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>bin_threshold</operator>
      <operator>close_ocv</operator>
      <operator>create_ocv_proj</operator>
      <operator>do_ocv_simple</operator>
      <operator>traind_ocv_proj</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>print_quality_aimdpm_1_2006.hdev</name>
      <desc>AIM DPM-1-2006基準を使用した2次元データコードの印刷品質の検査 ( Inspect print quality of 2D data codes using the AIM DPM-1-2006 Standard )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.print</applarea>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.acqu</method>
      <method>method.tuple</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>continue</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>fread_line</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_file</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>print_quality_isoiec15416.hdev</name>
      <desc>バーコード(isoiec15416)の印刷品質検査 ( Inspect the print quality of bar codes (isoiec15416) )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.print</applarea>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <method>method.visual</method>
      <method>method.filter.general</method>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_param</operator>
      <operator>get_bar_code_result</operator>
      <operator>paint_gray</operator>
      <operator>set_bar_code_param</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>process_shape_model.hdev</name>
      <desc>inspect_shape_modelの結果を編集して生成したROIを用いて形状ベースパターンマッチングのモデルを生成 ( Create a model ROI by modifying the result of inspect_shape_model )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <method>method.roi</method>
      <method>method.morphol</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_shape_model</operator>
      <operator>fill_up</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>grab_image</operator>
      <operator>inspect_shape_model</operator>
      <operator>open_framegrabber</operator>
      <operator>opening_circle</operator>
      <operator>smallest_rectangle1</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>projection_pl.hdev</name>
      <desc>線上への点の投影 ( Project a point onto a line )</desc>
      <path>hdevelop/Tools/Geometry/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.geom</method>
      <operator>disp_circle</operator>
      <operator>disp_line</operator>
      <operator>distance_ss</operator>
      <operator>projection_pl</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>projective_trans_contour_xld.hdev</name>
      <desc>hom_mat3d_projecオペレータとprojective_trans_regionオペレータを使った3次元空間におけるXLDの回転 ( Rotate an XLD contour in 3D using hom_mat3d_project and projective_trans_region )</desc>
      <path>hdevelop/XLD/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>clear_window</operator>
      <operator>close_window</operator>
      <operator>copy_rectangle</operator>
      <operator>disp_obj</operator>
      <operator>edges_sub_pix</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_project</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>open_window</operator>
      <operator>projective_trans_contour_xld</operator>
      <operator>set_color</operator>
      <operator>set_part</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>projective_trans_image.hdev</name>
      <desc>画像への射影変換の適用 ( Apply projective transformations to an image )</desc>
      <path>hdevelop/Filters/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <method>method.error</method>
      <method>method.visual</method>
      <operator>clear_window</operator>
      <operator>close_window</operator>
      <operator>copy_rectangle</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>disp_obj</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_project</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>open_window</operator>
      <operator>projective_trans_image</operator>
      <operator>set_part</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>projective_trans_image_reduced.hdev</name>
      <desc>画像とドメインへの射影変換の適用 ( Apply projective transformations to an image and its domain )</desc>
      <path>hdevelop/Filters/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <operator>clear_window</operator>
      <operator>close_window</operator>
      <operator>copy_rectangle</operator>
      <operator>disp_obj</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_project</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>open_window</operator>
      <operator>projective_trans_image</operator>
      <operator>set_part</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>projective_trans_pixel.hdev</name>
      <desc>3次元空間において画像を回転させるために透視変形を適用 ( Decompose an affine transformation into geometric parameters )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.error</method>
      <method>method.filter.points</method>
      <method>method.trafo.geom</method>
      <method>method.functions</method>
      <method>method.visual</method>
      <operator>clear_window</operator>
      <operator>close_window</operator>
      <operator>copy_rectangle</operator>
      <operator>disp_cross</operator>
      <operator>disp_obj</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_project</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>open_window</operator>
      <operator>points_foerstner</operator>
      <operator>projective_trans_image</operator>
      <operator>projective_trans_pixel</operator>
      <operator>set_color</operator>
      <operator>set_part</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>projective_trans_point_2d.hdev</name>
      <desc>3次元空間における回転画像と座標に対する透視変形の適用 ( Apply a projective transformation to rotate images and points in 3D )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.error</method>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>clear_window</operator>
      <operator>close_window</operator>
      <operator>copy_rectangle</operator>
      <operator>disp_obj</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_project</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>open_window</operator>
      <operator>projective_trans_image</operator>
      <operator>projective_trans_point_2d</operator>
      <operator>set_color</operator>
      <operator>set_part</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>projective_trans_region.hdev</name>
      <desc>領域に射影変換を適用 ( Apply projective transformations to regions )</desc>
      <path>hdevelop/Regions/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.regionproc</method>
      <method>method.visual</method>
      <operator>clear_window</operator>
      <operator>close_window</operator>
      <operator>copy_rectangle</operator>
      <operator>disp_obj</operator>
      <operator>hom_mat3d_identity</operator>
      <operator>hom_mat3d_project</operator>
      <operator>hom_mat3d_rotate</operator>
      <operator>hom_mat3d_translate</operator>
      <operator>open_window</operator>
      <operator>projective_trans_region</operator>
      <operator>set_color</operator>
      <operator>set_part</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>pylon.hdev</name>
      <desc>pylonインターフェースを用いた画像取り込み (性能評価) (Grab images via the pylon interface (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>gen_struct_elements</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>pylon_crop.hdev</name>
      <desc>pylonインターフェースを用いた画像取り込み（部分取り込み） (Grab images via the pylon interface (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>pylon_parameters.hdev</name>
      <desc>pylonインターフェースを用いた画像取り込み(パラメータ設定の取得) ( Grab images via the pylon interface (query parameter settings) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>pylon_simple.hdev</name>
      <desc>pylonインタフェースを使用した画像取り込み(基本的な取込) ( Use the pylon interface (simple) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.1.2</newinversion>
   </example>
   <example>
      <name>qrcode_default_settings.hdev</name>
      <desc>2次元データコード QRコードの読取 ( Read a 2d data code of type QR Code )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>qrcode_deformed.hdev</name>
      <desc>Read perspectively distorted and locally deformed QR Code symbols</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>real_to_vector_field</operator>
      <operator>set_data_code_2d_param</operator>
      <operator>unwarp_image_vector_field</operator>
      <operator>vector_field_to_real</operator>
      <operator>vector_to_proj_hom_mat2d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>qrcode_optimized.hdev</name>
      <desc>2次元データコード QRコードを読み取るためのパラメータ最適化 ( Optimize parameters to read 2D data codes of type QR Code )</desc>
      <path>hdevelop/Applications/Data-Codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>qrcode_optimized_settings.hdev</name>
      <desc>2次元データコード QRコードを読み取るためのパラメータ最適化 ( Optimize parameters for reading a 2d data code of type QR Code )</desc>
      <path>hdevelop/Identification/Data-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_objects</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>get_data_code_2d_results</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>qrcode_simple.hdev</name>
      <desc>2次元データコード QRコードの読取 ( Read 2D data codes of type QR Code )</desc>
      <path>hdevelop/Applications/Data-Codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>close_framegrabber</operator>
      <operator>count_seconds</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_contour_xld</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_data_code_2d_param</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>query_aop_info.hdev</name>
      <desc>自動オペレーター並列化（AOP)の情報の確認 ( Query the automatic operator parallelization (aop) information )</desc>
      <path>hdevelop/System/Parallelization/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.general</method>
      <operator>get_aop_info</operator>
      <operator>optimize_aop</operator>
      <operator>query_aop_info</operator>
      <operator>set_aop_info</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>radial_distortion.hdev</name>
      <desc>射影歪みを計算 ( Eliminate radial distortions )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.edgeextr</method>
      <method>method.trafo.rectif</method>
      <method>method.xld</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_contours_xld</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>gen_radial_distortion_map</operator>
      <operator>map_image</operator>
      <operator>rgb1_to_gray</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>radial_distortion_comparison.hdev</name>
      <desc>カメラキャリブレーションと放射歪みセルフキャリブレーションの比較 （ Compare results of camera calibration and radial distortion self-calibration ）</desc>
      <path>hdevelop/Calibration/Self-Calibration/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.funct1d</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>calibrate_cameras</operator>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>clear_calib_data</operator>
      <operator>create_calib_data</operator>
      <operator>find_marks_and_pose</operator>
      <operator>get_calib_data</operator>
      <operator>radial_distortion_self_calibration</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>radial_distortion_self_calibration.hdev</name>
      <desc>放射歪み係数と中心での歪みの補正 ( Calibrate the radial distortion coefficient and the center of distortion )</desc>
      <path>hdevelop/Calibration/Self-Calibration/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.edgeextr</method>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>change_radial_distortion_image</operator>
      <operator>radial_distortion_self_calibration</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>radiometric_self_calibration.hdev</name>
      <desc>2台の異なるカメラに対するグレイ値セルフキャリブレーション ( Perform a radiometric self calibration of two different cameras )</desc>
      <path>hdevelop/Calibration/Self-Calibration/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib.radiom</method>
      <operator>dev_set_lut</operator>
      <operator>histo_2dim</operator>
      <operator>radiometric_self_calibration</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>rank_image.hdev</name>
      <desc>任意のランクマスクを用いた画像のスムージング ( Smooth an image with an arbitrary rank mask )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <operator>rank_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>rank_n.hdev</name>
      <desc>動体を含む画像の背景をrank_nを用いて検出するデモ ( Demonstrate how to use rank_n to compute a background image of a scene with moving objects )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <method>method.filter.general</method>
      <operator>elseif</operator>
      <operator>mean_n</operator>
      <operator>rank_n</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>rank_rect.hdev</name>
      <desc>より安定したグレイ値モフォロジ処理のための長方形マスクを用いたランクフィルタの活用 ( Use a rank filter with rectangular masks for a more robust gray value morphology )</desc>
      <path>hdevelop/Filters/Smoothing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <operator>gray_opening_rect</operator>
      <operator>rank_rect</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>rank_region.hdev</name>
      <desc>領域へのランクオペレータの適用 ( Apply the rank operator for regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.filter.general</method>
      <operator>rank_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>read_2d_data_code_model.hdev</name>
      <desc>2Dデータコードモデルをファイルから読み込み ( Read a 2D data code model from file )</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>find_data_code_2d</operator>
      <operator>read_data_code_2d_model</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>read_region.hdev</name>
      <desc>ファイルまたはバイナリ画像からの領域の読み込み ( Read region data from region file or b/w image )</desc>
      <path>hdevelop/File/Region/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <method>method.regionproc</method>
      <operator>read_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>read_string.hdev</name>
      <desc>テキストウィンドウへの入力プロンプト ( Prompt for user input in a text window )</desc>
      <path>hdevelop/Graphics/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.io</method>
      <operator>disp_arrow</operator>
      <operator>read_string</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>real_time_grabbing_falcon.hdev</name>
      <desc>画像取り込みと処理から実現可能なフレームレートを計算 ( Determine the achievable frame rates for grabbing and processing )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <method>method.filter.general</method>
      <operator>close_framegrabber</operator>
      <operator>count_seconds</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>new_line</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>sub_image</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>reconstruct_connection_rod_calib.hdev</name>
      <desc>キャリブレーションありの光切断法を用いた対象の三次元計測 ( Measure 3D objects with the calibrated sheet-of-light technique )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.calib</method>
      <method>method.laser</method>
      <operator>clear_sheet_of_light_model</operator>
      <operator>create_sheet_of_light_model</operator>
      <operator>get_line_of_sight</operator>
      <operator>get_object_model_3d_params</operator>
      <operator>get_sheet_of_light_result</operator>
      <operator>get_sheet_of_light_result_object_model_3d</operator>
      <operator>measure_profile_sheet_of_light</operator>
      <operator>project_object_model_3d</operator>
      <operator>set_sheet_of_light_param</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>reconstruct_connection_rod_uncalib.hdev</name>
      <desc>キャリブレーションなしの光切断法を用いた対象の三次元計測 ( Measure 3D objects with the uncalibrated sheet-of-light technique )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.laser</method>
      <operator>clear_sheet_of_light_model</operator>
      <operator>create_sheet_of_light_model</operator>
      <operator>get_sheet_of_light_result</operator>
      <operator>measure_profile_sheet_of_light</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>reconstruct_points_stereo.hdev</name>
      <desc>マルチビューステレオを用いた3次元点群の復元 ( Reconstruct 3D points using multi-view stereo )</desc>
      <path>hdevelop/3D-Reconstruction/Multi-View/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.stereo.multi</method>
      <operator>axis_angle_to_quat</operator>
      <operator>clear_camera_setup_model</operator>
      <operator>clear_object_model_3d</operator>
      <operator>convert_pose_type</operator>
      <operator>create_camera_setup_model</operator>
      <operator>create_pose</operator>
      <operator>create_stereo_model</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>get_camera_setup_param</operator>
      <operator>get_line_of_sight</operator>
      <operator>get_object_model_3d_params</operator>
      <operator>global</operator>
      <operator>hom_mat3d_translate_local</operator>
      <operator>project_object_model_3d</operator>
      <operator>quat_to_hom_mat3d</operator>
      <operator>query_color</operator>
      <operator>read_camera_setup_model</operator>
      <operator>reconstruct_points_stereo</operator>
      <operator>set_camera_setup_cam_param</operator>
      <operator>xyz_to_object_model_3d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>rectangularity.hdev</name>
      <desc>領域の矩形度(rectangularity)を計算 ( Calculate the rectangularity of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <industry>industry.electr</industry>
      <industry>industry.semicon</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>affine_trans_region</operator>
      <operator>auto_threshold</operator>
      <operator>fill_up</operator>
      <operator>gen_image_const</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>move_region</operator>
      <operator>overpaint_region</operator>
      <operator>rectangularity</operator>
      <operator>union2</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>rectify_results.hdev</name>
      <desc>マッチング結果を用いて画像を補正 ( Rectify an image based on the matching results )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <method>method.trafo.align</method>
      <method>method.trafo.rectif</method>
      <method>method.visual</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_region</operator>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_shape_model</operator>
      <operator>crop_rectangle1</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>grab_image</operator>
      <operator>hom_mat2d_invert</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>inspect_shape_model</operator>
      <operator>open_framegrabber</operator>
      <operator>smallest_rectangle1</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>regiongrowing.hdev</name>
      <desc>regiongrowingでの画像の分割化 ( )</desc>
      <path>hdevelop/Segmentation/Region-Growing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.regionproc</method>
      <method>method.segm</method>
      <method>method.morphol</method>
      <method>method.visual</method>
      <operator>closing_circle</operator>
      <operator>fill_up_shape</operator>
      <operator>median_image</operator>
      <operator>regiongrowing</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>regiongrowing_mean.hdev</name>
      <desc>平均グレイ値を用いたregiongrowingの適用 ( Apply a regiongrowing using mean gray values )</desc>
      <path>hdevelop/Segmentation/Region-Growing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.regionproc</method>
      <method>method.segm</method>
      <operator>median_image</operator>
      <operator>regiongrowing</operator>
      <operator>regiongrowing_mean</operator>
      <operator>shape_trans</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>regiongrowing_n.hdev</name>
      <desc>複数チャンネル画像に対するregiongrowingの適用 ( Apply a regiongrowing for multi-channel images )</desc>
      <path>hdevelop/Segmentation/Region-Growing/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <method>method.color</method>
      <method>method.texture</method>
      <operator>compose3</operator>
      <operator>median_image</operator>
      <operator>regiongrowing_n</operator>
      <operator>texture_laws</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>regression.hdev</name>
      <desc>ニューラルネット(MLP)を用いた関数の近似 ( Approximate a function using an MLP )</desc>
      <path>hdevelop/Classification/Neural-Nets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.classif</method>
      <method>method.visual</method>
      <method>method.numeric</method>
      <method>method.functions</method>
      <operator>add_sample_class_mlp</operator>
      <operator>clear_class_mlp</operator>
      <operator>create_class_mlp</operator>
      <operator>disp_cross</operator>
      <operator>disp_line</operator>
      <operator>evaluate_class_mlp</operator>
      <operator>train_class_mlp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>remove_noise_region.hdev</name>
      <desc>領域からノイズを除去 ( Remove noise from a region )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.filter.general</method>
      <operator>hamming_change_region</operator>
      <operator>hamming_distance</operator>
      <operator>remove_noise_region</operator>
      <operator>union1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>remove_texture_fft.hdev</name>
      <desc>画像中のテクスチャの除去 ( Remove a texture from an image )</desc>
      <path>hdevelop/Applications/Texture-Inspection/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.texture</applarea>
      <method>method.trafo.geom</method>
      <method>method.fft</method>
      <method>method.morphol</method>
      <method>method.filter.general</method>
      <operator>binomial_filter</operator>
      <operator>fft_generic</operator>
      <operator>optimize_fft_speed</operator>
      <operator>power_real</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>resistor.hdev</name>
      <desc>合焦点法を用いたはんだの抽出 ( Extract solder by depth using multiple focus levels )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.dff</method>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <operator>access_channel</operator>
      <operator>channels_to_image</operator>
      <operator>connection</operator>
      <operator>depth_from_focus</operator>
      <operator>fill_up</operator>
      <operator>mean_image</operator>
      <operator>scale_image_max</operator>
      <operator>select_shape_std</operator>
      <operator>threshold</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>reuse_model.hdev</name>
      <desc>形状ベースパターンマッチングモデルの保存と再利用 ( Store and reuse a shape model )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.metal</industry>
      <industry>industry.machine</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.roi</method>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <operator>clear_shape_model</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>difference</operator>
      <operator>find_scaled_shape_model</operator>
      <operator>gen_circle</operator>
      <operator>get_domain</operator>
      <operator>get_shape_model_contours</operator>
      <operator>get_shape_model_origin</operator>
      <operator>get_shape_model_params</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>inspect_shape_model</operator>
      <operator>read_shape_model</operator>
      <operator>write_image</operator>
      <operator>write_shape_model</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>rft_generic.hdev</name>
      <desc>real値FFTを用いた画像のフィルタリング ( Filter images using a real-valued FFT )</desc>
      <path>hdevelop/Filters/FFT/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.fft</method>
      <method>method.filter.general</method>
      <operator>convert_image_type</operator>
      <operator>convol_fft</operator>
      <operator>derivate_gauss</operator>
      <operator>gen_derivative_filter</operator>
      <operator>gen_gauss_filter</operator>
      <operator>intensity</operator>
      <operator>min_max_gray</operator>
      <operator>mult_image</operator>
      <operator>optimize_rft_speed</operator>
      <operator>rft_generic</operator>
      <operator>sub_image</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>rim.hdev</name>
      <desc>周縁にある穴や文字の検査 ( Inspect holes and characters on a rim )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.auto</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.filter.general</method>
      <method>method.functions</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.align</method>
      <method>method.visual</method>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_region</operator>
      <operator>closing_circle</operator>
      <operator>dev_set_part</operator>
      <operator>difference</operator>
      <operator>disp_ellipse</operator>
      <operator>dyn_threshold</operator>
      <operator>edges_sub_pix</operator>
      <operator>erosion_circle</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>gauss_image</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>intersection</operator>
      <operator>select_contours_xld</operator>
      <operator>select_shape</operator>
      <operator>set_tposition</operator>
      <operator>smallest_rectangle1</operator>
      <operator>smallest_rectangle2</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>rim_simple.hdev</name>
      <desc>リムの穴を検出し計測 ( Extract holes in a rim )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.auto</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>boundary</operator>
      <operator>connection</operator>
      <operator>disp_arrow</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape</operator>
      <operator>set_tposition</operator>
      <operator>sort_contours_xld</operator>
      <operator>threshold</operator>
      <operator>union1</operator>
      <operator>write_string</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>roads.hdev</name>
      <desc>航空画像からの道路抽出 ( Extract roads from aerial image )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.filter.edge</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>clip_contours_xld</operator>
      <operator>clip_region</operator>
      <operator>combine_roads_xld</operator>
      <operator>dev_display</operator>
      <operator>dev_set_line_width</operator>
      <operator>dev_set_part</operator>
      <operator>dev_set_window</operator>
      <operator>edges_image</operator>
      <operator>gen_contours_skeleton_xld</operator>
      <operator>gen_parallels_xld</operator>
      <operator>gen_polygons_xld</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>lines_gauss</operator>
      <operator>mod_parallels_xld</operator>
      <operator>reduce_domain</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>roberts.hdev</name>
      <desc>Robertsフィルターを用いたエッジ抽出 ( Extract edges using the Roberts filter )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>roberts</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>robinson_amp.hdev</name>
      <desc>Robinsonオペレーターを用いたエッジ（強度）の抽出 ( Extract edges (amplitude) using the Robinson operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>robinson_amp</operator>
      <operator>skeleton</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>robinson_dir.hdev</name>
      <desc>Robinsonオペレーターを用いたエッジ（強度と方向）の抽出 ( Extract edges (amplitude and direction) using the Robinson operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>nonmax_suppression_dir</operator>
      <operator>robinson_dir</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>rotation_from_optical_flow.hdev</name>
      <desc>連続的な画像から回転中心を取得 ( Estimate the center of rotation between succeeding images )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.motion</method>
      <method>method.filter.general</method>
      <method>method.regionproc</method>
      <method>method.trafo.geom</method>
      <operator>gen_grid_region</operator>
      <operator>hom_mat2d_to_affine_par</operator>
      <operator>optical_flow_mg</operator>
      <operator>sobel_amp</operator>
      <operator>vector_field_to_real</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>rotchar.hdev</name>
      <desc>文字列の小さな傾き具合の推定 ( Estimate small inclinations of text lines )</desc>
      <path>hdevelop/Applications/OCR/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.trafo.align</method>
      <method>method.visual</method>
      <method>method.morphol</method>
      <method>method.ocr</method>
      <operator>bin_threshold</operator>
      <operator>elliptic_axis</operator>
      <operator>rotate_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>roundness.hdev</name>
      <desc>領域の丸みを算出 ( Calculate the roundness of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>roundness</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>rss14.hdev</name>
      <desc>バーコード RSS-14の読取 ( Read bar codes of type RSS-14 )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>disp_rectangle1</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>rss14_stacked.hdev</name>
      <desc>バーコード RSS-14 Stackedの読取 ( Read bar codes of type RSS-14 Stacked )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0.1</newinversion>
   </example>
   <example>
      <name>rss14_stacked_omnidir.hdev</name>
      <desc>バーコード RSS-14 STacked Omnidirectionalの読取 ( Read bar codes of type RSS-14 Stacked Omnidirectional )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0.1</newinversion>
   </example>
   <example>
      <name>rss14truncated.hdev</name>
      <desc>バーコード RSS-14の読取と失敗候補の表示 ( Read bar codes of type RSS-14 Truncated and show the influence of false candidates )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>difference</operator>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_object</operator>
      <operator>get_domain</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>reduce_domain</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>rss_composite.hdev</name>
      <desc>バーコード RSS Compositeのバーコード読取 ( Read bar codes of type RSS Composite )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>find_bar_code</operator>
      <operator>get_bar_code_result</operator>
      <operator>get_rgb</operator>
      <operator>set_bar_code_param</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>rssexpanded.hdev</name>
      <desc>バーコード RSS Expandedの読取 ( Read a bar code of type RSS Expanded )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>rssexpanded_stacked.hdev</name>
      <desc>バーコード RSS EXpanded Stackedの読取 ( Read bar codes of type RSS Expanded Stacked )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0.1</newinversion>
   </example>
   <example>
      <name>rsslimited.hdev</name>
      <desc>バーコード RSS Limitedの読取 ( Read a bar code of type RSS Limited )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>clear_bar_code_model</operator>
      <operator>create_bar_code_model</operator>
      <operator>find_bar_code</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>set_rgb</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>runlength_distribution.hdev</name>
      <desc>領域のランレングスのエンコードを解析(メタデータ) ( Analyze the runlength encoding of regions (metadata) )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.regionproc</method>
      <operator>runlength_distribution</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>runlength_features.hdev</name>
      <desc>領域を符号化するランレングスを解析(メタデータ) ( Analyze the runlength encoding of regions (metadata) )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.regionproc</method>
      <operator>runlength_features</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>saddle_points_sub_pix.hdev</name>
      <desc>サブピクセル精度で鞍点を抽出 （ Detect saddle points with subpixel accuracy ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <industry>industry.auto</industry>
      <industry>industry.secure</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.segm</method>
      <operator>gen_cross_contour_xld</operator>
      <operator>rgb1_to_gray</operator>
      <operator>saddle_points_sub_pix</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>saperalt.hdev</name>
      <desc>Corecoフレームグラバーからの画像取り込み (性能評価) (Grab images from Coreco frame grabber boards (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>saperalt_2boards.hdev</name>
      <desc>Coreco社製画像入力ボード2枚を使用した画像取り込み ( Grab images from 2 Coreco frame grabber boards )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>disp_image</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>saperalt_2cameras.hdev</name>
      <desc>Corecoフレームグラバーからの画像取り込み (カメラ2台使用) (Grab images from 2 cameras connected to one Coreco frame grabber board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>disp_image</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>saperalt_crop.hdev</name>
      <desc>Corecoフレームグラバーを用いた画像取り込み（部分取り込み） (Grab images from Coreco frame grabber boards (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>saperalt_lut.hdev</name>
      <desc>Corecoフレームグラバーに対してLUTを設定 (Set a lookup table for a Coreco frame grabber board)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_lut</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_lut</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>saperalt_parameters.hdev</name>
      <desc>Corecoフレームグラバーを用いた画像取り込み（設定パラメーターの確認） (Grab images from Coreco frame grabber boards (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>saperalt_simple.hdev</name>
      <desc>Corecoフレームグラバーの使用 (シンプル) (Use a Coreco frame grabber board (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>7.0.3</newinversion>
   </example>
   <example>
      <name>saperalt_split_channel_mode.hdev</name>
      <desc>split channelモードを使用した32767ライン以上の画像取り込み (Grab images with &gt; 32767 lines by using the split channel mode)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>crop_part</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>scale_image_max.hdev</name>
      <desc>グレイ値引き伸ばし ( Spread gray values to maximum range (only byte image) )</desc>
      <path>hdevelop/Filters/Enhancement/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.visual</method>
      <operator>scale_image_max</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>segment_ball_bond_lead_frame.hdev</name>
      <desc>ボールボンドの検査 ( Inspect ball bonds )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.segm</method>
      <method>method.regionproc</method>
      <operator>shape_trans</operator>
      <operator>skeleton</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>segment_citrus_fruits.hdev</name>
      <desc>ニューラルネットワーク（MLP）分類法による色情報学習でのオレンジとレモンの分類 ( Segment oranges and lemons from images using MLP-based color classification )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.food</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.classif</method>
      <method>method.roi</method>
      <method>method.segm</method>
      <operator>add_samples_image_class_mlp</operator>
      <operator>classify_image_class_mlp</operator>
      <operator>clear_class_mlp</operator>
      <operator>create_class_mlp</operator>
      <operator>gen_empty_region</operator>
      <operator>train_class_mlp</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>segment_object_model_3d.hdev</name>
      <desc>2.5次元データの円柱や球の部品への分割 ( Segment 2.5D data into cylindrical or spherical parts )</desc>
      <path>hdevelop/3D-Tools/3D-Segmentation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object3d</applarea>
      <applarea>applarea.recog.pos3d</applarea>
      <method>method.fitting3d</method>
      <operator>copy_object_model_3d</operator>
      <operator>get_object_model_3d_params</operator>
      <operator>object_model_3d_to_xyz</operator>
      <operator>prepare_object_model_3d</operator>
      <operator>segment_object_model_3d</operator>
      <operator>xyz_to_object_model_3d</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>segment_wedge_bonds.hdev</name>
      <desc>ウェッジボンドの検査 ( Inspect wedge bonds )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.morphol</method>
      <method>method.trafo.geom</method>
      <method>method.match.shape</method>
      <method>method.xld</method>
      <operator>clip_end_points_contours_xld</operator>
      <operator>create_shape_model_xld</operator>
      <operator>elliptic_axis</operator>
      <operator>find_shape_model</operator>
      <operator>set_shape_model_metric</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>select_characters.hdev</name>
      <desc>文字列の分割と選択 ( Segment and select characters. ).</desc>
      <path>hdevelop/OCR/Segmentation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <operator>rotate_image</operator>
      <operator>segment_characters</operator>
      <operator>select_characters</operator>
      <operator>text_line_orientation</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>select_contours_xld.hdev</name>
      <desc>特徴量に基づくXLDの選択 ( Select XLD contours based on various features )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.edgeextr</method>
      <method>method.io</method>
      <method>method.xld</method>
      <operator>disp_arrow</operator>
      <operator>disp_line</operator>
      <operator>draw_rectangle2</operator>
      <operator>edges_sub_pix</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_polygons_xld</operator>
      <operator>gen_rectangle2</operator>
      <operator>regress_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>split_contours_xld</operator>
      <operator>union_straight_contours_xld</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>select_region_point.hdev</name>
      <desc>指定したピクセルを含む領域を選択 ( Select regions that contain a given pixel )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>get_mbutton</operator>
      <operator>select_region_point</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>select_region_spatial.hdev</name>
      <desc>隣接関係に基づき領域を選択 ( Select regions that are left (right, above, below) of a reference region )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>gauss_image</operator>
      <operator>select_region_spatial</operator>
      <operator>select_shape</operator>
      <operator>watersheds</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>select_shape.hdev</name>
      <desc>形状特徴量によって領域を選択 ( Select regions by shape features )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>select_shape</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>select_shape_proto.hdev</name>
      <desc>お互いに関連のある領域を選択 ( Select regions that have a certain relation to a reference region )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>select_shape_proto</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>select_shape_std.hdev</name>
      <desc>最大の領域もしくは矩形に似た領域を選択 ( Select the largest region or regions similiar to a rectangle )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>select_shape_std</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>select_shape_xld.hdev</name>
      <desc>形状特徴量によるXLDオブジェクトの選択 ( Select XLD contours based on various features )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <method>method.regionproc</method>
      <method>method.xld</method>
      <operator>crop_part</operator>
      <operator>select_shape_xld</operator>
      <operator>threshold_sub_pix</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>select_xld_point.hdev</name>
      <desc>特定の点を含むXLDオブジェクトを選択 ( Select XLD contours containing a specified point )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>select_xld_point</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>sentech.hdev</name>
      <desc>Sentech社製USB2.0カメラを使用した画像取り込み(性能評価) ( Grab images from a Sentech USB 2.0 camera (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>sentech_parameters.hdev</name>
      <desc>Sentech USB2.0カメラより設定パラメータの取得 ( Query parameter settings from a Sentech USB 2.0 camera )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>sentech_simple.hdev</name>
      <desc>Sentech USB2.0カメラを用いた画像取り込み (Grab images from a Sentech USB 2.0 camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>sentech_trigger.hdev</name>
      <desc>Sentech USB 2.0カメラの使用 (ハードウェアトリガ使用) (Use the Sentech USB 2.0 camera (external trigger))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>sequence_diff.hdev</name>
      <desc>2枚の連続画像の比較による交通状態の監視 ( Monitor traffic by comparing two successive images )</desc>
      <path>hdevelop/Applications/Position-Recognition-2D/</path>
      <industry>industry.secure</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.morphol</method>
      <method>method.blob</method>
      <method>method.motion</method>
      <operator>dyn_threshold</operator>
      <operator>read_image</operator>
      <operator>shape_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>serial.hdev</name>
      <desc>HALCONのシリアルポート活用 ( Use serial ports in HALCON )</desc>
      <path>hdevelop/System/Serial/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.comm</method>
      <operator>close_serial</operator>
      <operator>open_serial</operator>
      <operator>read_serial</operator>
      <operator>set_serial_param</operator>
      <operator>write_serial</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>set_bar_code_param_specific.hdev</name>
      <desc>特定のバーコードタイプに対するパラメータの設定と参照 ( Set and query parameters for specific bar code types )</desc>
      <path>hdevelop/Identification/Bar-Code/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.barcode</applarea>
      <method>method.barcode</method>
      <operator>get_bar_code_param_specific</operator>
      <operator>set_bar_code_param_specific</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>set_grayval.hdev</name>
      <desc>画像中の指定ピクセルの輝度値を設定 ( Paint single pixels into an image )</desc>
      <path>hdevelop/Image/Manipulation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <operator>set_grayval</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>set_offset_template.hdev</name>
      <desc>テンプレートにグレイ値オフセットを加えることで照明変動に対応する手法 ( Adapt to illumination changes by adding a gray value offset to a template )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.trafo.geom</method>
      <operator>best_match_mg</operator>
      <operator>clear_template</operator>
      <operator>create_template</operator>
      <operator>fill_interlace</operator>
      <operator>scale_image</operator>
      <operator>set_offset_template</operator>
      <operator>set_reference_template</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>set_paint_3d_plot.hdev</name>
      <desc>'set_paint'オペレーター中、'3d_plot'の使い方のデモンストレーション ( Demonstrate how to use the mode '3d_plot' of the operator 'set_paint' )</desc>
      <path>hdevelop/Graphics/Parameters/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.dff</method>
      <method>method.visual</method>
      <operator>access_channel</operator>
      <operator>channels_to_image</operator>
      <operator>compose2</operator>
      <operator>depth_from_focus</operator>
      <operator>get_mposition_sub_pix</operator>
      <operator>get_window_param</operator>
      <operator>select_grayvalues_from_channels</operator>
      <operator>set_paint</operator>
      <operator>set_window_param</operator>
      <operator>tuple_find</operator>
      <operator>unproject_coordinates</operator>
      <operator>update_window_pose</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>set_reference_template.hdev</name>
      <desc>グレイ値ベーステンプレートのための参照位置定義 ( Define the reference position for a gray value template )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_image</operator>
      <operator>best_match_mg</operator>
      <operator>clear_template</operator>
      <operator>create_template</operator>
      <operator>fill_interlace</operator>
      <operator>gnuplot_close</operator>
      <operator>gnuplot_open_file</operator>
      <operator>gnuplot_plot_ctrl</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>set_reference_template</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>set_shape_model_min_contrast.hdev</name>
      <desc>形状ベースマッチングにて最小コントラストパラメーター（MinContrast）を変更 ( Change the minimum contrast used for a shape-based matching )</desc>
      <path>hdevelop/Matching/Shape-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <operator>add_noise_white</operator>
      <operator>clear_shape_model</operator>
      <operator>create_shape_model</operator>
      <operator>determine_shape_model_params</operator>
      <operator>edges_image</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>set_shape_model_param</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>set_shape_model_timeout.hdev</name>
      <desc>形状ベースマッチングでタイムアウト設定機能を使用する方法 ( Demonstrate how to use the timeout mechanism for shape-based matching )</desc>
      <path>hdevelop/Matching/Shape-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.morphol</method>
      <method>method.roi</method>
      <method>method.visual</method>
      <operator>catch</operator>
      <operator>clear_shape_model</operator>
      <operator>create_shape_model</operator>
      <operator>dev_get_exception_data</operator>
      <operator>endtry</operator>
      <operator>find_shape_model</operator>
      <operator>get_shape_model_contours</operator>
      <operator>set_shape_model_param</operator>
      <operator>throw</operator>
      <operator>try</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>set_tposition.hdev</name>
      <desc>ウィンドウ上でのテキストカーソル位置の設定 ( Set the text cursor position in the output window )</desc>
      <path>hdevelop/Graphics/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.io</method>
      <operator>disp_arrow</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>shape_trans.hdev</name>
      <desc>領域の形状を変換 ( Transform the shape of a region )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <operator>shape_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>shape_trans_xld.hdev</name>
      <desc>XLDの標準的な形状への変換 ( Transform contours into various standard shapes )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <method>method.regionproc</method>
      <method>method.xld</method>
      <operator>crop_part</operator>
      <operator>shape_trans_xld</operator>
      <operator>threshold_sub_pix</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>shock_filter.hdev</name>
      <desc>ショックフィルタを用いたピンボケ画像の鮮鋭化 ( Sharpen a defocused image using a shock filter )</desc>
      <path>hdevelop/Filters/Enhancement/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <operator>fill_interlace</operator>
      <operator>shock_filter</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>sick-3dcamera.hdev</name>
      <desc>SICK-3DCameraインターフェースを用いた画像取り込み（性能評価） (Grab images via a SICK-3DCamera interface (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>sick-3dcamera_calibration.hdev</name>
      <desc>SICK-3DCameraインターフェースの使用 (キャリブレーションと修正) (Use the SICK-3DCamera interface (calibration and rectification))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_data</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>sick-3dcamera_components.hdev</name>
      <desc>SICK-3Dカメラインターフェースを用いた画像取り込み（異なるパラメーター設定） ( Grab images with the SICK-3DCamera interface (different parameter sets) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_data</operator>
      <operator>grab_data_async</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>scale_image_max</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>sick-3dcamera_parameters.hdev</name>
      <desc>SICK-3Dカメラインターフェースを用いた画像取り込み（パラメーター設定の取得） ( Grab images via the SICK-3DCamera interface (query parameter settings) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>sick-3dcamera_simple.hdev</name>
      <desc>SICK-3DCameraを使用 (simple) (Use the SICK-3DCamera interface (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>scale_image_max</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>siliconsoftware.hdev</name>
      <desc>SiliconSoftWare規格での画像取り込み(性能評価) ( Grab images using a SiliconSoftware interface (performance evaluation) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>siliconsoftware_continuous.hdev</name>
      <desc>SiliconSoftwareインターフェースの使用 (連続取り込み、シンプル) (Use a SiliconSoftware interface (continuous grabbing) (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>siliconsoftware_gige_vision.hdev</name>
      <desc>Grab images using a Silicon Software GigE Vision interface</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>siliconsoftware_parameters.hdev</name>
      <desc>SiliconSoftwareインターフェースを用いた画像取り込み（パラメーター設定を取得） (Grab images using a SiliconSoftware interface (query parameter settings))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>siliconsoftware_simple.hdev</name>
      <desc>SiliconSoftwareインターフェースの使用 (シンプル) (Use a SiliconSoftware interface (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>9.0.2</newinversion>
   </example>
   <example>
      <name>siliconsoftware_smartapplets.hdev</name>
      <desc>Grab images using Silicon Software SmartApplets</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>simple_reading.hdev</name>
      <desc>トレーニングしたフォントデータを用いた文字認識 ( Read characters using a trained font )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.blob</method>
      <method>method.ocr</method>
      <method>method.visual</method>
      <operator>clear_ocr_class_mlp</operator>
      <operator>do_ocr_single_class_mlp</operator>
      <operator>read_ocr_class_mlp</operator>
      <operator>set_font</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>simple_training.hdev</name>
      <desc>トレーニングファイルからOCRフォントデータを作成 ( Train an OCR font from a training file )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.classif</method>
      <method>method.ocr</method>
      <operator>clear_ocr_class_mlp</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>read_ocr_trainf_names</operator>
      <operator>trainf_ocr_class_mlp</operator>
      <operator>write_ocr_class_mlp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>simultaneous_grabbing_inspecta.hdev</name>
      <desc>2台のカメラから同時に画像を取得 ( Grab simultaneously from two cameras )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>count_channels</operator>
      <operator>decompose2</operator>
      <operator>grab_image</operator>
      <operator>image_to_channels</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_concat</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>sine.hdev</name>
      <desc>ゼロから3xPaiまでのサイン波形演算と描画 ( Compute and draw the sine from 0 to 3*PI )</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <method>method.functions</method>
      <method>method.numeric</method>
      <method>method.visual</method>
      <operator>assign</operator>
      <operator>disp_line</operator>
   </example>
   <example>
      <name>skeleton.hdev</name>
      <desc>領域の骨格の計算 ( Compute the skeleton of a region )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.morphol</method>
      <operator>skeleton</operator>
      <operator>sobel_amp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>smallest_circle.hdev</name>
      <desc>領域を囲む最小の円を生成 ( Calculate the smallest surrounding circle of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>gen_circle</operator>
      <operator>smallest_circle</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>smallest_rectangle1.hdev</name>
      <desc>領域を囲む最小矩形(傾きなし)を計算 ( Calculate the smallest surrounding axis-parallel rectangle of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>gen_rectangle1</operator>
      <operator>smallest_rectangle1</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>smallest_rectangle2.hdev</name>
      <desc>領域を囲む最小矩形を算出 ( Calculate the smallest surrounding rectangle of regions )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>gen_rectangle2</operator>
      <operator>smallest_rectangle2</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>sobel_amp.hdev</name>
      <desc>Sobelオペレーターを用いたエッジ（強度）の抽出 ( Extract edges (amplitude) using the Sobel operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>skeleton</operator>
      <operator>sobel_amp</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>sobel_dir.hdev</name>
      <desc>Sobelオペレーターを用いたエッジ（強度と方向）の抽出 ( Extract edges (amplitude and direction) using the Sobel operator )</desc>
      <path>hdevelop/Filters/Edges/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.edge</method>
      <operator>nonmax_suppression_dir</operator>
      <operator>sobel_dir</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>sock_recv.hdev</name>
      <desc>ソケット接続を通じて画像とTupleデータを受信 ( Receive image and tuple data via socket connection )</desc>
      <path>hdevelop/System/Sockets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.error</method>
      <method>method.comm</method>
      <operator>close_socket</operator>
      <operator>convert_image_type</operator>
      <operator>dev_error_var</operator>
      <operator>dev_set_check</operator>
      <operator>get_next_socket_data_type</operator>
      <operator>open_socket_accept</operator>
      <operator>receive_image</operator>
      <operator>receive_region</operator>
      <operator>receive_tuple</operator>
      <operator>send_image</operator>
      <operator>send_region</operator>
      <operator>send_tuple</operator>
      <operator>socket_accept_connect</operator>
      <operator>wait_seconds</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>sock_send.hdev</name>
      <desc>ソケット接続を通じて画像とTupleデータを送信 ( Send image and tuple data via socket connection )</desc>
      <path>hdevelop/System/Sockets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.comm</method>
      <operator>close_socket</operator>
      <operator>convert_image_type</operator>
      <operator>open_socket_connect</operator>
      <operator>query_all_colors</operator>
      <operator>receive_image</operator>
      <operator>receive_region</operator>
      <operator>receive_tuple</operator>
      <operator>send_image</operator>
      <operator>send_region</operator>
      <operator>send_tuple</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>sonyxci2.hdev</name>
      <desc>Sony XCI-V100/C、Sony XCI-SX100/Cを用いた画像取り込み (性能評価 ) (Grab images from a Sony XCI-V100/C and Sony XCI-SX100/C camera (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>sonyxci2_parameters.hdev</name>
      <desc>Sony XCI-V100/C, Sony XCI-SX100/Cカメラからパラメーター設定取得 (Query current parameter settings from a Sony XCI-V100/C and Sony XCI-SX100/C camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>sonyxci2_simple.hdev</name>
      <desc>Sony XCI-V100/C, Sony XCI-SX100/Cカメラの簡単な使用方法 (Simple usage of a Sony XCI-V100/C and Sony XCI-SX100/C camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>sort_contours_xld.hdev</name>
      <desc>位置によるXLDの並び替え ( Sort XLD contours by spatial position )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>edges_sub_pix</operator>
      <operator>select_contours_xld</operator>
      <operator>set_line_style</operator>
      <operator>sort_contours_xld</operator>
      <operator>zoom_image_factor</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>sort_region.hdev</name>
      <desc>相対位置にしたがって領域を並べ替え ( Sort regions by their spatial position )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.regionproc</method>
      <operator>area_center</operator>
      <operator>connection</operator>
      <operator>dyn_threshold</operator>
      <operator>mean_image</operator>
      <operator>sort_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>spatial_relation.hdev</name>
      <desc>領域の相対的な位置を算出 ( Calculate the pose relation of regions (left, right, above, below) )</desc>
      <path>hdevelop/Regions/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.feat</method>
      <operator>spatial_relation</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>split_skeleton_lines.hdev</name>
      <desc>1ピクセル幅で枝分かれのないラインに領域を分割 ( Split and approximate one pixel wide, non-branching regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.morphol</method>
      <operator>connection</operator>
      <operator>difference</operator>
      <operator>disp_line</operator>
      <operator>junctions_skeleton</operator>
      <operator>skeleton</operator>
      <operator>split_skeleton_lines</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>split_skeleton_lines2.hdev</name>
      <desc>1ピクセル幅で枝分かれのないラインに領域を分割 ( Split and approximate one pixel wide, non-branching regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.morphol</method>
      <operator>edges_image</operator>
      <operator>junctions_skeleton</operator>
      <operator>skeleton</operator>
      <operator>split_skeleton_lines</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>split_skeleton_region.hdev</name>
      <desc>1ピクセル幅で枝分かれのない領域への分割 ( Split one pixel wide, non-branching regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.morphol</method>
      <operator>junctions_skeleton</operator>
      <operator>skeleton</operator>
      <operator>split_skeleton_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>split_skeleton_region2.hdev</name>
      <desc>1ピクセル幅で枝分かれのない領域への分割 ( Split one pixel wide, non-branching regions )</desc>
      <path>hdevelop/Regions/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regionproc</method>
      <method>method.morphol</method>
      <operator>edges_image</operator>
      <operator>junctions_skeleton</operator>
      <operator>skeleton</operator>
      <operator>split_skeleton_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>stamp_catalogue.hdev</name>
      <desc>ページに散らばった文字のセグメントとグループ化 ( Segment and group characters on a cluttered page )</desc>
      <path>hdevelop/Applications/Print-Inspection/</path>
      <industry>industry.print</industry>
      <applarea>applarea.ident.ocr</applarea>
      <applarea>applarea.inspect.print</applarea>
      <method>method.visual</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>dev_open_window</operator>
      <operator>read_image</operator>
      <operator>shape_trans</operator>
      <operator>top_hat</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>stationary_camera_self_calibration.hdev</name>
      <desc>カメラのセルフキャリブレーション ( Perform a self-calibration of a camera )</desc>
      <path>hdevelop/Calibration/Self-Calibration/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.match.point</method>
      <method>method.mosaic</method>
      <method>method.filter.points</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.align</method>
      <operator>calibrate_cameras</operator>
      <operator>cam_mat_to_cam_par</operator>
      <operator>change_radial_distortion_cam_par</operator>
      <operator>clear_calib_data</operator>
      <operator>create_calib_data</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_bundle_adjusted_mosaic</operator>
      <operator>gen_radial_distortion_map</operator>
      <operator>gen_spherical_mosaic</operator>
      <operator>hom_mat2d_compose</operator>
      <operator>hom_mat2d_invert</operator>
      <operator>map_image</operator>
      <operator>points_foerstner</operator>
      <operator>proj_match_points_ransac</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>stationary_camera_self_calibration</operator>
      <operator>tile_images_offset</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>statistics_points_xld.hdev</name>
      <desc>*_points_xldを用いた2次統計データの解析 ( Analyze 2D statistical data using *_points_xld operators )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <method>method.tuple</method>
      <method>method.roi</method>
      <method>method.ocr</method>
      <method>method.visual</method>
      <operator>area_center_points_xld</operator>
      <operator>bin_threshold</operator>
      <operator>clear_ocr_class_mlp</operator>
      <operator>connection</operator>
      <operator>create_ocr_class_mlp</operator>
      <operator>dilation_circle</operator>
      <operator>disp_arrow</operator>
      <operator>disp_line</operator>
      <operator>disp_rectangle1</operator>
      <operator>elliptic_axis_points_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_features_ocr_class_mlp</operator>
      <operator>get_part</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>intersection</operator>
      <operator>moments_points_xld</operator>
      <operator>read_ocr_trainf_names</operator>
      <operator>reduce_domain</operator>
      <operator>set_rgb</operator>
      <operator>smallest_rectangle1_xld</operator>
      <operator>sort_region</operator>
      <operator>tuple_concat</operator>
      <operator>tuple_sort_index</operator>
      <operator>write_ocr_trainf</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>stereo_calibration.hdev</name>
      <desc>ステレオキャリブレーション ( Calibrate a stereo system )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.calib</method>
      <method>method.stereo</method>
      <method>method.trafo.rectif</method>
      <method>method.visual</method>
      <operator>affine_trans_point_3d</operator>
      <operator>calibrate_cameras</operator>
      <operator>clear_calib_data</operator>
      <operator>create_calib_data</operator>
      <operator>disp_image</operator>
      <operator>disp_region</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>get_calib_data</operator>
      <operator>map_image</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>set_calib_data_calib_object</operator>
      <operator>set_calib_data_cam_param</operator>
      <operator>set_calib_data_observ_points</operator>
      <operator>write_cam_par</operator>
      <operator>write_pose</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>stop.hdev</name>
      <desc>途中結果を確認するための実行の停止 ( Stop the execution in a loop to view intermediate results )</desc>
      <path>hdevelop/Control/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <operator>regiongrowing</operator>
      <operator>stop</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>string.hdev</name>
      <desc>数字の文字列表現フォーマット ( Format strings and numbers )</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.string</method>
      <method>method.io</method>
      <operator>assign</operator>
   </example>
   <example>
      <name>sub_image.hdev</name>
      <desc>二つの画像間の減算 ( Subtract two images )</desc>
      <path>hdevelop/Filters/Arithmetic/</path>
      <industry>industry.general</industry>
      <industry>industry.auto</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.filter.general</method>
      <method>method.motion</method>
      <operator>convert_image_type</operator>
      <operator>sub_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>surface_scratch.hdev</name>
      <desc>動的しきい値法による2値化処理とモフォロジー処理により金属表面のキズを検出 ( Detect scratches on a surface via local thresholding and morphology )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.auto</industry>
      <industry>industry.metal</industry>
      <industry>industry.optic</industry>
      <applarea>applarea.inspect.surface</applarea>
      <method>method.filter.edge</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <operator>connection</operator>
      <operator>dilation_circle</operator>
      <operator>dyn_threshold</operator>
      <operator>mean_image</operator>
      <operator>select_shape</operator>
      <operator>skeleton</operator>
      <operator>union1</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>svcam-gige.hdev</name>
      <desc>SVCam-GigEインターフェースを用いた画像取り込み（性能評価） (Grab images via an SVCam-GigE interface (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>svcam-gige_crop.hdev</name>
      <desc>画像取り込み：SVCam-GigEインターフェース (部分取り込み) (Grab images from an SVCam-GigE interface (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>svcam-gige_parameters.hdev</name>
      <desc>SVCam-GigEインターフェースのパラメーター設定の確認 (Query parameter settings from an SVCam-GigE interface )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>svcam-gige_simple.hdev</name>
      <desc>SVCam-GigEインターフェースの使用 (simple) (Use an SVCam-GigE interface (simple))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>svcam-gige_trigger.hdev</name>
      <desc>SVCam-GigEインターフェースの使用 (ハードウェアトリガ使用) (Use an SVCam-GigE interface (external trigger))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.4</newinversion>
   </example>
   <example>
      <name>symm_difference_closed_contours_xld.hdev</name>
      <desc>symm_difference_closed_contours_xldの使用方法 ( Demonstrate the use of symm_difference_closed_contours_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>symm_difference_closed_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>symm_difference_closed_polygons_xld.hdev</name>
      <desc>symm_difference_closed_polygons_xldの使用方法 ( Demonstrate the use of symm_difference_closed_polygons_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>gen_polygons_xld</operator>
      <operator>symm_difference_closed_polygons_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>symmetry.hdev</name>
      <desc>水平方向の対象性の解析 ( Analyze symmetry in horizontal direction )</desc>
      <path>hdevelop/Filters/Misc/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.color</method>
      <method>method.morphol</method>
      <operator>clip_region</operator>
      <operator>closing_circle</operator>
      <operator>decompose3</operator>
      <operator>expand_line</operator>
      <operator>gauss_image</operator>
      <operator>opening_rectangle1</operator>
      <operator>rank_region</operator>
      <operator>smallest_rectangle1</operator>
      <operator>symmetry</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>synthetic_circle.hdev</name>
      <desc>形状ベースパターンマッチングの人工モデル（円形状）を用いてボード上のキャパシタを検出 ( Use a synthetic model (circle) to search for capacitors on a board )</desc>
      <path>solution_guide/matching/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.shape</method>
      <method>method.visual</method>
      <operator>clear_shape_model</operator>
      <operator>close_framegrabber</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>find_scaled_shape_model</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>gen_image_const</operator>
      <operator>get_shape_model_contours</operator>
      <operator>grab_image</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>inspect_shape_model</operator>
      <operator>open_framegrabber</operator>
      <operator>paint_xld</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>test_self_intersection_xld.hdev</name>
      <desc>XLDオブジェクトが自信と交差しているかの測定 ( Test if an XLD contour intersects itself )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>close_contours_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>test_self_intersection_xld</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>test_xld_point.hdev</name>
      <desc>XLDオブジェクトが特定の点を含むかの測定 ( Test if an XLD contour contains a specific point )</desc>
      <path>hdevelop/XLD/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>test_xld_point</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>text_line_orientation.hdev</name>
      <desc>文字列の原点の抽出と修正 ( Detect and correct the orientation of text_lines ).</desc>
      <path>hdevelop/OCR/Segmentation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.visual</method>
      <method>method.regionproc</method>
      <operator>closing_circle</operator>
      <operator>connection</operator>
      <operator>dilation_rectangle1</operator>
      <operator>dots_image</operator>
      <operator>gen_rectangle1</operator>
      <operator>intensity</operator>
      <operator>intersection</operator>
      <operator>rotate_image</operator>
      <operator>scale_image_max</operator>
      <operator>select_shape</operator>
      <operator>smallest_rectangle1</operator>
      <operator>text_line_orientation</operator>
      <operator>threshold</operator>
      <operator>union1</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>text_line_slant.hdev</name>
      <desc>OCRにおいて傾斜した文字列の修正方法の表示 ( Show how to correct slanted characters for an OCR segmentation )</desc>
      <path>hdevelop/OCR/Segmentation/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.ocr</method>
      <method>method.visual</method>
      <method>method.regionproc</method>
      <operator>affine_trans_image</operator>
      <operator>connection</operator>
      <operator>copy_obj</operator>
      <operator>dilation_rectangle1</operator>
      <operator>erosion_circle</operator>
      <operator>gen_rectangle1</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_slant</operator>
      <operator>intersection</operator>
      <operator>partition_dynamic</operator>
      <operator>smallest_rectangle1</operator>
      <operator>text_line_slant</operator>
      <operator>threshold</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>texture.hdev</name>
      <desc>テクスチャの領域 (木と草原)の検出 ( Find textured areas (trees and bushes) )</desc>
      <path>hdevelop/Applications/Object-Recognition-2D/</path>
      <industry>industry.photo</industry>
      <applarea>applarea.recog.object2d</applarea>
      <method>method.texture</method>
      <method>method.classif</method>
      <method>method.morphol</method>
      <method>method.blob</method>
      <operator>class_2dim_sup</operator>
      <operator>closing_circle</operator>
      <operator>dilation_circle</operator>
      <operator>draw_region</operator>
      <operator>fill_up</operator>
      <operator>gen_rectangle1</operator>
      <operator>histo_2dim</operator>
      <operator>median_separate</operator>
      <operator>opening_circle</operator>
      <operator>texture_laws</operator>
      <operator>threshold</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>texture_laws.hdev</name>
      <desc>Lawsテクスチャフィルターを使用した画像のフィルタリング ( Filter an image using a Laws texture filter )</desc>
      <path>hdevelop/Filters/Texture/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.texture</method>
      <method>method.filter.general</method>
      <method>method.classif</method>
      <method>method.io</method>
      <method>method.morphol</method>
      <operator>class_2dim_sup</operator>
      <operator>closing_circle</operator>
      <operator>dilation_circle</operator>
      <operator>draw_region</operator>
      <operator>fill_up</operator>
      <operator>histo_2dim</operator>
      <operator>median_separate</operator>
      <operator>opening_circle</operator>
      <operator>texture_laws</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>texture_laws_mlp.hdev</name>
      <desc>MLPピクセル識別子を使ったテクスチャ画像の分類 ( Segment an image based on texture using an MLP pixel classifier )</desc>
      <path>hdevelop/Filters/Texture/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.texture</method>
      <method>method.filter.general</method>
      <method>method.classif</method>
      <operator>add_samples_image_class_mlp</operator>
      <operator>classify_image_class_lut</operator>
      <operator>classify_image_class_mlp</operator>
      <operator>clear_class_lut</operator>
      <operator>clear_class_mlp</operator>
      <operator>compose6</operator>
      <operator>create_class_lut_mlp</operator>
      <operator>create_class_mlp</operator>
      <operator>mean_image</operator>
      <operator>texture_laws</operator>
      <operator>train_class_mlp</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>threshold.hdev</name>
      <desc>しきい値法による区間内に存在するグレイ値の選択 ( Select gray values lying within an interval )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.blob</method>
      <method>method.feat</method>
      <method>method.segm</method>
      <operator>connection</operator>
      <operator>fill_interlace</operator>
      <operator>select_shape</operator>
      <operator>threshold</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>threshold_sub_pix.hdev</name>
      <desc>サブピクセル精度でのしきい値処理 ( Extract level crossings from an image with subpixel accuracy )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>fit_circle_contour_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>segment_contours_xld</operator>
      <operator>threshold_sub_pix</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>tile_channels.hdev</name>
      <desc>多チャンネル画像の各チャンネル画像を一枚の画像に合成 ( Tile multiple image channels into a large image )</desc>
      <path>hdevelop/Image/Format/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <operator>append_channel</operator>
      <operator>tile_channels</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>tile_channels_reduced.hdev</name>
      <desc>多チャンネル画像からそれぞれのチャンネルの一部を抜き出して一枚の画像に合成 ( Tile regions of multiple image channels into a large image )</desc>
      <path>hdevelop/Image/Format/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <operator>append_channel</operator>
      <operator>tile_channels</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>tile_images.hdev</name>
      <desc>複数画像を一枚の画像に合成 ( Tile multiple images into a large image )</desc>
      <path>hdevelop/Image/Format/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <method>method.filter.general</method>
      <operator>mirror_image</operator>
      <operator>scale_image</operator>
      <operator>tile_images</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>tile_images_offset.hdev</name>
      <desc>複数画像を指定オフセット分ずらして一枚の画像に合成 ( Tile multiple images into a large image at predefined offsets )</desc>
      <path>hdevelop/Image/Format/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <operator>crop_rectangle1</operator>
      <operator>sub_image</operator>
      <operator>tile_images_offset</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>tile_images_reduced.hdev</name>
      <desc>複数画像の一部を抜き出し一枚の画像に合成 ( Tile regions of multiple images into a large image )</desc>
      <path>hdevelop/Image/Format/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <method>method.filter.general</method>
      <operator>mirror_image</operator>
      <operator>rectangle1_domain</operator>
      <operator>scale_image</operator>
      <operator>tile_images</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>tile_images_size.hdev</name>
      <desc>複数画像の一部を抜き出し一枚の画像に合成 ( Tile regions of multiple images into a large image )</desc>
      <path>hdevelop/Image/Format/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.image</method>
      <operator>crop_rectangle1</operator>
      <operator>tile_images</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>track_engine_part.hdev</name>
      <desc>可変形状ベース透視歪マッチングを用いたエンジン部品の追跡 ( Track an engine part using perspective deformable matching )</desc>
      <path>hdevelop/Applications/Robot-Vision/</path>
      <industry>industry.auto</industry>
      <applarea>applarea.robotvis</applarea>
      <method>method.match.deform</method>
      <method>method.trafo.geom</method>
      <method>method.trafo.wcoord</method>
      <operator>affine_trans_point_3d</operator>
      <operator>clear_deformable_model</operator>
      <operator>create_planar_uncalib_deformable_model</operator>
      <operator>find_planar_uncalib_deformable_model</operator>
      <operator>get_deformable_model_contours</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>projective_trans_contour_xld</operator>
      <operator>projective_trans_image</operator>
      <operator>projective_trans_pixel</operator>
      <operator>set_deformable_model_origin</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>track_wires_on_chip.hdev</name>
      <desc>チップ上のワイヤボンディングの追跡 ( Track wire bondings on a chip )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.xld</method>
      <operator>crop_contours_xld</operator>
      <operator>length_xld</operator>
      <operator>orientation_points_xld</operator>
      <operator>smooth_contours_xld</operator>
      <operator>union_collinear_contours_ext_xld</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>train_characters_ocr.hdev</name>
      <desc>サポートベクターマシン（SVM）分類法によるフォントデータ生成 ( Train a new SVM font for a small set of characters )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.ocr</applarea>
      <method>method.classif</method>
      <method>method.ocr</method>
      <method>method.blob</method>
      <operator>append_ocr_trainf</operator>
      <operator>clear_all_ocr_class_svm</operator>
      <operator>create_ocr_class_svm</operator>
      <operator>read_ocr_trainf</operator>
      <operator>reduce_ocr_class_svm</operator>
      <operator>trainf_ocr_class_svm</operator>
      <operator>write_ocr_class_svm</operator>
      <operator>write_ocr_trainf</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>transform_image_into_wcs.hdev</name>
      <desc>画像補正の為の姿勢とスケールを検出 ( Determine pose and scale for rectified imag )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.rectif</method>
      <method>method.visual</method>
      <operator>contour_to_world_plane_xld</operator>
      <operator>distance_pp</operator>
      <operator>full_domain</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>get_domain</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>image_to_world_plane</operator>
      <operator>map_image</operator>
      <operator>set_origin_pose</operator>
      <operator>smallest_rectangle1_xld</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>transpose_region.hdev</name>
      <desc>点対称の領域を生成 ( Reflect regions about a point )</desc>
      <path>hdevelop/Regions/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>draw_region</operator>
      <operator>transpose_region</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>try_catch.hdev</name>
      <desc>HDevelo上での例外処理の使用方法 ( Demonstrate the usage of the exception handling in HDevelop )</desc>
      <path>hdevelop/Control/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <operator>catch</operator>
      <operator>continue</operator>
      <operator>dev_get_exception_data</operator>
      <operator>dev_set_preferences</operator>
      <operator>endtry</operator>
      <operator>throw</operator>
      <operator>try</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>tuple.hdev</name>
      <desc>Tupleデータの扱い方 ( Work with tuples )</desc>
      <path>hdevelop/Manuals/HDevelop/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.tuple</method>
      <operator>assign</operator>
   </example>
   <example>
      <name>tuple_histo_range.hdev</name>
      <desc>ユーザ定義の範囲におけるTupleデータの配分を算出 ( Calculate the value distribution of a tuple in a user-defined value range )</desc>
      <path>hdevelop/Tuple/Features/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.tuple</method>
      <operator>tuple_histo_range</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>tuple_regexp.hdev</name>
      <desc>正規表現の使用方法例 ( Demonstrate the use of regular expressions )</desc>
      <path>hdevelop/Tuple/String-Operations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.regexp</method>
      <operator>list_files</operator>
      <operator>tuple_environment</operator>
      <operator>tuple_regexp_match</operator>
      <operator>tuple_regexp_replace</operator>
      <operator>tuple_regexp_select</operator>
      <operator>tuple_regexp_test</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>twain_interactive.hdev</name>
      <desc>HALCON TWAINインターフェースの使用 (インタラクティブモード) (Use the HALCON TWAIN interface in interactive mode)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>twain_manual.hdev</name>
      <desc>HALCON TWAINインターフェースを使用 (マニュアルモードでスキャナーを使用) (Use the HALCON TWAIN interface with a scanner in manual mode)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.0</newinversion>
   </example>
   <example>
      <name>two_camera_calibration.hdev</name>
      <desc>キャリブレーションプレートを用いた高精度な貼り合わせを行いモザイク画像を生成 ( Perform high precision mosaicking using a special calibration object )</desc>
      <path>solution_guide/3d_vision/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.calib</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.wcoord</method>
      <method>method.filter.general</method>
      <method>method.morphol</method>
      <method>method.metrol</method>
      <method>method.xld</method>
      <method>method.visual</method>
      <operator>break</operator>
      <operator>caltab_points</operator>
      <operator>close_measure</operator>
      <operator>closing</operator>
      <operator>dev_set_lut</operator>
      <operator>disp_image</operator>
      <operator>dyn_threshold</operator>
      <operator>elliptic_axis</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>full_domain</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>hom_mat3d_compose</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>hom_mat3d_translate_local</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>map_image</operator>
      <operator>mean_image</operator>
      <operator>measure_pairs</operator>
      <operator>min_max_gray</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>select_shape</operator>
      <operator>select_shape_std</operator>
      <operator>set_origin_pose</operator>
      <operator>smallest_rectangle2</operator>
      <operator>tile_images</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>ueye.hdev</name>
      <desc>IDS uEyeカメラを用いた画像取り込み（性能評価） (Grab images from an IDS uEye camera (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>ueye_2cameras.hdev</name>
      <desc>IDS uEyeカメラ2台からの同時取り込み (Grab images from two IDS uEye cameras simultaneousl)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>disp_image</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>ueye_crop.hdev</name>
      <desc>IDS社製uEyeカメラを用いた画像取り込み(画像の切り出し) ( Grab images from a IDS uEye camera (image cropping) )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>wait_seconds</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>ueye_parameters.hdev</name>
      <desc>IDS社製uEyeカメラからのパラメータの取得 ( Query parameter settings from a IDS uEye camera )</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>tuple_sort</operator>
      <operator>wait_seconds</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>ueye_simple.hdev</name>
      <desc>IDS uEyeカメラを用いた画像取り込み (Grab images from a IDS uEye camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>ueye_trigger.hdev</name>
      <desc>IDS uEyeカメラからの画像取り込み (ハードウェアトリガ使用) (Grab images from a IDS uEye camera (external triggering))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.1.4</newinversion>
   </example>
   <example>
      <name>uncalib_stereo_boxes.hdev</name>
      <desc>キャリブレーションなしのステレオビジョンを用いたボックスの面の計測</desc>
      <path>hdevelop/3D-Reconstruction/Binocular-Stereo/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.3D</applarea>
      <method>method.stereo</method>
      <operator>affine_trans_point_3d</operator>
      <operator>binocular_distance</operator>
      <operator>gen_binocular_rectification_map</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>get_domain</operator>
      <operator>hom_mat3d_invert</operator>
      <operator>map_image</operator>
      <operator>match_rel_pose_ransac</operator>
      <operator>opening</operator>
      <operator>points_foerstner</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>set_tposition</operator>
      <operator>test_xld_point</operator>
      <operator>tuple_find</operator>
      <operator>tuple_sort_index</operator>
      <operator>vector_to_rel_pose</operator>
      <operator>write_string</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>union2_closed_contours_xld.hdev</name>
      <desc>union2_closed_contours_xldの使用方法 ( Demonstrate the use of union2_closed_contours_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_contour_global_attrib_xld</operator>
      <operator>union2_closed_contours_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>union2_closed_polygons_xld.hdev</name>
      <desc>union2_closed_contours_xldの使用方法 ( Demonstrate the use of union2_closed_contours_xld )</desc>
      <path>hdevelop/XLD/Sets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.xld</method>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>gen_polygons_xld</operator>
      <operator>union2_closed_polygons_xld</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>union_cocircular_contours_xld.hdev</name>
      <desc>同心円上のXLDの連結 ( Merge contours belonging to the same circle )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>edges_sub_pix</operator>
      <operator>select_contours_xld</operator>
      <operator>union_cocircular_contours_xld</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>union_contours_xld.hdev</name>
      <desc>同一直線状のXLDの連結を用いたパッドの位置情報取得 ( Find pads on a die by connecting collinear line segments )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.semicon</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>edges_sub_pix</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_rectangle2</operator>
      <operator>rectangle1_domain</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>smallest_rectangle2_xld</operator>
      <operator>union_adjacent_contours_xld</operator>
      <operator>union_collinear_contours_xld</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>union_cotangential_contours_xld.hdev</name>
      <desc>局所的な曲率によるXLDの統合 ( Merge contours according to their local curvature )</desc>
      <path>hdevelop/XLD/Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <operator>gen_contour_nurbs_xld</operator>
      <operator>union_cotangential_contours_xld</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>var_threshold.hdev</name>
      <desc>局所平均値と分散値から計算した局所しきい値を使った画像の分割化 ( Segment an image using a local threshold calculated from local mean and standard deviation )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.feat</method>
      <method>method.segm</method>
      <operator>close_framegrabber</operator>
      <operator>connection</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>var_threshold</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>variation_model_illumination.hdev</name>
      <desc>明るさが変化する環境におけるバリエーションモデルを用いた印刷検査 ( Inspect print using variation model with varying illumination )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.match.shape</method>
      <method>method.varmodel</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_image</operator>
      <operator>affine_trans_region</operator>
      <operator>area_center</operator>
      <operator>bin_threshold</operator>
      <operator>clear_shape_model</operator>
      <operator>clear_variation_model</operator>
      <operator>closing_circle</operator>
      <operator>compare_ext_variation_model</operator>
      <operator>create_scaled_shape_model</operator>
      <operator>create_variation_model</operator>
      <operator>elliptic_axis</operator>
      <operator>find_scaled_shape_model</operator>
      <operator>gen_circle</operator>
      <operator>gen_ellipse</operator>
      <operator>gen_rectangle1</operator>
      <operator>get_shape_model_contours</operator>
      <operator>hom_mat2d_invert</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>intensity</operator>
      <operator>intersection</operator>
      <operator>opening_circle</operator>
      <operator>prepare_direct_variation_model</operator>
      <operator>scale_image</operator>
      <operator>set_color</operator>
      <operator>smallest_circle</operator>
      <operator>smallest_rectangle1</operator>
      <operator>sobel_amp</operator>
      <operator>tuple_strlen</operator>
      <operator>union1</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>variation_model_single.hdev</name>
      <desc>参照画像1枚から生成したバリエーションモデルを用いた印刷検査 ( Inspect print using variation model with single reference image )</desc>
      <path>solution_guide/basics/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.match.shape</method>
      <method>method.varmodel</method>
      <method>method.filter.general</method>
      <method>method.trafo.align</method>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_image</operator>
      <operator>area_center</operator>
      <operator>binomial_filter</operator>
      <operator>clear_shape_model</operator>
      <operator>clear_variation_model</operator>
      <operator>compare_ext_variation_model</operator>
      <operator>connection</operator>
      <operator>create_shape_model</operator>
      <operator>create_variation_model</operator>
      <operator>difference</operator>
      <operator>dilation_circle</operator>
      <operator>disp_rectangle1</operator>
      <operator>edges_sub_pix</operator>
      <operator>fill_up</operator>
      <operator>find_shape_model</operator>
      <operator>gen_image_const</operator>
      <operator>gen_region_polygon</operator>
      <operator>get_contour_xld</operator>
      <operator>get_draw</operator>
      <operator>get_rgb</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>paint_region</operator>
      <operator>prepare_direct_variation_model</operator>
      <operator>set_font</operator>
      <operator>set_rgb</operator>
      <operator>shape_trans</operator>
      <operator>threshold</operator>
      <operator>vector_angle_to_rigid</operator>
      <operator>zoom_image_size</operator>
      <newinversion>8.0</newinversion>
   </example>
   <example>
      <name>vector_angle_to_rigid.hdev</name>
      <desc>パターンのマッチングと正規化された画像の表示 ( Match a pattern and display the normalized image )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.io</method>
      <method>method.roi</method>
      <method>method.trafo.align</method>
      <method>method.trafo.rectif</method>
      <method>method.match.gray</method>
      <method>method.error</method>
      <operator>affine_trans_image</operator>
      <operator>best_match_rot_mg</operator>
      <operator>clear_template</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>copy_obj</operator>
      <operator>create_template_rot</operator>
      <operator>disp_image</operator>
      <operator>disp_region</operator>
      <operator>draw_rectangle2</operator>
      <operator>full_domain</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_mbutton</operator>
      <operator>get_mposition</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>info_framegrabber</operator>
      <operator>intensity</operator>
      <operator>open_framegrabber</operator>
      <operator>set_offset_template</operator>
      <operator>vector_angle_to_rigid</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>vector_to_proj_hom_mat2d.hdev</name>
      <desc>競技場画像を垂直上方からの眺めに模擬した変形 ( Rectify image of stadium to simulate overhead view )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.color</method>
      <method>method.segm</method>
      <method>method.roi</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.geom</method>
      <method>method.visual</method>
      <operator>boundary</operator>
      <operator>decompose3</operator>
      <operator>dev_set_window_extents</operator>
      <operator>dilation_rectangle1</operator>
      <operator>edges_color_sub_pix</operator>
      <operator>fit_line_contour_xld</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>intersection_ll</operator>
      <operator>projective_trans_contour_xld</operator>
      <operator>projective_trans_image_size</operator>
      <operator>regress_contours_xld</operator>
      <operator>segment_contours_xld</operator>
      <operator>select_contours_xld</operator>
      <operator>select_shape_std</operator>
      <operator>select_shape_xld</operator>
      <operator>shape_trans</operator>
      <operator>trans_from_rgb</operator>
      <operator>union_collinear_contours_xld</operator>
      <operator>vector_to_proj_hom_mat2d</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>vector_to_rigid.hdev</name>
      <desc>対応点からの剛体変形の近似 ( Approximate a rigid tranformation from point correspondences )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.numeric</method>
      <method>method.visual</method>
      <operator>add_noise_white_contour_xld</operator>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_point_2d</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>vector_to_rigid</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>vector_to_similarity.hdev</name>
      <desc>対応点からの相似変形の近似 ( Approximate a similarity tranformation from point correspondences )</desc>
      <path>hdevelop/Transformations/2D-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.numeric</method>
      <method>method.visual</method>
      <operator>add_noise_white_contour_xld</operator>
      <operator>affine_trans_contour_xld</operator>
      <operator>affine_trans_point_2d</operator>
      <operator>gen_contour_polygon_xld</operator>
      <operator>gen_ellipse_contour_xld</operator>
      <operator>get_contour_xld</operator>
      <operator>hom_mat2d_identity</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>hom_mat2d_scale</operator>
      <operator>hom_mat2d_translate</operator>
      <operator>vector_to_similarity</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>vessel.hdev</name>
      <desc>血管の抽出と計測 ( Extract and measure a blood vessel )</desc>
      <path>hdevelop/Applications/Measuring-2D/</path>
      <industry>industry.health</industry>
      <applarea>applarea.measure.2D</applarea>
      <method>method.texture</method>
      <method>method.visual</method>
      <method>method.filter.general</method>
      <method>method.blob</method>
      <method>method.functions</method>
      <method>method.numeric</method>
      <operator>bin_threshold</operator>
      <operator>clip_region</operator>
      <operator>dev_display</operator>
      <operator>gen_region_line</operator>
      <operator>gen_region_points</operator>
      <operator>get_region_contour</operator>
      <operator>get_region_points</operator>
      <operator>intersection</operator>
      <operator>mean_image</operator>
      <operator>smallest_rectangle1</operator>
      <operator>texture_laws</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>visualize_3d_feature_space.hdev</name>
      <desc>特徴空間の3次元表示 ( Visualize a 3D feature space interactively )</desc>
      <path>solution_guide/classification/</path>
      <industry>industry.general</industry>
      <applarea>applarea.inspect.texture</applarea>
      <applarea>applarea.general</applarea>
      <method>method.texture</method>
      <method>method.visual</method>
      <method>method.trafo.geom</method>
      <operator>affine_trans_point_3d</operator>
      <operator>compose6</operator>
      <operator>principal_comp</operator>
      <operator>project_3d_point</operator>
      <operator>texture_laws</operator>
      <newinversion>9.0</newinversion>
   </example>
   <example>
      <name>volatile_grabbing_falcon.hdev</name>
      <desc>高速画像取り込み(volatileモード）のデモ ( Show the effect of volatile grabbing )</desc>
      <path>solution_guide/image_acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>grab_image</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>vrmareascan3d_parameters.hdev</name>
      <desc>Query parameter settings from an VRmAreaScan3D interface</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>vrmareascan3d_simple.hdev</name>
      <desc>Grab images from an VRmAreaScan3D interface</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_data</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>10.0</newinversion>
   </example>
   <example>
      <name>vrmusbcam.hdev</name>
      <desc>VRmagic USBからの画像取り込み (性能評価) (Grab images from a VRmagic USB camera (performance evaluation))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>access_channel</operator>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>grab_image_async</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>vrmusbcam_2cameras.hdev</name>
      <desc>2台のVRmagic USBカメラを用いた画像取り込み (Grab images from two VRmagic USB cameras)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>count_channels</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>grab_image_start</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>vrmusbcam_crop.hdev</name>
      <desc>VRmagic USBカメラを用いた画像取り込み（(部分取り込み） (Grab images from a VRmagic USB camera (image cropping))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <operator>wait_seconds</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>vrmusbcam_parameters.hdev</name>
      <desc>VRmagic USBカメラの現在のパラメーター設定の確認 (Query current parameter settings from a VRmagic USB camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>get_framegrabber_param</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>tuple_sort</operator>
      <operator>tuple_uniq</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>vrmusbcam_simple.hdev</name>
      <desc>VRmagic USBカメラの簡単な使用方法 (Simple usage of a VRmagic USB camera)</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>vrmusbcam_trigger.hdev</name>
      <desc>VRmagic USBカメラからの画像取り込み (ハードウェアトリガ使用) (Grab images from a VRmagic USB camera (external triggering))</desc>
      <path>hdevelop/Image/Acquisition/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.acqu</method>
      <operator>close_all_framegrabbers</operator>
      <operator>close_framegrabber</operator>
      <operator>get_framegrabber_param</operator>
      <operator>grab_image_async</operator>
      <operator>info_framegrabber</operator>
      <operator>open_framegrabber</operator>
      <operator>set_framegrabber_param</operator>
      <newinversion>8.0.2</newinversion>
   </example>
   <example>
      <name>watersheds.hdev</name>
      <desc>画像からの分割領域の抽出 ( Extract watersheds and basins from an image )</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>gauss_image</operator>
      <operator>invert_image</operator>
      <operator>watersheds</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>watersheds_threshold.hdev</name>
      <desc>しきい値を使用した分割領域の抽出 （ Extract watersheds basins using a threshold ）</desc>
      <path>hdevelop/Segmentation/Topography/</path>
      <industry>industry.general</industry>
      <industry>industry.health</industry>
      <industry>industry.pharm</industry>
      <industry>industry.print</industry>
      <applarea>applarea.general</applarea>
      <method>method.segm</method>
      <operator>class_2dim_sup</operator>
      <operator>convert_image_type</operator>
      <operator>decompose3</operator>
      <operator>dev_set_lut</operator>
      <operator>distance_transform</operator>
      <operator>gauss_image</operator>
      <operator>histo_2dim</operator>
      <operator>intersection</operator>
      <operator>invert_image</operator>
      <operator>mean_image</operator>
      <operator>scale_image_max</operator>
      <operator>trans_from_rgb</operator>
      <operator>watersheds</operator>
      <operator>watersheds_threshold</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>while.hdev</name>
      <desc>マウス操作によるインタラクションの提供 ( Use a while loop to provide interaction until right mouse button is clicked )</desc>
      <path>hdevelop/Control/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.controlstruct</method>
      <operator>endwhile</operator>
      <operator>while</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>world_coordinates_line_scan.hdev</name>
      <desc>カメラキャリブレーションを用いたラインスキャンカメラ画像中のキャリパーの目盛りのピッチ計測 ( Measure distances between the pitch lines of a caliper rule in a line scan image using camera calibration )</desc>
      <path>hdevelop/Applications/Measuring-3D/</path>
      <industry>industry.general</industry>
      <applarea>applarea.measure.2D</applarea>
      <applarea>applarea.measure.3D</applarea>
      <method>method.calib</method>
      <method>method.io</method>
      <method>method.edgeextr</method>
      <method>method.xld</method>
      <method>method.tuple</method>
      <method>method.metrol</method>
      <method>method.roi</method>
      <method>method.trafo.rectif</method>
      <method>method.trafo.wcoord</method>
      <method>method.visual</method>
      <operator>affine_trans_point_3d</operator>
      <operator>caltab_points</operator>
      <operator>camera_calibration</operator>
      <operator>close_measure</operator>
      <operator>contour_to_world_plane_xld</operator>
      <operator>disp_arrow</operator>
      <operator>disp_caltab</operator>
      <operator>disp_rectangle1</operator>
      <operator>distance_pp</operator>
      <operator>draw_rectangle2</operator>
      <operator>edges_sub_pix</operator>
      <operator>find_caltab</operator>
      <operator>find_marks_and_pose</operator>
      <operator>fit_circle_contour_xld</operator>
      <operator>fit_ellipse_contour_xld</operator>
      <operator>full_domain</operator>
      <operator>gen_contour_region_xld</operator>
      <operator>gen_cross_contour_xld</operator>
      <operator>gen_image_to_world_plane_map</operator>
      <operator>gen_measure_rectangle2</operator>
      <operator>gen_rectangle2</operator>
      <operator>get_domain</operator>
      <operator>get_draw</operator>
      <operator>get_part</operator>
      <operator>get_string_extents</operator>
      <operator>get_window_extents</operator>
      <operator>hom_mat3d_rotate_local</operator>
      <operator>hom_mat3d_to_pose</operator>
      <operator>hom_mat3d_translate_local</operator>
      <operator>image_points_to_world_plane</operator>
      <operator>image_to_world_plane</operator>
      <operator>map_image</operator>
      <operator>measure_pairs</operator>
      <operator>pose_to_hom_mat3d</operator>
      <operator>project_3d_point</operator>
      <operator>reduce_domain</operator>
      <operator>select_shape_xld</operator>
      <operator>set_origin_pose</operator>
      <operator>sim_caltab</operator>
      <operator>smallest_rectangle1_xld</operator>
      <operator>tuple_sort_index</operator>
      <newinversion>7.1</newinversion>
   </example>
   <example>
      <name>write_2d_data_code_model.hdev</name>
      <desc>2Dデータコードモデルをトレーニングして結果をファイルに出力</desc>
      <path>solution_guide/2d_data_codes/</path>
      <industry>industry.general</industry>
      <applarea>applarea.ident.datacode</applarea>
      <method>method.datacode</method>
      <method>method.visual</method>
      <operator>clear_data_code_2d_model</operator>
      <operator>create_data_code_2d_model</operator>
      <operator>dev_close_inspect_ctrl</operator>
      <operator>dev_inspect_ctrl</operator>
      <operator>find_data_code_2d</operator>
      <operator>get_data_code_2d_param</operator>
      <operator>query_data_code_2d_params</operator>
      <operator>write_data_code_2d_model</operator>
      <newinversion>7.1.1</newinversion>
   </example>
   <example>
      <name>write_image.hdev</name>
      <desc>画像ファイルの保存 ( Write an image to file )</desc>
      <path>hdevelop/File/Images/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <operator>sobel_amp</operator>
      <operator>write_image</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>write_ocv.hdev</name>
      <desc>OCVデータのファイル書込（および再読込） ( Write OCV data to file (and read it in again) )</desc>
      <path>hdevelop/Inspection/OCV/</path>
      <industry>industry.print</industry>
      <applarea>applarea.inspect.print</applarea>
      <method>method.ocv</method>
      <operator>close_ocv</operator>
      <operator>create_ocv_proj</operator>
      <operator>read_ocv</operator>
      <operator>shape_trans</operator>
      <operator>traind_ocv_proj</operator>
      <operator>write_ocv</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>write_region.hdev</name>
      <desc>ファイルへの領域データの書き込み ( Write region data to file )</desc>
      <path>hdevelop/File/Region/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.file</method>
      <method>method.regionproc</method>
      <operator>write_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>write_string.hdev</name>
      <desc>ウインドウへのテキストの書き込み ( Write text in a window )</desc>
      <path>hdevelop/Graphics/Text/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.visual</method>
      <method>method.io</method>
      <operator>new_line</operator>
      <operator>set_tposition</operator>
      <operator>write_string</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>write_template.hdev</name>
      <desc>グレイ値ベースマッチング用テンプレートファイルの読み込み・保存方法 ( Read and write gray value template files )</desc>
      <path>hdevelop/Matching/Gray-Value-Based/</path>
      <industry>industry.general</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <method>method.match.gray</method>
      <method>method.trafo.geom</method>
      <method>method.file</method>
      <operator>affine_trans_image</operator>
      <operator>best_match_rot_mg</operator>
      <operator>clear_template</operator>
      <operator>create_template_rot</operator>
      <operator>disp_arrow</operator>
      <operator>fill_interlace</operator>
      <operator>hom_mat2d_rotate</operator>
      <operator>read_template</operator>
      <operator>write_template</operator>
      <newinversion>6.1</newinversion>
   </example>
   <example>
      <name>xing.hdev</name>
      <desc>後処理を組み合わせた背景推定法を利用しての交通監視 ( Monitor traffic using background estimation with postprocessing )</desc>
      <path>hdevelop/Applications/Security-Systems/</path>
      <industry>industry.transp</industry>
      <industry>industry.secure</industry>
      <applarea>applarea.recog.object2d</applarea>
      <applarea>applarea.security</applarea>
      <method>method.visual</method>
      <method>method.blob</method>
      <method>method.morphol</method>
      <method>method.motion</method>
      <operator>clip_region</operator>
      <operator>close_bg_esti</operator>
      <operator>complement</operator>
      <operator>create_bg_esti</operator>
      <operator>dilation_rectangle1</operator>
      <operator>give_bg_esti</operator>
      <operator>read_region</operator>
      <operator>run_bg_esti</operator>
      <operator>select_gray</operator>
      <operator>shape_trans</operator>
      <operator>update_bg_esti</operator>
      <operator>zoom_image_factor</operator>
      <operator>zoom_region</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>xing_simple.hdev</name>
      <desc>背景推定法を利用しての交通監視 ( Monitor traffic using background estimation )</desc>
      <path>hdevelop/Applications/Security-Systems/</path>
      <industry>industry.transp</industry>
      <industry>industry.secure</industry>
      <applarea>applarea.recog.pos2d</applarea>
      <applarea>applarea.security</applarea>
      <method>method.visual</method>
      <method>method.blob</method>
      <method>method.motion</method>
      <operator>close_bg_esti</operator>
      <operator>connection</operator>
      <operator>create_bg_esti</operator>
      <operator>give_bg_esti</operator>
      <operator>intersection</operator>
      <operator>read_region</operator>
      <operator>run_bg_esti</operator>
      <operator>shape_trans</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>xld_recv.hdev</name>
      <desc>ソケット接続を通じてXLDデータを受信 ( Receive an XLD contour via socket connection )</desc>
      <path>hdevelop/System/Sockets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.comm</method>
      <operator>close_socket</operator>
      <operator>gen_parallels_xld</operator>
      <operator>get_next_socket_data_type</operator>
      <operator>open_socket_accept</operator>
      <operator>receive_image</operator>
      <operator>receive_xld</operator>
      <operator>send_xld</operator>
      <operator>socket_accept_connect</operator>
      <operator>split_contours_xld</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>xld_send.hdev</name>
      <desc>ソケット接続を通じてXLDデータを送信 ( Send an XLD contour via socket connection )</desc>
      <path>hdevelop/System/Sockets/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.comm</method>
      <operator>close_socket</operator>
      <operator>gen_polygons_xld</operator>
      <operator>mod_parallels_xld</operator>
      <operator>open_socket_connect</operator>
      <operator>receive_xld</operator>
      <operator>send_image</operator>
      <operator>send_xld</operator>
      <operator>split_contours_xld</operator>
      <newinversion>5.2.3</newinversion>
   </example>
   <example>
      <name>zero_crossing.hdev</name>
      <desc>画像のゼロクロス点の検出 ( Detect zero crossings in an image )</desc>
      <path>hdevelop/Segmentation/Threshold/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.filter.general</method>
      <method>method.segm</method>
      <operator>diff_of_gauss</operator>
      <operator>zero_crossing</operator>
      <newinversion>7.0</newinversion>
   </example>
   <example>
      <name>zoom_region.hdev</name>
      <desc>領域を拡大 ( Scale regions )</desc>
      <path>hdevelop/Regions/Geometric-Transformations/</path>
      <industry>industry.general</industry>
      <applarea>applarea.general</applarea>
      <method>method.trafo.geom</method>
      <method>method.regionproc</method>
      <method>method.io</method>
      <operator>draw_region</operator>
      <operator>zoom_region</operator>
      <newinversion>7.0</newinversion>
   </example>
</examples>